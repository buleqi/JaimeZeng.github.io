{"title":"变量的高级用法","uid":"a6f9db63870b876ac4f0e8fb7a8c3c63","slug":"2020-10-03-02_变量的高级用法","date":"2020-10-03T11:20:26.000Z","updated":"2021-09-18T10:50:17.743Z","comments":true,"path":"api/articles/2020-10-03-02_变量的高级用法.json","keywords":null,"cover":null,"content":"<p>该小节介绍了变量的高级用法，如何进行变量替换、字符串处理方法、如何利用命令替换为变量赋值、有类型变量和变量引用的使用方法，并在实际环境中演示如何使用，加深大家的认识和理解；最后介绍 shell 中的数学运算方法，使用 expr 和 bc…</p>\n<h2 id=\"变量替换和测试\"><a href=\"#变量替换和测试\" class=\"headerlink\" title=\"变量替换和测试\"></a>变量替换和测试</h2><h3 id=\"变量替换\"><a href=\"#变量替换\" class=\"headerlink\" title=\"变量替换\"></a>变量替换</h3><table>\n<thead>\n<tr>\n<th>语法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>$&#123;变量名#匹配规则&#125;</code></td>\n<td>从<strong>变量</strong>开头进行规则匹配，将符合<strong>最短</strong>的数据删除</td>\n</tr>\n<tr>\n<td><code>$&#123;变量名##匹配规则&#125;</code></td>\n<td>从<strong>变量</strong>开头进行规则匹配，将符合<strong>最长</strong>的数据删除</td>\n</tr>\n<tr>\n<td><code>$&#123;变量名%匹配规则&#125;</code></td>\n<td>从<strong>尾部</strong>开头进行规则匹配，将符合<strong>最短</strong>的数据删除</td>\n</tr>\n<tr>\n<td><code>$&#123;变量名%%匹配规则&#125;</code></td>\n<td>从<strong>尾部</strong>开头进行规则匹配，将符合<strong>最长</strong>的数据删除</td>\n</tr>\n<tr>\n<td><code>$&#123;变量名/旧字符串/新字符串&#125;</code></td>\n<td>变量内容符合旧字符串，则<strong>第一个</strong>旧字符串会被新字符串取代</td>\n</tr>\n<tr>\n<td><code>$&#123;变量名//旧字符串/新字符串&#125;</code></td>\n<td>变量内容符合旧字符串，则<strong>全部的</strong>旧字符串会被新字符串取代</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[ryan@ryan-tencentcloud-1 ~]$ var0&#x3D;&quot;I love you, do you love me&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var0\nI love you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0#*ov&#125;    # 从头开始匹配，最短删除\ne you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0##*ov&#125;    # 从头开始匹配，最长删除\ne me\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0%ov*&#125;    # 从尾开始匹配，最短删除\nI love you, do you l\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0%%ov*&#125;    # 从尾开始匹配，最长删除\nI l\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0&#x2F;love&#x2F;hate&#125;    # 替换变量内的第一个旧字符串为新字符串\nI hate you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0&#x2F;&#x2F;love&#x2F;hate&#125;    # 替换变量内的所有的旧字符串为新字符串\nI hate you, do you hate me</code></pre>\n\n<h3 id=\"变量测试\"><a href=\"#变量测试\" class=\"headerlink\" title=\"变量测试\"></a>变量测试</h3><table>\n<thead>\n<tr>\n<th>变量配置方式</th>\n<th>str 没有配置</th>\n<th>str 为空字符串</th>\n<th>str 已配置且非空</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var=${str-expr}</td>\n<td>var=expr</td>\n<td>var=</td>\n<td>var=$str</td>\n</tr>\n<tr>\n<td>var=${str:-expr}</td>\n<td>var=expr</td>\n<td>var=expr</td>\n<td>var=$str</td>\n</tr>\n<tr>\n<td>var=${str+expr}</td>\n<td>var=</td>\n<td>var=expr</td>\n<td>var=expr</td>\n</tr>\n<tr>\n<td>var=${str:+expr}</td>\n<td>var=</td>\n<td>var=</td>\n<td>var=expr</td>\n</tr>\n<tr>\n<td>var=${str=expr}</td>\n<td>var=expr</td>\n<td>var=</td>\n<td>var=$str</td>\n</tr>\n<tr>\n<td>var=${str:=expr}</td>\n<td>var=expr</td>\n<td>var=expr</td>\n<td>var=$str</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h2><h3 id=\"计算字符串长度\"><a href=\"#计算字符串长度\" class=\"headerlink\" title=\"计算字符串长度\"></a>计算字符串长度</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>语法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>方法一</td>\n<td><code>$&#123;#string&#125;</code></td>\n<td>无</td>\n</tr>\n<tr>\n<td>方法二</td>\n<td><code>expr length &quot;$string&quot;</code></td>\n<td>string 中有空格就必须要加双引号</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[ryan@ryan-tencentcloud-1 ~]$ var0&#x3D;&quot;I love you, do you love me&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var0\nI love you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;#var0&#125;    # $&#123;#string&#125; 方法计算字符串长度\n26\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr length &quot;$var0&quot;&#96;    # expr length &quot;$string&quot; 方法计算字符串长度\n26</code></pre>\n\n<h3 id=\"获取子串字符在字符串中的索引位置\"><a href=\"#获取子串字符在字符串中的索引位置\" class=\"headerlink\" title=\"获取子串字符在字符串中的索引位置\"></a>获取子串字符在字符串中的索引位置</h3><p>语法：<code>expr index $string $substring</code> ，获取子串字符在字符串中的索引位置。子串是字符串，就会将子串切分成单个字符，查找字符在字符串中第一次出现的位置。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[ryan@ryan-tencentcloud-1 ~]$ var0&#x3D;&quot;I love you, do you love me&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var0\nI love you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr index &quot;$var0&quot; love&#96;    # 获取字符在字符串中的索引位置，返回字符 l 在字符串中的索引位置\n3\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr index &quot;$var0&quot; me&#96;    # 返回字符 e 在子串中的位置\n6\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr index &quot;$var0&quot; hate&#96;    # 返回字符 e 在子串中的位置\n6</code></pre>\n\n<h3 id=\"获取子串长度\"><a href=\"#获取子串长度\" class=\"headerlink\" title=\"获取子串长度\"></a>获取子串长度</h3><p>语法：<code>expr match $string substr</code>，从头开始匹配，返回子串长度，支持正则表达式。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[ryan@ryan-tencentcloud-1 ~]$ clear\n[ryan@ryan-tencentcloud-1 ~]$ var0&#x3D;&quot;I love you, do you love me&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var0\nI love you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr match &quot;$var0&quot; .*me&#96;\n26\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr match &quot;$var0&quot; .*you&#96;\n18\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr match &quot;$var0&quot; &quot;I love you&quot;&#96;\n10</code></pre>\n\n<h3 id=\"抽取字符串中的子串\"><a href=\"#抽取字符串中的子串\" class=\"headerlink\" title=\"抽取字符串中的子串\"></a>抽取字符串中的子串</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>语法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>方法一</td>\n<td><code>$&#123;string:position&#125;</code></td>\n<td>从 string 中的 position 位置开始</td>\n</tr>\n<tr>\n<td>方法二</td>\n<td><code>$&#123;string:position:length&#125;</code></td>\n<td>从 string 中的 position 位置开始，匹配长度为 length</td>\n</tr>\n<tr>\n<td>方法三</td>\n<td><code>$&#123;string: -position&#125;</code></td>\n<td>从 string 的右边开始匹配</td>\n</tr>\n<tr>\n<td>方法四</td>\n<td><code>$&#123;string: (position)&#125;</code></td>\n<td>从 string 的左边开始匹配</td>\n</tr>\n<tr>\n<td>方法五</td>\n<td><code>expr substr $string $position $length</code></td>\n<td>从 string 中的 position 位置开始，匹配长度为 length</td>\n</tr>\n</tbody></table>\n<p>课程中讲的是：使用 <code>$&#123;string:position&#125;</code> 索引计数从 0 开始，使用 <code>expr substr</code> 索引从 1 开始。但是我实验确实：<code>$&#123;string:position:length&#125;</code> 匹配长度为 length，使用 <code>expr substr $string $position $length</code> 匹配长度为 <code>length-1</code>（换了 2 台电脑都是同样结果）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[ryan@ryan-tencentcloud-1 ~]$ clear\n[ryan@ryan-tencentcloud-1 ~]$ var0&#x3D;&quot;Hello World, Hello Ryan&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var0\nHello World, Hello Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0:13&#125;&quot;\nHello Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0:6:5&#125;&quot;\nWorld\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0: (-5)&#125;&quot;\n Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0: (5)&#125;&quot;\n World, Hello Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0: (6)&#125;&quot;\nWorld, Hello Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0: (-10)&#125;&quot;\nHello Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr substr &quot;$var0&quot; 6 5&#96;\nWorl\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr substr &quot;$var0&quot; 6 6&#96;\nWorld</code></pre>\n\n<h3 id=\"字符串处理练习\"><a href=\"#字符串处理练习\" class=\"headerlink\" title=\"字符串处理练习\"></a>字符串处理练习</h3><h4 id=\"需求描述\"><a href=\"#需求描述\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>变量 string=”Bigdata process framework is Hadoop, Hadoop is an open source project.”。执行脚本后打印输出 string 字符串变量，并给出用户以下选项：</p>\n<ol>\n<li>打印 string 长度</li>\n<li>删除字符串中所有的 Hadoop</li>\n<li>替换第一个 Hadoop 为 Mapreduce</li>\n<li>替换全部 Hadoop 为 Mapreduce</li>\n</ol>\n<p>用户输入数字 1|2|3|4 ，可以执行对应项功能；输入 q|Q 能退出交互模式。</p>\n<h4 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li><p>将不同的功能模块划分，编写实现功能函数。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">function print_tips    # 打印提示信息\nfunction len_of_string    # 打印 string 长度\nfunction del_hadoop    # 删除字符串中所有的 Hadoop\nfunction rep_hadoop_mapreduce_first    #替换第一个 Hadoop 为 Mapreduce\nfunction rep_hadoop_mapreduce_all    #替换全部 Hadoop 为 Mapreduce</code></pre></li>\n<li><p>程序主流程设计。</p>\n</li>\n</ol>\n<h4 id=\"脚本编写\"><a href=\"#脚本编写\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# function print_tips    # 打印提示信息\n# function len_of_string    # 打印 string 长度\n# function del_hadoop    # 删除字符串中所有的 Hadoop\n# function rep_hadoop_mapreduce_first    #替换第一个 Hadoop 为 Mapreduce\n# function rep_hadoop_mapreduce_all    #替换全部 Hadoop 为 Mapreduce\n#\n\nstring&#x3D;&quot;Bigdata process framework is Hadoop, Hadoop is an open source project.&quot;\n\nfunction print_tips() &#123;\n    echo &amp;&amp; echo -e &quot;\n    *******************************************************************\n    # 字符串处理练习\n\n    变量 string 为 &#39;Bigdata process framework is Hadoop, Hadoop is an\n    open source project.&#39;\n\n            0. 打印 string.\n            1. 打印 string 长度.\n            2. 删除字符串中所有的 Hadoop.\n            3. 替换第一个 Hadoop 为 Mapreduce.\n            4. 替换全部 Hadoop 为 Mapreduce.\n\n    *******************************************************************\n    &quot; &amp;&amp; echo\n&#125;\n\nfunction len_of_string() &#123;\n    if [ -n &quot;$&#123;string&#125;&quot; ]; then\n        echo -e &quot;长度为：$&#123;#string&#125;&quot;\n    else\n        echo -e &quot;字符串为空！&quot;\n    fi\n&#125;\n\nfunction del_hadoop() &#123;\n    if [ -n &quot;$&#123;string&#125;&quot; ]; then\n        echo -e &quot;删除字符串中所有的 Hadoop 后：$&#123;string&#x2F;&#x2F;Hadoop&#x2F;&#125;&quot;\n    else\n        echo -e &quot;字符串为空！&quot;\n    fi\n&#125;\n\nfunction rep_hadoop_mapreduce_first() &#123;\n    if [ -n &quot;$&#123;string&#125;&quot; ]; then\n        echo -e &quot;替换第一个 Hadoop 为 Mapreduce：$&#123;string&#x2F;Hadoop&#x2F;Mapredue&#125;&quot;\n    else\n        echo -e &quot;字符串为空！&quot;\n    fi\n&#125;\n\nfunction rep_hadoop_mapreduce_all() &#123;\n    if [ -n &quot;$&#123;string&#125;&quot; ]; then\n        echo -e &quot;替换全部 Hadoop 为 Mapreduce：$&#123;string&#x2F;&#x2F;Hadoop&#x2F;Mapredue&#125;&quot;\n    else\n        echo -e &quot;字符串为空！&quot;\n    fi\n&#125;\n\n# print_tips\n# len_of_string\n# del_hadoop\n# rep_hadoop_mapreduce_first\n# rep_hadoop_mapreduce_all\n\nwhile true; do\n    # echo -e&quot;[ string&#x3D;$string ]&quot;\n    print_tips\n    read -e -p &quot;Pls input your choice (0|1|2|3|4|q|Q)&quot; choice\n    case &quot;$choice&quot; in\n    0)\n        echo &quot;$string&quot;\n        ;;\n    1)\n        len_of_string\n        ;;\n    2)\n        del_hadoop\n        ;;\n    3)\n        rep_hadoop_mapreduce_first\n        ;;\n    4)\n        rep_hadoop_mapreduce_all\n        ;;\n    q | Q)\n        exit\n        ;;\n    *)\n        echo -e &quot;!!! Error, Pls input your choice (0|1|2|3|4|q|Q)&quot;\n        ;;\n    esac\ndone</code></pre>\n\n<h2 id=\"命令替换\"><a href=\"#命令替换\" class=\"headerlink\" title=\"命令替换\"></a>命令替换</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>语法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>方法一</td>\n<td>`command`</td>\n</tr>\n<tr>\n<td>方法二</td>\n<td>$(command)</td>\n</tr>\n</tbody></table>\n<h3 id=\"练习一\"><a href=\"#练习一\" class=\"headerlink\" title=\"练习一\"></a>练习一</h3><h4 id=\"需求描述-1\"><a href=\"#需求描述-1\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>获取系统所有用户并输出。</p>\n<h4 id=\"思路分析-1\"><a href=\"#思路分析-1\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li>系统所有用户在 <code>/etc/passwd</code> 文件中。</li>\n<li>使用 <code>cut -d &quot;:&quot; -f 1</code> 命令截取输出结果中的第一列。<code>cut</code> 命令默认属于使用 <code>TAB</code> 作为分隔符，使用 <code>-d &quot;:&quot;</code> 命令指定 <code>:</code> 为分隔符。使用 <code>-f 1</code> 参数指定获取第一列。</li>\n<li>使用 <code>(())</code>两个小括号表示算术运算。</li>\n</ol>\n<h4 id=\"脚本编写-1\"><a href=\"#脚本编写-1\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nindex&#x3D;0\nfor user in $(cat &#x2F;etc&#x2F;passwd | cut -d &quot;:&quot; -f 1); do\n    # echo -e &quot;This is $index user: $user.&quot;\n    printf &quot;This is %2d user: $user.\\n&quot; $index\n    index&#x3D;$(($index + 1))\ndone</code></pre>\n\n<h3 id=\"练习二\"><a href=\"#练习二\" class=\"headerlink\" title=\"练习二\"></a>练习二</h3><h4 id=\"需求描述-2\"><a href=\"#需求描述-2\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>当前日期时间格式化并根据当前时间计算今年和明年年份。</p>\n<h4 id=\"思路分析-2\"><a href=\"#思路分析-2\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li>使用 <code>TZ=&#39;America/Los_Angeles&#39; </code> 命令显示东八区北京时间。</li>\n<li>使用 <code>date</code> 获取当前日期时间。</li>\n<li>使用 <code>%Y-%m-%d %H:%M:%S</code> 或者 <code>%F %T</code> 格式化输出日期时间。</li>\n<li>计算今年和明年年份，使用 <code>(())</code>两个小括号表示算术运算。</li>\n</ol>\n<h4 id=\"脚本编写-2\"><a href=\"#脚本编写-2\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\necho &amp;&amp; echo -e &quot;Current time: $(TZ&#x3D;&#39;America&#x2F;Los_Angeles&#39; date &quot;+%Y-%m-%d %H:%M:%S&quot;).\nCurrent time: $(TZ&#x3D;&#39;America&#x2F;Los_Angeles&#39; date &quot;+%F %T&quot;).\nThis is $(date +%Y) year, next year is $(($(date +%Y) + 1)).\n&quot; &amp;&amp; echo</code></pre>\n\n<h3 id=\"练习三\"><a href=\"#练习三\" class=\"headerlink\" title=\"练习三\"></a>练习三</h3><h4 id=\"需求描述-3\"><a href=\"#需求描述-3\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>根据系统时间获取今年还剩下多少天/星期，已经过了多少天/星期。</p>\n<h4 id=\"思路分析-3\"><a href=\"#思路分析-3\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li>使用 <code>date</code> 获取当前日期时间。</li>\n<li>使用 <code>%j</code> 获取今年已经过了多少天，使用 <code>%U</code> (以周日为每星期第一天)、 <code>%V</code> 或者 <code>%W</code>(以周一为每星期第一天)获取今年已经过了多少星期。</li>\n<li>判断当前年份是否为闰年，然后用 365/366 减去已经过的天数就是剩下的天数，再除以 7 就是剩下的星期数。</li>\n</ol>\n<h4 id=\"脚本编写-3\"><a href=\"#脚本编写-3\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nif [ $(($(date +%Y) % 4)) -eq 0 -a $(($(date +%Y) % 100)) -ne 0 ]; then\n    days&#x3D;366\nelif [ $(($(date +%Y) % 400)) -eq 0 ]; then\n    days&#x3D;366\nelse\n    days&#x3D;365\nfi\n\necho &amp;&amp; echo -e &quot;$(date +%Y) year have $days days.\n$(date +%Y) year have passed $(date +%j) days.\n$(date +%Y) year have passed $(($(date +%U) - 1)) weeks, with Sunday as first day of week.\n$(date +%Y) year have passed $(($(date +%V) - 1)) weeks, with Monday as first day of week.\n$(date +%Y) year have passed $(($(date +%W) - 1)) weeks, with Monday as first day of week.\nThere is $(($days - $(date +%j))) days before $(($(date +%Y) + 1)) year.\nThere is $((($days - $(date +%j)) &#x2F; 7)) weeks before $(($(date +%Y) + 1)) year.&quot; &amp;&amp; echo</code></pre>\n\n<h3 id=\"练习四\"><a href=\"#练习四\" class=\"headerlink\" title=\"练习四\"></a>练习四</h3><h4 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h4><p>判断 nginx 进程是否存在，若不存在则自动拉起该进程。</p>\n<h4 id=\"思路分析-4\"><a href=\"#思路分析-4\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li>使用 <code>ps -ef | grep nginx | grep -v grep | wc -l</code> 查看 nginx 进程个数，<code>grep -v grep</code> 命令排除 grep 进程， <code>wc -l</code> 命令统计个数。</li>\n<li>当进程个数大于 0 时 nginx 进程存在。否则，nginx 进程不存在，重启 nginx 服务。</li>\n</ol>\n<h4 id=\"脚本编写-4\"><a href=\"#脚本编写-4\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nnginx_process_num&#x3D;$(ps -ef | grep nginx | grep -v grep | wc -l)\nif [ $nginx_process_num -ne 0 ]; then\n    echo -e &quot;nginx 进程存在！&quot;\nelse\n    echo -e &quot;nginx 进程不存在！&quot; &amp;&amp; sudo systemctl start nginx\nfi</code></pre>\n\n<h2 id=\"有类型变量\"><a href=\"#有类型变量\" class=\"headerlink\" title=\"有类型变量\"></a>有类型变量</h2><ul>\n<li><code>declare</code> 命令和 <code>typeset</code> 命令两者等价；</li>\n<li><code>declare</code> 命令、 <code>typeset</code> 命令都是用来定义变量类型的；</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-r</code></td>\n<td>将变量定义为<strong>只读</strong></td>\n</tr>\n<tr>\n<td><code>-i</code></td>\n<td>将变量定义为<strong>整数</strong></td>\n</tr>\n<tr>\n<td><code>-a</code></td>\n<td>将变量定义为<strong>数组</strong></td>\n</tr>\n<tr>\n<td><code>-f</code></td>\n<td>显示系统定义过的<strong>所有函数名及函数体</strong></td>\n</tr>\n<tr>\n<td><code>-F</code></td>\n<td>显示系统定义过的<strong>函数名</strong></td>\n</tr>\n<tr>\n<td><code>-x</code></td>\n<td>将变量声明定义为<strong>环境变量</strong>，可供 shell 以外的程序来使用。</td>\n</tr>\n</tbody></table>\n<p>取消声明的变量：</p>\n<ul>\n<li><code>declare +r</code></li>\n<li><code>declare +i</code></li>\n<li><code>declare +a</code></li>\n<li><code>declare +x</code></li>\n</ul>\n<h3 id=\"声明变量为只读类型\"><a href=\"#声明变量为只读类型\" class=\"headerlink\" title=\"声明变量为只读类型\"></a>声明变量为只读类型</h3><ul>\n<li><code>declare -r</code> 声明变量为只读类型：声明之后不可修改。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[ryan@ryan-tencentcloud-1 ~]$ var1&#x3D;&quot;hello world&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var1\nhello world\n[ryan@ryan-tencentcloud-1 ~]$ var1&#x3D;&quot;hello ryan&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var1\nhello ryan\n[ryan@ryan-tencentcloud-1 ~]$ declare -r var1&#x3D;&quot;hello world&quot;\n[ryan@ryan-tencentcloud-1 ~]$ var1&#x3D;&quot;hello ryan&quot;\nzsh: read-only variable: var1</code></pre>\n\n<h3 id=\"声明变量为整数类型\"><a href=\"#声明变量为整数类型\" class=\"headerlink\" title=\"声明变量为整数类型\"></a>声明变量为整数类型</h3><ul>\n<li><code>declare -i</code> 声明变量为整数类型，可以算术运算。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[ryan@ryan-tencentcloud-1 ~]$ num1&#x3D;10\n[ryan@ryan-tencentcloud-1 ~]$ num2&#x3D;$num1+10\n[ryan@ryan-tencentcloud-1 ~]$ echo $num2\n10+10\n[ryan@ryan-tencentcloud-1 ~]$ echo $(($num1 + 10)) #作为整数类型进行算术运算\n20\n[ryan@ryan-tencentcloud-1 ~]$ expr $num1 + 10\n20\n[ryan@ryan-tencentcloud-1 ~]$ declare -i num3&#x3D;$num1+10\n[ryan@ryan-tencentcloud-1 ~]$ echo $num3\n20</code></pre>\n\n<h3 id=\"显示系统定义过的函数名及函数体\"><a href=\"#显示系统定义过的函数名及函数体\" class=\"headerlink\" title=\"显示系统定义过的函数名及函数体\"></a>显示系统定义过的函数名及函数体</h3><ul>\n<li><code>declare -f</code> 显示系统定义过的所有函数名及函数体。</li>\n<li><code>declare -F</code> 显示系统定义过的函数名。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">## declare -f 显示系统定义过的所有函数名及函数体\n[ryan@ryan-tencentcloud-1 ~]$ declare -f\n\n## declare -F 显示系统定义过的函数名\n[ryan@ryan-tencentcloud-1 ~]$ declare -F</code></pre>\n\n<h3 id=\"声明变量类型为数组\"><a href=\"#声明变量类型为数组\" class=\"headerlink\" title=\"声明变量类型为数组\"></a>声明变量类型为数组</h3><ul>\n<li><code>declare -a</code> 声明变量类型为数组，数组下标索引从 1 开始。</li>\n</ul>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\ndeclare -a array\narray&#x3D;(&quot;letme&quot; &quot;zztai1&quot; &quot;mlxg&quot; &quot;karsa&quot; &quot;xiaohu&quot; &quot;xiye&quot; &quot;uzi&quot; &quot;meiko&quot; &quot;ming&quot;)\n\nfunction printf_array() &#123;\n    index&#x3D;1\n    for user in $&#123;array[@]&#125;; do\n        # echo -e &quot;    - This is $index user: $user.&quot;\n        printf &quot;    - This is %2d user: $user.\\n&quot; $index\n        index&#x3D;$((($index + 1)))\n    done\n&#125;\n\necho -e &quot;打印数组的所有元素: $&#123;array[@]&#125;&quot;\necho -e &quot;数组下标索引为 1 的元素: $&#123;array[1]&#125;&quot;\necho -e &quot;数组下标索引为 2 的元素: $&#123;array[2]&#125;&quot;\necho -e &quot;数组下标索引为 6 的元素: $&#123;array[6]&#125;&quot;\necho -e &quot;数组下标索引为 8 的元素: $&#123;array[8]&#125;&quot;\necho -e &quot;数组长度: $&#123;#array[@]&#125;&quot;\necho -e &quot;数组第 6 个元素 $&#123;array[6]&#125; 长度: $&#123;#array[6]&#125;&quot;\necho -e &quot;数组第 8 个元素 $&#123;array[8]&#125; 长度: $&#123;#array[8]&#125;&quot;\necho -e &quot;循环遍历数组打印元素: &quot; &amp;&amp; printf_array\necho -e &quot;---------------------&quot;\necho -e &quot;给数组下标索引为 10 的元素赋值 Firefox: &quot; &amp;&amp; array[10]&#x3D;&quot;FireFox&quot;\necho -e &quot;数组下标索引为 10 的元素: $&#123;array[10]&#125;&quot;\necho -e &quot;给数组下标索引为 11 的元素赋值 Heart: &quot; &amp;&amp; array[11]&#x3D;&quot;Heart&quot;\necho -e &quot;数组下标索引为 11 的元素: $&#123;array[11]&#125;&quot;\necho -e &quot;给数组下标索引为 13 的元素赋值 Dog8: &quot; &amp;&amp; array[13]&#x3D;&quot;Dog8&quot;\necho -e &quot;数组下标索引为 13 的元素: $&#123;array[13]&#125;&quot;\necho -e &quot;新数组长度: $&#123;#array[@]&#125;&quot;\necho -e &quot;循环遍历新数组打印元素: &quot; &amp;&amp; printf_array\necho -e &quot;---------------------&quot;\necho -e &quot;打印数组中第 1 - 9 的元素: $&#123;array[@]:0:8&#125;&quot;\necho -e &quot;删除数组中第 12 个元素:&quot; &amp;&amp; unset array[12]\necho -e &quot;数组下标索引为 12 的元素: $&#123;array[12]&#125;&quot;\necho -e &quot;新数组长度: $&#123;#array[@]&#125;&quot;\necho -e &quot;循环遍历新数组打印元素: &quot; &amp;&amp; printf_array\necho -e &quot;---------------------&quot;\necho -e &quot;将数组中元素值包含 FireFox 的替换为 阿布: $&#123;array[@]&#x2F;FireFox&#x2F;阿布&#125;&quot;\necho -e &quot;数组下标索引为 10 的元素: $&#123;array[10]&#125;&quot;\necho -e &quot;新数组长度: $&#123;#array[@]&#125;&quot;\necho -e &quot;循环遍历新数组打印元素: &quot; &amp;&amp; printf_array\necho -e &quot;---------------------&quot;\necho -e &quot;清空数组: &quot; &amp;&amp; unset array\necho -e &quot;新数组长度: $&#123;#array[@]&#125;&quot;\necho -e &quot;循环遍历新数组打印元素: &quot; &amp;&amp; printf_array\necho -e &quot;---------------------&quot;\n\n# Output\n#\n# 打印数组的所有元素: letme zztai1 mlxg karsa xiaohu xiye uzi meiko ming\n# 数组下标索引为 1 的元素: zztai1\n# 数组下标索引为 2 的元素: mlxg\n# 数组下标索引为 6 的元素: uzi\n# 数组下标索引为 8 的元素: ming\n# 数组长度: 9\n# 数组第 6 个元素 uzi 长度: 3\n# 数组第 8 个元素 ming 长度: 4\n# 循环遍历数组打印元素:\n#     - This is  1 user: letme.\n#     - This is  2 user: zztai1.\n#     - This is  3 user: mlxg.\n#     - This is  4 user: karsa.\n#     - This is  5 user: xiaohu.\n#     - This is  6 user: xiye.\n#     - This is  7 user: uzi.\n#     - This is  8 user: meiko.\n#     - This is  9 user: ming.\n# ---------------------\n# 给数组下标索引为 10 的元素赋值 Firefox:\n# 数组下标索引为 10 的元素: FireFox\n# 给数组下标索引为 11 的元素赋值 Heart:\n# 数组下标索引为 11 的元素: Heart\n# 给数组下标索引为 13 的元素赋值 Dog8:\n# 数组下标索引为 13 的元素: Dog8\n# 新数组长度: 12\n# 循环遍历新数组打印元素:\n#     - This is  1 user: letme.\n#     - This is  2 user: zztai1.\n#     - This is  3 user: mlxg.\n#     - This is  4 user: karsa.\n#     - This is  5 user: xiaohu.\n#     - This is  6 user: xiye.\n#     - This is  7 user: uzi.\n#     - This is  8 user: meiko.\n#     - This is  9 user: ming.\n#     - This is 10 user: FireFox.\n#     - This is 11 user: Heart.\n#     - This is 12 user: Dog8.\n# ---------------------\n# 打印数组中第 1 - 9 的元素: letme zztai1 mlxg karsa xiaohu xiye uzi meiko\n# 删除数组中第 12 个元素:\n# 数组下标索引为 12 的元素:\n# 新数组长度: 12\n# 循环遍历新数组打印元素:\n#     - This is  1 user: letme.\n#     - This is  2 user: zztai1.\n#     - This is  3 user: mlxg.\n#     - This is  4 user: karsa.\n#     - This is  5 user: xiaohu.\n#     - This is  6 user: xiye.\n#     - This is  7 user: uzi.\n#     - This is  8 user: meiko.\n#     - This is  9 user: ming.\n#     - This is 10 user: FireFox.\n#     - This is 11 user: Heart.\n#     - This is 12 user: Dog8.\n# ---------------------\n# 将数组中元素值包含 FireFox 的替换为 阿布: letme zztai1 mlxg karsa xiaohu xiye uzi meiko ming 阿布 Heart Dog8\n# 数组下标索引为 10 的元素: FireFox\n# 新数组长度: 12\n# 循环遍历新数组打印元素:\n#     - This is  1 user: letme.\n#     - This is  2 user: zztai1.\n#     - This is  3 user: mlxg.\n#     - This is  4 user: karsa.\n#     - This is  5 user: xiaohu.\n#     - This is  6 user: xiye.\n#     - This is  7 user: uzi.\n#     - This is  8 user: meiko.\n#     - This is  9 user: ming.\n#     - This is 10 user: FireFox.\n#     - This is 11 user: Heart.\n#     - This is 12 user: Dog8.\n# ---------------------\n# 清空数组:\n# 新数组长度: 0\n# 循环遍历新数组打印元素:\n# ---------------------</code></pre>\n\n<h3 id=\"声明变量为环境变量\"><a href=\"#声明变量为环境变量\" class=\"headerlink\" title=\"声明变量为环境变量\"></a>声明变量为环境变量</h3><ul>\n<li><code>declear -x</code> 声明变量为环境变量，可供 shell 以外的程序来使用。</li>\n</ul>\n<h2 id=\"数学运算-expr\"><a href=\"#数学运算-expr\" class=\"headerlink\" title=\"数学运算 expr\"></a>数学运算 expr</h2><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>语法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>方法一</td>\n<td><code>expr $num1 operator $num2</code></td>\n</tr>\n<tr>\n<td>方法二</td>\n<td><code>$(($num1 operator $num2))</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"操作符对照表\"><a href=\"#操作符对照表\" class=\"headerlink\" title=\"操作符对照表\"></a>操作符对照表</h3><p>| 操作符         | 含义                                        |<br>| ————– | ——————————————- | ——————————————- |<br>| <code>num1          | num2</code>                                       | num1 不为空且非 0，返回 num1；否则返回 num2 |<br>| <code>num1 &amp; num2</code>  | num1 不为 i 空且非 0，返回 num1；否则返回 0 |<br>| <code>num1 &lt; num2</code>  | num1 小于 num2，返回 1；否则返回 0          |<br>| <code>num1 &lt;= num2</code> | num1 小于等于 num2，返回 1；否则返回 0      |<br>| <code>num1 = num2</code>  | num1 等于 num2，返回 1；否则返回 0          |<br>| <code>num1 != num2</code> | num1 不等于 num2，返回 1；否则返回 0        |<br>| <code>num1 &gt; num2</code>  | num1 大于 num2，返回 1；否则返回 0          |<br>| <code>num1 &gt;= num2</code> | num1 大于等于 num2，返回 1；否则返回 0      |<br>| <code>num1 + num2</code>  | num1 num2 求和                              |<br>| <code>num1 - num2</code>  | num1 num2 求差                              |<br>| <code>num1 * num2</code>  | num1 num2 求积                              |<br>| <code>num1 / num2</code>  | num1 num2 求商                              |<br>| <code>num1 % num2</code>  | num1 num2 求余                              |</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\nset -x\n\ndeclare +i num0 num1 num2 num3 num4\ndeclare -i num0&#x3D;56 num1&#x3D;78 num2&#x3D;34 num3&#x3D;90 num4&#x3D;12\n\nexpr $num0 \\| $num3\nexpr $num1 \\&amp; $num2\nexpr $num0 \\&lt; $num2\nexpr $num0 \\&lt;&#x3D; $num3\nexpr $num0 \\&gt; $num1\nexpr $num1 \\&gt;&#x3D; $num2\nexpr $num2 &#x3D; $num3\nexpr $num4 !&#x3D; $num3\nexpr $num1 + $num1\nexpr $num1 - $num2\nexpr $num1 \\* $num3\nexpr $num1 &#x2F; $num4\nexpr $num2 % $num4\n\ndeclare +i num0 num1 num2 num3 num4\n\n# Output\n#\n# + declare +i num0 num1 num2 num3 num4\n# + declare -i num0&#x3D;56 num1&#x3D;78 num2&#x3D;34 num3&#x3D;90 num4&#x3D;12\n# + expr 56 &#39;|&#39; 90\n# 56\n# + expr 78 &#39;&amp;&#39; 34\n# 78\n# + expr 56 &#39;&lt;&#39; 34\n# 0\n# + expr 56 &#39;&lt;&#x3D;&#39; 90\n# 1\n# + expr 56 &#39;&gt;&#39; 78\n# 0\n# + expr 78 &#39;&gt;&#x3D;&#39; 34\n# 1\n# + expr 34 &#x3D; 90\n# 0\n# + expr 12 &#39;!&#x3D;&#39; 90\n# 1\n# + expr 78 + 78\n# 156\n# + expr 78 - 34\n# 44\n# + expr 78 &#39;*&#39; 90\n# 7020\n# + expr 78 &#x2F; 12\n# 6\n# + expr 34 % 12\n# 10\n# + declare +i num0 num1 num2 num3 num4</code></pre>\n\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"需求描述-4\"><a href=\"#需求描述-4\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>提示用户输入一个正整数 num，然后计算 1+2+3+…+num 的值。要求必须对 num 是否为正整数做判断，不符合应当允许再次输入。</p>\n<h4 id=\"思路分析-5\"><a href=\"#思路分析-5\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li>求和<ul>\n<li>使用公式 n(a<sub>1</sub>+a<sub>n</sub>)/2 求和；</li>\n<li>使用 <code>seq -s+</code> 求和；</li>\n<li>使用循环求和；</li>\n</ul>\n</li>\n<li>对 num 是否为整数进行判断：使用命令 <code>expr $num + 0</code>进行求和运算，对命令结果进行判断 <code>&quot;$?&quot; -eq 0</code> 。求和运算要求 num 为整数。如果是浮点数会报错 <code>expr: non-integer argument</code>。 命令执行不成功会返回一个非 0 的整数。</li>\n<li>对 num 是否为正数进行判断：<code>num &gt; 0</code>。</li>\n</ol>\n<h4 id=\"脚本编写-5\"><a href=\"#脚本编写-5\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nwhile true; do\n    read -p &quot;Pls input a positive number: &quot; num\n    expr $&#123;num&#125; + 1 &amp;&gt;&#x2F;dev&#x2F;null # 屏蔽运算结果\n    # if [ $? -eq 0 -a &#96;expr $&#123;num&#125; \\&gt; 0&#96; -eq 1 ]; then\n    if [ $? -eq 0 -a $&#123;num&#125; -gt 0 ] &amp;&gt;&#x2F;dev&#x2F;null; then\n        # 使用求和公式计算\n        a1&#x3D;1 &amp;&amp; an&#x3D;$&#123;num&#125; &amp;&amp; n&#x3D;$&#123;num&#125;\n        echo -e &quot;\\n - 使用求和公式计算:  1+2+3+...+$&#123;num&#125; &#x3D; $((($&#123;a1&#125; + $&#123;an&#125;) * $&#123;n&#125; &#x2F; 2)).&quot;\n\n        # 使用 seq -s+ 计算\n        echo -e &quot; - 使用 seq -s+ 计算: 1+2+3+...+$&#123;num&#125; &#x3D; $(($(seq -s+ 1 $&#123;num&#125;))).&quot;\n\n        # 使用循环计算\n        sum&#x3D;0\n        for ((i &#x3D; 1; i &lt;&#x3D; $&#123;num&#125;; i++)); do\n            sum&#x3D;$(($sum + $i))\n        done\n        echo -e &quot; - 使用循环计算:      1+2+3+...+$&#123;num&#125; &#x3D; $&#123;sum&#125;.\\n&quot;\n    else\n        echo -e &quot;\\n$&#123;Red_font_prefix&#125;ERROR!!!$&#123;Font_color_suffix&#125; Pls input a positive number! \\n&quot;\n        continue\n    fi\ndone\n\n# Output\n#\n# Pls input a positive number: 0\n#\n# ERROR!!! Pls input a positive number!\n#\n# Pls input a positive number: 20\n#\n#  - 使用求和公式计算:  1+2+3+...+20 &#x3D; 210.\n#  - 使用 seq -s+ 计算: 1+2+3+...+20 &#x3D; 210.\n#  - 使用循环计算:      1+2+3+...+20 &#x3D; 210.\n#\n# Pls input a positive number: 2a25\n#\n# ERROR!!! Pls input a positive number!\n#\n# Pls input a positive number: 100\n#\n#  - 使用求和公式计算:  1+2+3+...+100 &#x3D; 5050.\n#  - 使用 seq -s+ 计算: 1+2+3+...+100 &#x3D; 5050.\n#  - 使用循环计算:      1+2+3+...+100 &#x3D; 5050.</code></pre>\n\n<h2 id=\"数学运算-bc\"><a href=\"#数学运算-bc\" class=\"headerlink\" title=\"数学运算 bc\"></a>数学运算 bc</h2><ul>\n<li>bc 是 bash 内建的运算器，支持浮点数运算；</li>\n<li>内建变量 scale 可以设置计算结果精度，默认为 0。</li>\n</ul>\n<h3 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h3><table>\n<thead>\n<tr>\n<th>语法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>echo &quot;$num1 operator $num2&quot; | bc</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"操作符对照表-1\"><a href=\"#操作符对照表-1\" class=\"headerlink\" title=\"操作符对照表\"></a>操作符对照表</h3><table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>num1 + num2</code></td>\n<td>求和运算</td>\n</tr>\n<tr>\n<td><code>num1 - num2</code></td>\n<td>求差运算</td>\n</tr>\n<tr>\n<td><code>num1 * num2</code></td>\n<td>求积运算</td>\n</tr>\n<tr>\n<td><code>num1 / num2</code></td>\n<td>求商运算</td>\n</tr>\n<tr>\n<td><code>num1 % num2</code></td>\n<td>求余运算</td>\n</tr>\n<tr>\n<td><code>num1 ^ num2</code></td>\n<td>指数运算</td>\n</tr>\n</tbody></table>\n<h3 id=\"练习-1\"><a href=\"#练习-1\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"需求描述-5\"><a href=\"#需求描述-5\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>提示用户输入数和一个操作符，然后对其进行数学运算。要求：除法运算时计算结果需要精确到 6 位。</p>\n<h4 id=\"思路分析-6\"><a href=\"#思路分析-6\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li>数学运算使用 bc 处理；</li>\n<li>除法运算精确度使用 scale 控制。</li>\n</ol>\n<h4 id=\"脚本编写-6\"><a href=\"#脚本编写-6\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nwhile true; do\n    read -e -p &quot;Pls input two positive number and a operator (+|-|*|&#x2F;|%) : &quot; num1 num2 ope\n    case &quot;$&#123;ope&#125;&quot; in\n    +)\n        echo -e &quot;$&#123;num1&#125; + $&#123;num2&#125;&quot; | bc\n        ;;\n    -)\n        echo -e &quot;$&#123;num1&#125; - $&#123;num2&#125;&quot; | bc\n        ;;\n    \\*)\n        echo -e &quot;$&#123;num1&#125; * $&#123;num2&#125;&quot; | bc\n        ;;\n    &#x2F;)\n        echo -e &quot;scale&#x3D;6;$&#123;num1&#125; &#x2F; $&#123;num2&#125;&quot; | bc\n        ;;\n    %)\n        echo -e &quot;$&#123;num1&#125; % $&#123;num2&#125;&quot; | bc\n        ;;\n    *)\n        echo -e &quot;$&#123;Red_font_prefix&#125;ERROR!!!$&#123;Font_color_suffix&#125; Pls input a operator (+|-|*|&#x2F;|%)!\\n &quot;\n        ;;\n    esac\ndone\n\n# Output\n#\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 u\n# ERROR!!! Pls input a operator (+|-|*|&#x2F;|%)!\n#\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 +\n# 23\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 -\n# 17\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 *\n# 60\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 &#x2F;\n# 6.666666\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 %\n# 2</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文代码：<a href=\"https://github.com/JaimeZeng/learning-linux/314-shell-scripting/02-shell/\">02-shell</a></p></blockquote>\n","text":"该小节介绍了变量的高级用法，如何进行变量替换、字符串处理方法、如何利用命令替换为变量赋值、有类型变量和变量引用的使用方法，并在实际环境中演示如何使用，加深大家的认识和理解；最后介绍 shell 中的数学运算方法，使用 expr 和 bc… 变量替换和测试变量替换 语法 说明 $&...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"Linux","slug":"Linux","count":7,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"},{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E6%9B%BF%E6%8D%A2%E5%92%8C%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">变量替换和测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E6%9B%BF%E6%8D%A2\"><span class=\"toc-text\">变量替换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">变量测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86\"><span class=\"toc-text\">字符串处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">计算字符串长度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%AD%90%E4%B8%B2%E5%AD%97%E7%AC%A6%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">获取子串字符在字符串中的索引位置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%AD%90%E4%B8%B2%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">获取子串长度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%AD%90%E4%B8%B2\"><span class=\"toc-text\">抽取字符串中的子串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">字符串处理练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99\"><span class=\"toc-text\">脚本编写</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E6%9B%BF%E6%8D%A2\"><span class=\"toc-text\">命令替换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0%E4%B8%80\"><span class=\"toc-text\">练习一</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-1\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-1\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-1\"><span class=\"toc-text\">脚本编写</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0%E4%BA%8C\"><span class=\"toc-text\">练习二</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-2\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-2\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-2\"><span class=\"toc-text\">脚本编写</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0%E4%B8%89\"><span class=\"toc-text\">练习三</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-3\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-3\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-3\"><span class=\"toc-text\">脚本编写</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0%E5%9B%9B\"><span class=\"toc-text\">练习四</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90\"><span class=\"toc-text\">需求分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-4\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-4\"><span class=\"toc-text\">脚本编写</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">有类型变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E4%B8%BA%E5%8F%AA%E8%AF%BB%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">声明变量为只读类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E4%B8%BA%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">声明变量为整数类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%BE%E7%A4%BA%E7%B3%BB%E7%BB%9F%E5%AE%9A%E4%B9%89%E8%BF%87%E7%9A%84%E5%87%BD%E6%95%B0%E5%90%8D%E5%8F%8A%E5%87%BD%E6%95%B0%E4%BD%93\"><span class=\"toc-text\">显示系统定义过的函数名及函数体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%E4%B8%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">声明变量类型为数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E4%B8%BA%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">声明变量为环境变量</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97-expr\"><span class=\"toc-text\">数学运算 expr</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95-1\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AF%B9%E7%85%A7%E8%A1%A8\"><span class=\"toc-text\">操作符对照表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-4\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-5\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-5\"><span class=\"toc-text\">脚本编写</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97-bc\"><span class=\"toc-text\">数学运算 bc</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95-2\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AF%B9%E7%85%A7%E8%A1%A8-1\"><span class=\"toc-text\">操作符对照表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0-1\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-5\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-6\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-6\"><span class=\"toc-text\">脚本编写</span></a></li></ol></li></ol></li></ol>","author":{"name":"JaimeZeng","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/JaimeZeng/cdn/main/blog/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":"https://github.com/JaimeZeng"}}},"mapped":true,"prev_post":{"title":"函数的高级用法","uid":"45466a0fbcef37e512cea56b5a3634ff","slug":"2020-10-03-03_函数的高级用法","date":"2020-10-03T11:21:26.000Z","updated":"2021-09-18T10:50:17.743Z","comments":true,"path":"api/articles/2020-10-03-03_函数的高级用法.json","keywords":null,"cover":null,"text":"讲解 Shell 中函数是如何定义和使用的、如何向函数传递参数、函数的返回值，并剖析和其他语言使用函数的区别；之后介绍如何调用函数、函数的作用域、如何进行递归调用以及函数库的概念，所有的讲解都会配合在真实环境演示，以帮助学员彻底理解… 函数的定义和使用函数定义 Linux She...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Linux","slug":"Linux","count":7,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"},{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"}],"author":{"name":"JaimeZeng","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/JaimeZeng/cdn/main/blog/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":"https://github.com/JaimeZeng"}}}},"next_post":{"title":"Git 工作流","uid":"4ed00788422e64ad67195cd4951f38dd","slug":"2020-09-05-Git-工作流","date":"2020-09-18T10:35:43.000Z","updated":"2021-09-18T10:50:17.743Z","comments":true,"path":"api/articles/2020-09-05-Git-工作流.json","keywords":null,"cover":[],"text":"Git 工作流提到版本控制管理系统，很多人会第一时间才能想到 SVN 和 Git。而 SVN 和 Git 除了集中式和分布式的区别外，就是分支管理。相比 SVN，Git 提供更丰富的分支特性。 Git 工作流如下图所示： 现在让我们来看一个最简单的分支管理的例子。 开发某个网站，...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"Git","slug":"Git","count":1,"path":"api/categories/Git.json"}],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}],"author":{"name":"JaimeZeng","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/JaimeZeng/cdn/main/blog/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":"https://github.com/JaimeZeng"}}}}}