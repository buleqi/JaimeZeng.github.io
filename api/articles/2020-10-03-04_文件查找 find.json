{"title":"文件查找命令 find","uid":"9351df5cbba08f50ebf152b511a1565c","slug":"2020-10-03-04_文件查找 find","date":"2020-10-03T11:22:26.000Z","updated":"2021-09-26T10:49:57.952Z","comments":true,"path":"api/articles/2020-10-03-04_文件查找 find.json","keywords":null,"cover":null,"content":"<p>该小节讲解 Shell 中常用的命令，包括文件查找 find 和 locate 的使用，尤其是 find 的各种高级用法，并结合 xargs 对大量文件进行处理；之后讲解数据备份、文件压缩、目录备份以及下载工具的使用方法；所有的用法都会在真实环境给大家做演示…</p>\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><table>\n<thead>\n<tr>\n<th>语法格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>find [路径] [选项] [操作]</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"选项参数对照表\"><a href=\"#选项参数对照表\" class=\"headerlink\" title=\"选项参数对照表\"></a>选项参数对照表</h4><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-name</code></td>\n<td>根据<strong>文件名</strong>查找</td>\n</tr>\n<tr>\n<td><code>-perm</code></td>\n<td>根据<strong>文件权限</strong>查找</td>\n</tr>\n<tr>\n<td><code>-prune</code></td>\n<td>排除某些查找目录</td>\n</tr>\n<tr>\n<td><code>-user</code></td>\n<td>根据<strong>文件属主</strong>查找</td>\n</tr>\n<tr>\n<td><code>-group</code></td>\n<td>根据<strong>文件属组</strong>查找</td>\n</tr>\n<tr>\n<td><code>-mtime -n | +n</code></td>\n<td>根据<strong>文件更改时间</strong>查找</td>\n</tr>\n<tr>\n<td><code>-nogroup</code></td>\n<td>查找无有效属组的文件</td>\n</tr>\n<tr>\n<td><code>-nouser</code></td>\n<td>查找无有效属主的文件</td>\n</tr>\n<tr>\n<td><code>-newer file1 ! file2</code></td>\n<td>查找更新时间比 file1 新但比 file2 旧的文件</td>\n</tr>\n<tr>\n<td><code>-type</code></td>\n<td>根据文件类型查找</td>\n</tr>\n<tr>\n<td><code>-size -n +n</code></td>\n<td>根据文件大小查找</td>\n</tr>\n<tr>\n<td><code>-mindepth n</code></td>\n<td>从 n 级子目录开始查找</td>\n</tr>\n<tr>\n<td><code>-maxdepth n</code></td>\n<td>最多搜索到 n 级子目录</td>\n</tr>\n</tbody></table>\n<h4 id=\"常用选项\"><a href=\"#常用选项\" class=\"headerlink\" title=\"常用选项\"></a>常用选项</h4><ul>\n<li>-name。例如查找 /etc/ 目录下以 conf 结尾的文件： <code>find /etc/ -name &#39;*conf&#39;</code>；</li>\n<li>-iname。例如查找当前目录下文件名为 aa 的文件，不区分大小写：<code>find . -iname &#39;aa&#39;</code>；</li>\n<li>-user。例如查找当前路径下文件属主为 ryan 的所有文件：<code>find . -user ryan</code>；</li>\n<li>-group。例如查找当前路径下文件属组为 yarn 的所有文件：<code>find . -group yarn</code>；</li>\n<li>-type。<ul>\n<li>f。例如查找当前目录下的文件：<code>find . -type f</code>；</li>\n<li>d。例如查找当前目录下的目录：<code>find . -type d</code>；</li>\n<li>c。例如查找当前目录下的字符设备文件：<code>find . -type c</code>；</li>\n<li>b。例如查找当前目录下的块设备文件：<code>find . -type b</code>；</li>\n<li>l。例如查找当前目录下的链接文件：<code>find . -type l</code>；</li>\n<li>p。例如查找当前目录下的管道文件：<code>find . -type p</code>。</li>\n</ul>\n</li>\n<li>-size，单位默认字节(c)。<ul>\n<li>-n。例如查找当前目录下文件大小大于 1M 的文件：<code>find . -size +1M</code>；</li>\n<li>+n。例如查找当前目录下文件大小小于 100k 的文件：<code>find . -size -100k</code>；</li>\n</ul>\n</li>\n<li>mtime。<ul>\n<li>-n。例如查找 /etc/ 目录下 5 天之内修改且以 conf 结尾的文件： <code>find /etc/ -mtime -5 -name &#39;*conf&#39;</code>；</li>\n<li>+n。例如查找 /etc/ 目录下 10 天之前修改且属主为 root 的文件： <code>find /etc/ -mtime +10 -user root</code>；</li>\n</ul>\n</li>\n<li>-mmin。<ul>\n<li>-n。例如查找 /etc/目录下 30 分钟之内修改的文件：<code>find /etc/ -mmin -30 -type f</code>；</li>\n<li>+n。例如查找 /etc/目录下 30 分钟之前修改的目录：<code>find /etc/ -mmin +30 -type d</code>；</li>\n</ul>\n</li>\n<li>-mindepth n。例如在 /etc/ 目录下的 3 级子目录开始搜索：<code>find /etc/ -mindepth 3</code>；</li>\n<li>-maxdepth n。例如查找 /etc/ 目录下以 conf 结尾且文件大小大于 10k 的文件，但最多搜索到 2 级子目录：<code>find /etc/ -maxdepth 2 -name &#39;*conf&#39;</code>；</li>\n<li>-nouser。例如查找当前目录下的没有属主的文件：<code>find . -type f -nouser</code>；</li>\n<li>-nogroup。例如查找当前目录下的没有属组的文件：<code>find . -type f -nogroup</code>；</li>\n<li>-perm。例如查找当前目录下的权限为 644 的文件：<code>find . -type f -perm 644</code>；</li>\n<li>-prune。排除目录。<ul>\n<li>例如查找当前目录下的属主为 hdfs 且文件大小大于 500 字节的文件，但排除 etc 和 opt 目录：<code>find . -path ./etc -prune -o -path ./opt -prune -o -type f -a -user hdfe -a -size +500c</code>；</li>\n<li>例如在当前目录下的 1 级子目录开始查找文件属主为 ryanjie、文件属组为 jaime、文件大小大于 10M 且文件名为 abcd 或 efgh 的文件，最多查找到 3 级子目录，但排除 ./test_1/hijk 和 ./test_1/opq 目录：<code>find . -path ./test_1/hijk -prune -o -path ./test_1/opq -prune -o -type f -mindepth 1 -maxdepth 3 -user ryanjie -group jaime -size +10M -perm 777 -a \\(-name &quot;abcd&quot; -o -name &quot;efgh&quot;\\) -exec ls -la &#123;&#125; \\;</code></li>\n</ul>\n</li>\n<li>-newer file1。例如查找 /etc/ 目录下更新时间比 aa 新但是比 ./bb 旧的文件：<code>find /etc/ -newer aa ! -newer ./bb</code></li>\n</ul>\n<h4 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h4><ul>\n<li>print。打印输出。（find 命令默认输出时就会打印，所以加与不加没区别）</li>\n<li>-exec。对搜索到的文件执行特定的操作，格式为 <code>-exec &#39;command&#39; &#123;&#125; \\;</code><ul>\n<li>例如查找当前目录下的文件（非目录）、文件名以 conf 结尾、文件大小大于 10k ，然后将其删除。<code>find . -type f -name &#39;*conf&#39; -size +10k -exec rm -f &#123;&#125; \\;</code></li>\n<li>例如查找 /var/log/ 目录下以 log 结尾且文件更新时间在 7 天之前的文件，然后将其删除。<code>find /var/log/ -name &#39;*log&#39; -mtime +7 -exec rm -f &#123;&#125; \\;</code></li>\n<li>例如查找当前目录下的文件（非目录）、文件名以 conf 结尾、文件大小大于 10k ，然后将其复制到 /root/conf/ 目录下。<code>find . -type f -name &#39;*conf&#39; -size +10k -exec cp &#123;&#125; /root/conf/ \\;</code></li>\n</ul>\n</li>\n<li>-ok。和 exec 功能一样，区别在于 ok 在每次操作时都会给用户提示。</li>\n<li>逻辑运算符。<code>-a</code> 与； <code>-o</code> 或； <code>-not</code> | <code>!</code> 非。<ul>\n<li>例如查找当前目录下文件属主为 hdfs 且文件大小大于 300 字节的文件。<code>find . -type f -a -user hdfs -a -size +300c</code></li>\n<li>例如查找当前目录下文件属主不是 hdfs 的所有文件。<code>find . -type f -not -user hdfs</code> 或者 <code>find . -type f ! -user hdfs</code></li>\n<li>例如查找当前目录下文件属主为 hdfs 或者文件以 xml 结尾的普通文件。<code>find -type f -a \\( -user hdfs -o -name &#39;*xml&#39; \\)</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"脚本编写\"><a href=\"#脚本编写\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# find 练习\n\nfilepath&#x3D;$(\n    cd $(dirname $0)\n    pwd\n)\ntestpath&#x3D;&quot;$&#123;filepath&#125;&#x2F;test_dir&quot;\n\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\ncheck_root() &#123;\n    if [ $&#123;UID&#125; -ne 0 ]; then\n        echo -e &quot;当前非 ROOT 账号(或没有 ROOT 权限)，无法继续操作，请更换 ROOT 账号或使用 su命令获取临时 ROOT 权限&quot; &amp;&amp; exit 1\n    fi\n&#125;\n\ncheck_sys() &#123;\n    IS_MACOS&#x3D;$(uname | grep &#39;Darwin&#39; | wc -l)\n    if [[ -f &#x2F;etc&#x2F;redhat-release ]]; then\n        release&#x3D;&quot;centos&quot;\n    elif [ $&#123;IS_MACOS&#125; -eq 1 ]; then\n        release&#x3D;&quot;macos&quot;\n    elif cat &#x2F;etc&#x2F;issue | grep -q -E -i &quot;debian&quot;; then\n        release&#x3D;&quot;debian&quot;\n    elif cat &#x2F;etc&#x2F;issue | grep -q -E -i &quot;ubuntu&quot;; then\n        release&#x3D;&quot;ubuntu&quot;\n    elif cat &#x2F;etc&#x2F;issue | grep -q -E -i &quot;centos|red hat|redhat&quot;; then\n        release&#x3D;&quot;centos&quot;\n    elif cat &#x2F;proc&#x2F;version | grep -q -E -i &quot;debian&quot;; then\n        release&#x3D;&quot;debian&quot;\n    elif cat &#x2F;proc&#x2F;version | grep -q -E -i &quot;ubuntu&quot;; then\n        release&#x3D;&quot;ubuntu&quot;\n    elif cat &#x2F;proc&#x2F;version | grep -q -E -i &quot;centos|red hat|redhat&quot;; then\n        release&#x3D;&quot;centos&quot;\n    fi\n&#125;\n\ncheck_tree_installed_status() &#123;\n    if [ -z $(command -v tree) ]; then\n        echo -e &quot;tree 依赖没有安装，开始安装...&quot;\n        check_sys\n        if [[ $&#123;release&#125; &#x3D;&#x3D; &quot;centos&quot; ]]; then\n            yum update &amp;&amp; yum install tree -y\n        elif [[ $&#123;release&#125; &#x3D;&#x3D; &quot;macos&quot; ]]; then\n            brew install tree\n        else\n            apt-get update &amp;&amp; apt-get install tree -y\n        fi\n        if [ -z $(command -v tree) ]; then\n            echo -e &quot;tree 安装失败，请检查！&quot; &amp;&amp; exit 1\n        else\n            echo -e &quot;tree 安装成功！&quot;\n        fi\n    fi\n&#125;\n\ntest_find() &#123;\n    # check_tree_installed_status\n    mkdir -p $&#123;testpath&#125; &amp;&amp; cd $&#123;testpath&#125;\n\n    # conf、xml、ini\n    touch grub.conf loadbalance.conf photo.xml excel.xml php.ini virtuoso.ini\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下以 conf 结尾的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -name &quot;*conf&quot; -exec ls -la &#123;&#125; \\;\n\n    # aabb 文件\n    mkdir aabb AABB\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下文件名为 aabb 的文件(不区分大小写) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -iname &#39;aabb&#39;\n\n    # jaime 属主、jaimegroup 属组文件\n    groupadd jaimegroup &amp;&amp; useradd -g jaimegroup jaime\n    chown jaime:jaimegroup grub.conf loadbalance.conf photo.xml\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前路径下文件属主为 jaime 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -user jaime -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %12s %18s\\n&quot;, &quot;User&quot;, &quot;Group&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s %12s %18s\\n&quot;, $3, $4, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前路径下文件属组为 jaimegroup 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -group jaimegroup -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %12s %18s\\n&quot;, &quot;User&quot;, &quot;Group&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s %12s %18s\\n&quot;, $3, $4, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -exec ls -la &#123;&#125; \\;\n    # echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前路径下的目录 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type d -exec ls -la &#123;&#125; \\;\n\n    # 链接文件\n    echo &quot;1122&quot; &gt;&gt;model &amp;&amp; ln -s model model-soft\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前路径下的链接文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type l -exec ls -la &#123;&#125; \\;\n\n    # 管道文件\n    mkfifo aabb.pipe AAbb.pipe\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前路径下的管道文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type p -exec ls -la &#123;&#125; \\;\n\n    # 50mb, 50kb, 25mb, 25kb, 521 大小的文件\n    head -c 50M &#x2F;dev&#x2F;zero &gt;50mb.test\n    head -c 50K &#x2F;dev&#x2F;zero &gt;50kb.test\n    head -c 25K &#x2F;dev&#x2F;zero &gt;25kb.test\n    head -c 512 &#x2F;dev&#x2F;zero &gt;512c.test\n    head -c 25M &#x2F;dev&#x2F;zero &gt;25mb.test\n    # dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;25mb.test bs&#x3D;25MB count&#x3D;1\n    # dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;25kb.test bs&#x3D;25KB count&#x3D;1\n    # dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;512c.test bs&#x3D;512 count&#x3D;1\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下文件大小大于 1M 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -size +1M -name &#39;*.test&#39; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %9s\\n&quot;, &quot;size&quot;, &quot;FileName&quot;;printf &quot;------------------\\n&quot;&#125; &#123;printf &quot;%4dmb %9s\\n&quot;, $5&#x2F;1024&#x2F;1024, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下文件大小等于 25M 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -size +1M -name &#39;*.test&#39; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %9s\\n&quot;, &quot;size&quot;, &quot;FileName&quot;;printf &quot;------------------\\n&quot;&#125; &#123;printf &quot;%4dmb %9s\\n&quot;, $5&#x2F;1024&#x2F;1024, $9&#125;&#39;\n\n    # 特定时间的文件\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 修改系统时间为 2020-10-02 18:25:15 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; date -s &quot;20201002 18:25:15&quot;\n    touch -d &quot;2020-10-02 18:25:15&quot; now.file\n    touch -d &quot;2020-10-02 18:00:15&quot; 25_min_ago.file\n    touch -d &quot;2020-10-02 18:05:15&quot; 20_min_ago.file\n    touch -d &quot;2020-10-02 17:35:15&quot; 50_min_ago.file\n    touch -d &quot;2020-10-02 17:25:15&quot; 1_hour_ago.file\n    touch -d &quot;2020-09-25 18:25:15&quot; 7_days_ago.file\n    touch -d &quot;2020-09-18 18:25:15&quot; 14_days_ago.file\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下 5 天之内修改且以 file 结尾的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mtime -5 -name &quot;*file&quot; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %3s %6s %18s\\n&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Time&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%6s %3d %6s %22s\\n&quot;, $6, $7, $8, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下 5 天之前修改且以 file 结尾的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mtime +5 -name &quot;*file&quot; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %3s %6s %18s\\n&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Time&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%6s %3d %6s %22s\\n&quot;, $6, $7, $8, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下 30 分钟内修改且以 file 结尾的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mmin -30 -name &quot;*file&quot; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %3s %6s %18s\\n&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Time&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%6s %3d %6s %22s\\n&quot;, $6, $7, $8, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下 30 分钟前修改且以 file 结尾的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mmin +30 -name &quot;*file&quot; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %3s %6s %18s\\n&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Time&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%6s %3d %6s %22s\\n&quot;, $6, $7, $8, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下更新时间比 14_days_ago.file 新但是比 25_min_ago.file 旧的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -name &quot;*file&quot; -newer .&#x2F;14_days_ago.file -exec ls -la &#123;&#125; \\; ! -newer 25_min_ago.file | awk &#39;BEGIN&#123;printf &quot;%6s %3s %6s %18s\\n&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Time&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%6s %3d %6s %22s\\n&quot;, $6, $7, $8, $9&#125;&#39;\n\n    # 无属主、无属组文件\n    chown 10086:10086 now.file 7_days_ago.file 50kb.test\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下的没有属主的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -nouser -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %18s\\n&quot;, &quot;User&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s %18s\\n&quot;, $3, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下的没有属组的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -nouser -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %18s\\n&quot;, &quot;Group&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s %18s\\n&quot;, $4, $9&#125;&#39;\n\n    # 权限文件\n    chmod 644 grub.conf php.ini\n    chmod 777 photo.xml\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下权限为 644 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -perm 644 -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %18s\\n&quot;, &quot;Permissions&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s %18s\\n&quot;, $1, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下权限为 777 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -perm 777 -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %18s\\n&quot;, &quot;Permissions&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s  %18s\\n&quot;, $1, $9&#125;&#39;\n\n    # 三级文件夹\n    mkdir -p $&#123;testpath&#125;&#x2F;test&#x2F;dir1 &amp;&amp; cd $&#123;testpath&#125;&#x2F;test&#x2F;dir1 &amp;&amp; touch grub.conf loadbalance.conf php1.ini default_my.cnf my1.cnf mysql-clients1.cnf server1.cnf\n    mkdir -p $&#123;testpath&#125;&#x2F;test&#x2F;dir2 &amp;&amp; cd $&#123;testpath&#125;&#x2F;test&#x2F;dir2 &amp;&amp; touch grub.conf loadbalance.conf php2.ini default_my.cnf my2.cnf mysql-clients2.cnf server2.cnf\n    mkdir -p $&#123;testpath&#125;&#x2F;test_1&#x2F;abcd&#x2F;efgh &amp;&amp; cd $&#123;testpath&#125;&#x2F;test_1&#x2F;abcd&#x2F;efgh &amp;&amp; head -c 6M &#x2F;dev&#x2F;zero &gt;abcd &amp;&amp; head -c 12M &#x2F;dev&#x2F;zero &gt;efgh &amp;&amp; chown jaime:jaimegroup efgh &amp;&amp; chmod 777 efgh\n    mkdir -p $&#123;testpath&#125;&#x2F;test_1&#x2F;hijk&#x2F;lmn &amp;&amp; cd $&#123;testpath&#125;&#x2F;test_1&#x2F;hijk&#x2F;lmn &amp;&amp; head -c 6M &#x2F;dev&#x2F;zero &gt;abcd &amp;&amp; head -c 12M &#x2F;dev&#x2F;zero &gt;efgh &amp;&amp; chown jaime:jaimegroup efgh &amp;&amp; chmod 777 efgh\n    mkdir -p $&#123;testpath&#125;&#x2F;test_1&#x2F;opq&#x2F;rst&#x2F;uvw&#x2F;xyz &amp;&amp; cd $&#123;testpath&#125;&#x2F;test_1&#x2F;opq&#x2F;rst&#x2F;uvw&#x2F;xyz &amp;&amp; head -c 6M &#x2F;dev&#x2F;zero &gt;abcd &amp;&amp; head -c 12M &#x2F;dev&#x2F;zero &gt;efgh &amp;&amp; chown jaime:jaimegroup efgh &amp;&amp; chmod 777 efgh\n    mkdir -p $&#123;testpath&#125;&#x2F;test_1&#x2F;rst&#x2F;uvw&#x2F;xyz &amp;&amp; cd $&#123;testpath&#125;&#x2F;test_1&#x2F;rst&#x2F;uvw&#x2F;xyz &amp;&amp; head -c 6M &#x2F;dev&#x2F;zero &gt;abcd &amp;&amp; head -c 12M &#x2F;dev&#x2F;zero &gt;efgh &amp;&amp; chown jaime:jaimegroup efgh &amp;&amp; chmod 777 efgh\n    cd $&#123;testpath&#125;\n\n    # 查看目录结构\n    # tree\n\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在当前目录下查找以 conf 结尾或文件名以 a 开头的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -a \\( -name &quot;*conf&quot; -o -name &quot;^a&quot; \\)\n    # 限制查找当前目录下的 grub.conf loadbalance.conf 文件，只会查找子目录下的\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在当前目录下的 2 级子目录开始查找以 conf 结尾或文件名以 a 开头的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mindepth 2 -type f -a \\( -name &quot;*conf&quot; -o -name &quot;^a&quot; \\)\n\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在当前目录下的 1 级子目录开始查找文件名为 abcd 或 efgh 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mindepth 1 -type f -a \\( -name &quot;abcd&quot; -o -name &quot;efgh&quot; \\)\n    # 限制查找 .&#x2F;test_1&#x2F;opq 以及 .&#x2F;test_1&#x2F;rst 下的 abcd efgh 文件\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在当前目录下的 1 级子目录开始查找文件名为 abcd 或 efgh 的文件，最多查找到 4 级子目录 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mindepth 1 -maxdepth 4 -type f -a \\( -name &quot;abcd&quot; -o -name &quot;efgh&quot; \\)\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在当前目录下的 1 级子目录开始查找文件属主为 jaime、文件属组为 jaimegroup、文件大小大于 10M 且文件名为 abcd 或 efgh 的文件，最多查找到 5 级子目录，但排除 .&#x2F;test_1&#x2F;hijk 和 .&#x2F;test_1&#x2F;opq 目录 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mindepth 1 -maxdepth 5 -path .&#x2F;test_1&#x2F;hijk -prune -o -path .&#x2F;test_1&#x2F;opq -prune -o -type f -user jaime -group jaimegroup -size +10M -perm 777 -a \\( -name &quot;abcd&quot; -o -name &quot;efgh&quot; \\) -exec ls -la &#123;&#125; \\;\n\n    # 恢复系统时间\n    ntpdate ntp.aliyun.com\n    ntpdate time1.cloud.tencent.com\n\n    # 删除文件\n    cd $&#123;filepath&#125; &amp;&amp; rm -rf test_dir\n    # grub.conf loadbalance.conf photo.xml excel.xml php.ini virtuoso.ini AAbb.pipe aabb.pipe model model-soft *.test *.file test&#x2F; test_1&#x2F;\n\n    # 删除 jaime 用户、 jaimegroup 组\n    userdel -r jaime &amp;&amp; groupdel jaimegroup\n&#125;\n\ncheck_root\ntest_find</code></pre>\n\n<h4 id=\"脚本执行\"><a href=\"#脚本执行\" class=\"headerlink\" title=\"脚本执行\"></a>脚本执行</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">------ 查找当前目录下以 conf 结尾的文件 ------\n\n-rw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n-rw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n\n------ 查找当前目录下文件名为 aabb 的文件(不区分大小写) ------\n\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;aabb\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;AABB\n\n------ 查找当前路径下文件属主为 jaime 的文件 ------\n\n        User        Group           FileName\n--------------------------------------\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;photo.xml\n\n------ 查找当前路径下文件属组为 jaimegroup 的文件 ------\n\n        User        Group           FileName\n--------------------------------------\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;photo.xml\n\n------ 查找当前目录下的文件 ------\n\n-rw-r--r--. 1 jaime jaimegroup 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n-rw-r--r--. 1 jaime jaimegroup 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n-rw-r--r--. 1 jaime jaimegroup 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;photo.xml\n-rw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;excel.xml\n-rw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;php.ini\n-rw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;virtuoso.ini\n\n------ 查找当前路径下的链接文件 ------\n\nlrwxrwxrwx. 1 root root 5 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;model-soft -&gt; model\n\n------ 查找当前路径下的管道文件 ------\n\nprw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;aabb.pipe\nprw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;AAbb.pipe\n\n------ 查找当前目录下文件大小大于 1M 的文件 ------\n\n  size  FileName\n------------------\n  50mb &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50mb.test\n  25mb &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25mb.test\n\n------ 查找当前目录下文件大小等于 25M 的文件 ------\n\n  size  FileName\n------------------\n  50mb &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50mb.test\n  25mb &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25mb.test\n\n------ 修改系统时间为 2020-10-02 18:25:15 ------\n\nFri Oct  2 18:25:15 EDT 2020\n\n------ 查找当前目录下 5 天之内修改且以 file 结尾的文件 ------\n\n Month Day   Time           FileName\n--------------------------------------\n   Oct   2  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n   Oct   2  18:00 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25_min_ago.file\n   Oct   2  18:05 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;20_min_ago.file\n   Oct   2  17:35 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50_min_ago.file\n   Oct   2  17:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;1_hour_ago.file\n\n------ 查找当前目录下 5 天之前修改且以 file 结尾的文件 ------\n\n Month Day   Time           FileName\n--------------------------------------\n   Sep  25  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n   Sep  18  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;14_days_ago.file\n\n------ 查找当前目录下 30 分钟内修改且以 file 结尾的文件 ------\n\n Month Day   Time           FileName\n--------------------------------------\n   Oct   2  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n   Oct   2  18:00 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25_min_ago.file\n   Oct   2  18:05 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;20_min_ago.file\n\n------ 查找当前目录下 30 分钟前修改且以 file 结尾的文件 ------\n\n Month Day   Time           FileName\n--------------------------------------\n   Oct   2  17:35 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50_min_ago.file\n   Oct   2  17:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;1_hour_ago.file\n   Sep  25  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n   Sep  18  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;14_days_ago.file\n\n------ 查找当前目录下更新时间比 14_days_ago.file 新但是比 25_min_ago.file 旧的文件 ------\n\n Month Day   Time           FileName\n--------------------------------------\n   Oct   2  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n   Oct   2  18:00 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25_min_ago.file\n   Oct   2  18:05 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;20_min_ago.file\n   Oct   2  17:35 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50_min_ago.file\n   Oct   2  17:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;1_hour_ago.file\n   Sep  25  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n\n------ 查找当前目录下的没有属主的文件 ------\n\n        User           FileName\n--------------------------------------\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50kb.test\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n\n------ 查找当前目录下的没有属组的文件 ------\n\n       Group           FileName\n--------------------------------------\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50kb.test\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n\n------ 查找当前目录下权限为 644 的文件 ------\n\n Permissions           FileName\n--------------------------------------\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;excel.xml\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;php.ini\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;virtuoso.ini\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;model\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50mb.test\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50kb.test\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25kb.test\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;512c.test\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25mb.test\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25_min_ago.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;20_min_ago.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50_min_ago.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;1_hour_ago.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;14_days_ago.file\n\n------ 查找当前目录下权限为 777 的文件 ------\n\n Permissions           FileName\n--------------------------------------\n -rwxrwxrwx.  &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;photo.xml\n\n------ 在当前目录下查找以 conf 结尾或文件名以 a 开头的文件 ------\n\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir1&#x2F;grub.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir1&#x2F;loadbalance.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir2&#x2F;grub.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir2&#x2F;loadbalance.conf\n\n------ 在当前目录下的 2 级子目录开始查找以 conf 结尾或文件名以 a 开头的文件 ------\n\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir1&#x2F;grub.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir1&#x2F;loadbalance.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir2&#x2F;grub.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir2&#x2F;loadbalance.conf\n\n------ 在当前目录下的 1 级子目录开始查找文件名为 abcd 或 efgh 的文件 ------\n\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;abcd&#x2F;efgh&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;abcd&#x2F;efgh&#x2F;efgh\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;hijk&#x2F;lmn&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;hijk&#x2F;lmn&#x2F;efgh\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;opq&#x2F;rst&#x2F;uvw&#x2F;xyz&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;opq&#x2F;rst&#x2F;uvw&#x2F;xyz&#x2F;efgh\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;rst&#x2F;uvw&#x2F;xyz&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;rst&#x2F;uvw&#x2F;xyz&#x2F;efgh\n\n------ 在当前目录下的 1 级子目录开始查找文件名为 abcd 或 efgh 的文件，最多查找到 4 级子目录 ------\n\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;abcd&#x2F;efgh&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;abcd&#x2F;efgh&#x2F;efgh\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;hijk&#x2F;lmn&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;hijk&#x2F;lmn&#x2F;efgh\n\n------ 在当前目录下的 1 级子目录开始查找文件属主为 jaime、文件属组为 jaimegroup、文件大小大于 10M 且文件名为 abcd 或 efgh 的文件，最多查找到 5 级子目录，但排除 .&#x2F;test_1&#x2F;hijk 和 .&#x2F;test_1&#x2F;opq 目录 ------\n\n-rwxrwxrwx. 1 jaime jaimegroup 12582912 Oct  2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;abcd&#x2F;efgh&#x2F;efgh\n-rwxrwxrwx. 1 jaime jaimegroup 12582912 Oct  2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;hijk&#x2F;lmn&#x2F;efgh\n-rwxrwxrwx. 1 jaime jaimegroup 12582912 Oct  2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;rst&#x2F;uvw&#x2F;xyz&#x2F;efgh</code></pre>\n\n<h2 id=\"总结及适用场景分析\"><a href=\"#总结及适用场景分析\" class=\"headerlink\" title=\"总结及适用场景分析\"></a>总结及适用场景分析</h2><p>find、locate、whereis 和 which 总结及适用场景分析。</p>\n<h3 id=\"locate-命令\"><a href=\"#locate-命令\" class=\"headerlink\" title=\"locate 命令\"></a>locate 命令</h3><ul>\n<li>文件查找命令，所属软件包 mlocate。</li>\n<li>不同于 find 命令是在整块磁盘中搜索，locate 命令是在数据库文件中查找。新创建的文件使用 locate 命令可能会查找不到，使用 updatedb 命令更新数据库文件后便可查找到。</li>\n<li>find 是默认全部匹配，locate 是默认部分匹配。</li>\n</ul>\n<h3 id=\"updatedb-命令\"><a href=\"#updatedb-命令\" class=\"headerlink\" title=\"updatedb 命令\"></a>updatedb 命令</h3><ul>\n<li>用户更新 <code>/var/lib/mlocate.db</code>。</li>\n<li>所使用配置文件 <code>/etc/updatedb.conf</code>。</li>\n<li>该命令在后台 cron 计划任务中定期执行。</li>\n</ul>\n<h3 id=\"whereis-命令\"><a href=\"#whereis-命令\" class=\"headerlink\" title=\"whereis 命令\"></a>whereis 命令</h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-b</td>\n<td>只返回二进制文件</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>只返回帮助文档文件</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>只返回源代码文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"which-命令\"><a href=\"#which-命令\" class=\"headerlink\" title=\"which 命令\"></a>which 命令</h3><ul>\n<li>仅查找二进制程序文件。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-b</td>\n<td>只返回二进制文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"各命令使用场景推荐\"><a href=\"#各命令使用场景推荐\" class=\"headerlink\" title=\"各命令使用场景推荐\"></a>各命令使用场景推荐</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>适用场景</th>\n<th>优缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>find</td>\n<td>查找某一类文件，比如文件名部分一致</td>\n<td>功能强大，速度慢</td>\n</tr>\n<tr>\n<td>locate</td>\n<td>只能查找单个文件</td>\n<td>功能单一，速度快</td>\n</tr>\n<tr>\n<td>whereis</td>\n<td>查找程序的可执行文件、帮助文档等</td>\n<td>不常用</td>\n</tr>\n<tr>\n<td>which</td>\n<td>只查找程序的可执行文件</td>\n<td>常用于查找程序的绝对路径</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文代码：<a href=\"https://github.com/JaimeZeng/learning-linux/314-shell-scripting/04-shell/\">04-shell</a></p></blockquote>\n","text":"该小节讲解 Shell 中常用的命令，包括文件查找 find 和 locate 的使用，尤其是 find 的各种高级用法，并结合 xargs 对大量文件进行处理；之后讲解数据备份、文件压缩、目录备份以及下载工具的使用方法；所有的用法都会在真实环境给大家做演示… find语法 语法...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"26 mins."},"categories":[{"name":"Linux","slug":"Linux","count":11,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"},{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#find\"><span class=\"toc-text\">find</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%89%E9%A1%B9%E5%8F%82%E6%95%B0%E5%AF%B9%E7%85%A7%E8%A1%A8\"><span class=\"toc-text\">选项参数对照表</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">常用选项</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">操作</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99\"><span class=\"toc-text\">脚本编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">脚本执行</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%E5%8F%8A%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90\"><span class=\"toc-text\">总结及适用场景分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#locate-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">locate 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#updatedb-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">updatedb 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#whereis-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">whereis 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#which-%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">which 命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%84%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%8E%A8%E8%8D%90\"><span class=\"toc-text\">各命令使用场景推荐</span></a></li></ol></li></ol>","author":{"name":"JaimeZeng","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/JaimeZeng/cdn/main/blog/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":"https://github.com/JaimeZeng"}}},"mapped":true,"prev_post":{"title":"文本处理命令 grep","uid":"a2787fdbc6396b9d6a932d66753ffcfb","slug":"2020-10-03-05_文本处理 grep","date":"2020-10-03T11:23:26.000Z","updated":"2021-09-26T10:49:57.952Z","comments":true,"path":"api/articles/2020-10-03-05_文本处理 grep.json","keywords":null,"cover":null,"text":"grepgrep 是”Global Regular Expressions Print“的首字母缩写词，意为全局正则表达式打印。grep 是一个逐行扫描指定文件或文件的程序，返回包含模式的行。模式是一种表达式，它通过将字符解释为元字符来指定一组字符串。例如，星号元字符（*）被解释...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"Linux","slug":"Linux","count":11,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"},{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"}],"author":{"name":"JaimeZeng","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/JaimeZeng/cdn/main/blog/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":"https://github.com/JaimeZeng"}}}},"next_post":{"title":"函数的高级用法","uid":"45466a0fbcef37e512cea56b5a3634ff","slug":"2020-10-03-03_函数的高级用法","date":"2020-10-03T11:21:26.000Z","updated":"2021-09-26T10:49:57.952Z","comments":true,"path":"api/articles/2020-10-03-03_函数的高级用法.json","keywords":null,"cover":null,"text":"讲解 Shell 中函数是如何定义和使用的、如何向函数传递参数、函数的返回值，并剖析和其他语言使用函数的区别；之后介绍如何调用函数、函数的作用域、如何进行递归调用以及函数库的概念，所有的讲解都会配合在真实环境演示，以帮助学员彻底理解… 函数的定义和使用函数定义 Linux She...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Linux","slug":"Linux","count":11,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":8,"path":"api/tags/Linux.json"},{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"}],"author":{"name":"JaimeZeng","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/JaimeZeng/cdn/main/blog/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":"https://github.com/JaimeZeng"}}}}}