{"title":"文本处理 sed","uid":"a92869a2b48f0ffce8551661a1622e3c","slug":"2020-10-03-06_文本处理 sed","date":"2020-10-03T11:24:26.000Z","updated":"2021-09-01T16:19:13.147Z","comments":true,"path":"api/articles/2020-10-03-06_文本处理 sed.json","keywords":null,"cover":null,"content":"<p>本章主要讲解 Shell 中最核心的文本处理三剑客之 sed 的用法。</p>\n<h2 id=\"sed-的工作模式\"><a href=\"#sed-的工作模式\" class=\"headerlink\" title=\"sed 的工作模式\"></a>sed 的工作模式</h2><h3 id=\"基础介绍\"><a href=\"#基础介绍\" class=\"headerlink\" title=\"基础介绍\"></a>基础介绍</h3><ul>\n<li>sed(Stream Editor)：流编辑器。对标准输出或文件逐行进行处理。</li>\n</ul>\n<h3 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h3><p>|        | 格式                                  |<br>| —— | ————————————- | ——————————- |<br>| 第一种 | <code>stdout                               | sed [option] &quot;pattern command&quot;</code> |<br>| 第二种 | <code>sed [option] &quot;pattern command&quot; file</code> |</p>\n<h2 id=\"sed-的选项\"><a href=\"#sed-的选项\" class=\"headerlink\" title=\"sed 的选项\"></a>sed 的选项</h2><h3 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h3><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-n</code></td>\n<td>只打印模式匹配行</td>\n</tr>\n<tr>\n<td><code>-e</code></td>\n<td>直接在命令行进行 sed 编辑，默认选项</td>\n</tr>\n<tr>\n<td><code>-f</code></td>\n<td>编辑动作保存在文件中，指定文件执行</td>\n</tr>\n<tr>\n<td><code>-r</code></td>\n<td>支持扩展正则表达式</td>\n</tr>\n<tr>\n<td><code>-i</code></td>\n<td>直接修改文件内容</td>\n</tr>\n</tbody></table>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><h4 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# sed 中的 option 练习\n\nfilepath&#x3D;$(\n    cd &quot;$(dirname &quot;$0&quot;)&quot;\n    pwd\n)\ntestpath&#x3D;&quot;$&#123;filepath&#125;&#x2F;test_dir&quot;\nfilename&#x3D;&quot;$&#123;testpath&#125;&#x2F;passwd&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction test_sed_option() &#123;\n    # 生成测试文件\n    mkdir -p $&#123;testpath&#125; &amp;&amp; cd $&#123;testpath&#125;\n    cp &#x2F;etc&#x2F;passwd .&#x2F;\n\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中以 root 开始的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;&#x2F;^root&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 zsh 或者 bash 的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n -e &#39;&#x2F;bash&#x2F;p&#39; -e &#39;&#x2F;zsh&#x2F;p&#39; $&#123;filename&#125;\n    # 使用 -r 扩展正则表达式处理\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 zsh 或者 bash 的行(使用扩展正则表达式) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n -r &#39;&#x2F;bash|zsh&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 root 的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;&#x2F;root&#x2F;p&#39; $&#123;filename&#125;\n\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;&#x2F;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#x2F;p&#39; $&#123;filename&#125;\n    # 使用 -f 指定文件处理\n    echo &quot;&#x2F;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#x2F;p&quot; &gt;&gt;edit.sed\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行(使用指定文件处理) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n -f edit.sed $&#123;filename&#125;\n\n    # 使用 -i 直接修改文件内容\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 root 的行(sed) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;&#x2F;root&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 root 的行(grep) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -n &#39;root&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 将 passwd 文件中的 root 替换为 jaime 并打印 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;s&#x2F;root&#x2F;jaime&#x2F;g;p&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 jaime 的行(sed) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;&#x2F;jaime&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 直接将 passwd 文件中的 root 替换为 jaime ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;root&#x2F;jaime&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 jaime 的行(grep) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -n &#39;jaime&#39; $&#123;filename&#125;\n\n    # 删除测试目录\n    cd $&#123;filepath&#125; &amp;&amp; rm -rf test_dir&#x2F;\n    # rm -r passwd edit.sed\n&#125;\n\ntest_sed_option</code></pre>\n\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">------ 打印 passwd 文件中以 root 开始的行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n\n------ 打印 passwd 文件中包含 zsh 或者 bash 的行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh\n\n------ 打印 passwd 文件中包含 zsh 或者 bash 的行(使用扩展正则表达式) ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh\n\n------ 打印 passwd 文件中包含 root 的行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n\n------ 打印 passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行 ------\n\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\n\n------ 打印 passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行(使用指定文件处理) ------\n\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\n\n------ 打印 passwd 文件中包含 root 的行(sed) ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n\n------ 打印 passwd 文件中包含 root 的行(grep) ------\n\n1:root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n\n------ 将 passwd 文件中的 root 替换为 jaime 并打印 ------\n\njaime:x:0:0:jaime:&#x2F;jaime:&#x2F;bin&#x2F;zsh\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\nshutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown\nhalt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;jaime:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\nnobody:x:99:99:Nobody:&#x2F;:&#x2F;sbin&#x2F;nologin\nsystemd-network:x:192:192:systemd Network Management:&#x2F;:&#x2F;sbin&#x2F;nologin\ndbus:x:81:81:System message bus:&#x2F;:&#x2F;sbin&#x2F;nologin\npolkitd:x:999:998:User for polkitd:&#x2F;:&#x2F;sbin&#x2F;nologin\nsshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\npostfix:x:89:89::&#x2F;var&#x2F;spool&#x2F;postfix:&#x2F;sbin&#x2F;nologin\nchrony:x:998:996::&#x2F;var&#x2F;lib&#x2F;chrony:&#x2F;sbin&#x2F;nologin\nryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh\nrpc:x:32:32:Rpcbind Daemon:&#x2F;var&#x2F;lib&#x2F;rpcbind:&#x2F;sbin&#x2F;nologin\ngluster:x:997:993:GlusterFS daemons:&#x2F;run&#x2F;gluster:&#x2F;sbin&#x2F;nologin\nlibstoragemgmt:x:996:992:daemon account for libstoragemgmt:&#x2F;var&#x2F;run&#x2F;lsm:&#x2F;sbin&#x2F;nologin\nqemu:x:107:107:qemu user:&#x2F;:&#x2F;sbin&#x2F;nologin\nunbound:x:995:991:Unbound DNS resolver:&#x2F;etc&#x2F;unbound:&#x2F;sbin&#x2F;nologin\nsaslauth:x:994:76:Saslauthd user:&#x2F;run&#x2F;saslauthd:&#x2F;sbin&#x2F;nologin\ntss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin\nusbmuxd:x:113:113:usbmuxd user:&#x2F;:&#x2F;sbin&#x2F;nologin\nsaned:x:993:990:SANE scanner daemon user:&#x2F;usr&#x2F;share&#x2F;sane:&#x2F;sbin&#x2F;nologin\ncolord:x:992:988:User for colord:&#x2F;var&#x2F;lib&#x2F;colord:&#x2F;sbin&#x2F;nologin\nabrt:x:173:173::&#x2F;etc&#x2F;abrt:&#x2F;sbin&#x2F;nologin\ngeoclue:x:991:987:User for geoclue:&#x2F;var&#x2F;lib&#x2F;geoclue:&#x2F;sbin&#x2F;nologin\nntp:x:38:38::&#x2F;etc&#x2F;ntp:&#x2F;sbin&#x2F;nologin\nsetroubleshoot:x:990:986::&#x2F;var&#x2F;lib&#x2F;setroubleshoot:&#x2F;sbin&#x2F;nologin\nrpcuser:x:29:29:RPC Service User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nnfsnobody:x:65534:65534:Anonymous NFS User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nrtkit:x:172:172:RealtimeKit:&#x2F;proc:&#x2F;sbin&#x2F;nologin\npulse:x:171:171:PulseAudio System Daemon:&#x2F;var&#x2F;run&#x2F;pulse:&#x2F;sbin&#x2F;nologin\nsssd:x:989:983:User for sssd:&#x2F;:&#x2F;sbin&#x2F;nologin\nradvd:x:75:75:radvd user:&#x2F;:&#x2F;sbin&#x2F;nologin\ntcpdump:x:72:72::&#x2F;:&#x2F;sbin&#x2F;nologin\navahi:x:70:70:Avahi mDNS&#x2F;DNS-SD Stack:&#x2F;var&#x2F;run&#x2F;avahi-daemon:&#x2F;sbin&#x2F;nologin\nnginx:x:987:981:Nginx web server:&#x2F;var&#x2F;lib&#x2F;nginx:&#x2F;sbin&#x2F;nologin\n\n------ 打印 passwd 文件中包含 jaime 的行(sed) ------\n\n\n------ 直接将 passwd 文件中的 root 替换为 jaime ------\n\n\n------ 打印 passwd 文件中包含 jaime 的行(grep) ------\n\n1:jaime:x:0:0:jaime:&#x2F;jaime:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;jaime:&#x2F;sbin&#x2F;nologin\n</code></pre>\n\n<h2 id=\"sed-中的-pattern-详解\"><a href=\"#sed-中的-pattern-详解\" class=\"headerlink\" title=\"sed 中的 pattern 详解\"></a>sed 中的 pattern 详解</h2><h3 id=\"匹配模式\"><a href=\"#匹配模式\" class=\"headerlink\" title=\"匹配模式\"></a>匹配模式</h3><table>\n<thead>\n<tr>\n<th>匹配模式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>10commmand</code></td>\n<td>匹配到第 10 行</td>\n</tr>\n<tr>\n<td><code>10,20command</code></td>\n<td>匹配从第 10 行开始，到第 20 行结束</td>\n</tr>\n<tr>\n<td><code>10,+5command</code></td>\n<td>匹配从第 10 行开始，到第 16 行结束</td>\n</tr>\n<tr>\n<td><code>/pattern1/command</code></td>\n<td>匹配到 pattern1 的行</td>\n</tr>\n<tr>\n<td><code>/patttern1,/pattern2/command</code></td>\n<td>匹配从 pattern 的行开始，到 pattern2 的行结束</td>\n</tr>\n<tr>\n<td><code>10,/pattern1/command</code></td>\n<td>匹配从第 10 行开始，到匹配到 pattern1 的行结束</td>\n</tr>\n<tr>\n<td><code>/pattern1/,10command</code></td>\n<td>匹配到 pattern1 的行开始，到第 10 行结束</td>\n</tr>\n</tbody></table>\n<p>注意：</p>\n<ul>\n<li>匹配模式中存在变量时，建议使用双引号。<code>sed -i &quot;/$&#123;var1&#125;/$&#123;var2&#125;/g&quot;</code></li>\n<li>需要引入自定义变量时，如果外面使用单引号，则自定义变量也必须使用单引号。<code>sed -i &#39;/&#39;$&#123;var1&#125;&#39;/&#39;$&#123;var2&#125;&#39;/g&#39;</code></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1. LineNumber: 指定行号\n\n    sed -n &quot;17p&quot; file   # 打印 file 的第 17 行\n\n2. StartLine, EndLine: 指定起始和结束行号\n\n    sed -n &quot;10, 20p&quot; file   # 打印 file 的 第 10 - 20 行\n\n3. StartLine,+N:指定起始行号，然后后面 N 行\n\n    sed -n &quot;10, +5p&quot; file   # 打印 file 的 第 10 - 16 行\n\n4. &#x2F;pattern1&#x2F;: 正则表达式匹配的行\n\n    sed -n &quot;&#x2F;^root&#x2F;p&quot; file  # 打印 file 文件中以 root 开始的行\n\n5. &#x2F;pattern1&#x2F;,&#x2F;pattern2&#x2F;: 从匹配到 pattern1 的行，到匹配到 pattern2 的行\n\n    sed -n &#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&quot; file    # 打印 file 文件中从 mail 开始的行到 ftp 开始的行\n\n6. LineNumber,&#x2F;pattern1&#x2F;: 从指定行开始匹配，匹配到 pattern1 的行结束\n\n    sed -n &quot;4,&#x2F;shutdown$&#x2F;p&quot; file    # 打印 file 文件中从第 4 行到以 shutdown\n    结束的行\n\n7. &#x2F;pattern1&#x2F;,LineNumber: 从匹配到 pattern1 的行开始到指定行结束\n\n    sed -n &quot;&#x2F;^bin&#x2F;,6p&quot; file     # 打印 file 文件中从以 bin 开始的行到 第 6 行</code></pre>\n\n<h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h3><h4 id=\"测试代码-1\"><a href=\"#测试代码-1\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n#  sed 中的 pattern 练习\n\nfilename&#x3D;&#39;&#x2F;etc&#x2F;passwd&#39;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction test_sed_pattern() &#123;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 的第 3 行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;3p&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 的第 1 - 5 行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;1, 5p&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 的第 1 ,+5 行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;1, +5p&quot; $&#123;filename&#125;\n\n    # 正则表达式\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中以 root 开始的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;&#x2F;^root&#x2F;p&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中从 mail 开始的行到 ftp 开始的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中从第 4 行到以 shutdown 结束的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;4,&#x2F;shutdown$&#x2F;p&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中从以 bin 开始的行到第 6 行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;&#x2F;^bin&#x2F;,6p&quot; $&#123;filename&#125;\n    # 正则表达式转义\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;&#x2F;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#x2F;p&quot; $&#123;filename&#125;\n    # 扩展正则表达式\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中包含 bash 或者 zsh 的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n -r &quot;&#x2F;bash|zsh&#x2F;p&quot; $&#123;filename&#125;\n\n    # 如果起始行号 &gt; 终止行号，只会显示起始行号的那一行\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 &#x2F;etc&#x2F;passwd 中从包含 sshd 的行并显示行号 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -n &quot;sshd&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中从包含 sshd 的行到第 6 行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;&#x2F;sshd&#x2F;,6p&quot; $&#123;filename&#125;\n\n&#125;\n\ntest_sed_pattern</code></pre>\n\n<h4 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">------ 打印 &#x2F;etc&#x2F;passwd 的第 3 行 ------\n\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\n\n------ 打印 &#x2F;etc&#x2F;passwd 的第 1 - 5 行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\n\n------ 打印 &#x2F;etc&#x2F;passwd 的第 1 ,+5 行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\n\n------ 打印 &#x2F;etc&#x2F;passwd 中以 root 开始的行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n\n------ 打印 &#x2F;etc&#x2F;passwd 中从 mail 开始的行到 ftp 开始的行 ------\n\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\n\n------ 打印 &#x2F;etc&#x2F;passwd 中从第 4 行到以 shutdown 结束的行 ------\n\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\nshutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown\n\n------ 打印 &#x2F;etc&#x2F;passwd 中从以 bin 开始的行到第 6 行 ------\n\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\n\n------ 打印 &#x2F;etc&#x2F;passwd 中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行 ------\n\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\n\n------ 打印 &#x2F;etc&#x2F;passwd 中包含 bash 或者 zsh 的行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh\n\n------ 在 &#x2F;etc&#x2F;passwd 中从包含 sshd 的行并显示行号 ------\n\n17:sshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\n\n------ 打印 &#x2F;etc&#x2F;passwd 中从包含 sshd 的行到第 6 行 ------\n\nsshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin</code></pre>\n\n<h2 id=\"sed-中的编辑命令\"><a href=\"#sed-中的编辑命令\" class=\"headerlink\" title=\"sed 中的编辑命令\"></a>sed 中的编辑命令</h2><h3 id=\"命令对照表\"><a href=\"#命令对照表\" class=\"headerlink\" title=\"命令对照表\"></a>命令对照表</h3><table>\n<thead>\n<tr>\n<th>类别</th>\n<th>编辑命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>查询</td>\n<td>p</td>\n<td>打印</td>\n</tr>\n<tr>\n<td>增加 1</td>\n<td>a</td>\n<td>行后追加</td>\n</tr>\n<tr>\n<td>增加 2</td>\n<td>i</td>\n<td>行前增加</td>\n</tr>\n<tr>\n<td>增加 3</td>\n<td>r</td>\n<td>外部文件读入，行后追加</td>\n</tr>\n<tr>\n<td>增加 4</td>\n<td>w</td>\n<td>匹配行写入外部文件</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>d</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>修改 1</td>\n<td>s/old/new</td>\n<td>将第一个 old 替换为 new</td>\n</tr>\n<tr>\n<td>修改 2</td>\n<td>s/old/new/g</td>\n<td>将全部的 old 替换为 new</td>\n</tr>\n<tr>\n<td>修改 3</td>\n<td>s/old/new/2g</td>\n<td>将第两个开始的所有的 old 替换为 new</td>\n</tr>\n<tr>\n<td>修改 4</td>\n<td>s/old/new/ig</td>\n<td>将全部的 old 替换为 new ，忽略大小写</td>\n</tr>\n</tbody></table>\n<h3 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试 1\"></a>测试 1</h3><h4 id=\"测试代码-2\"><a href=\"#测试代码-2\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# sed 中的 command 练习\n\nfilepath&#x3D;$(\n    cd &quot;$(dirname &quot;$0&quot;)&quot;\n    pwd\n)\ntestpath&#x3D;&quot;$&#123;filepath&#125;&#x2F;test_dir&quot;\nfilename&#x3D;&quot;$&#123;testpath&#125;&#x2F;passwd&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction test_sed_command() &#123;\n    mkdir -p $&#123;testpath&#125; &amp;&amp; cd $&#123;testpath&#125;\n\n    # 删除一行 delete\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 删除 passwd 文件中一行 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 删除 passwd 文件中的第 1 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;1d&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除前打印 passwd 的第 1 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1p&quot; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除 passwd 文件中的第 1 行 ... $&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;1d&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 的第 1 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1p&quot; $&#123;filename&#125;\n\n    # 删除多行 1\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 删除 passwd 文件中多行 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除前打印 passwd 的第 1 - 3 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1,3p&quot; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除 passwd 文件中的第 1 - 3 行 ... $&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;1,3d&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 的第 1 - 3 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1,3p&quot; $&#123;filename&#125;\n\n    # 删除多行 2\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 删除 passwd 文件中多行 2 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除前打印 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ... $&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;d&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;p&#39; $&#123;filename&#125;\n\n    # 删除多行 3\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 删除 passwd 文件中多行 3 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除前打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除 passwd 中从 mail 开始的行到 ftp 开始的行 ... $&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;d&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&#39; $&#123;filename&#125;\n\n    # 行后追加内容 append\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ passwd 文件行后追加内容 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;root:\\&#x2F;root&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接在 passwd 中包含 root:&#x2F;root 的行后追加 This is user which can login system ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;root:\\&#x2F;root&#x2F;a This is user which can login system&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中 1 - 3 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1,3p&quot; $&#123;filename&#125;\n\n    # 行前插入内容 insert\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ passwd 文件行前插入内容 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接在 passwd 中从 mail 开始的行到 ftp 开始的行前添加 This is nologin user  ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;i This is nologin user&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&#39; $&#123;filename&#125;\n\n    # 将指定文件内容追加到匹配行后 rewrite\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ passwd 文件中添加指定文件的内容 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo &quot;This is user which can login system&quot; &gt;&gt;rewrite\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;root:\\&#x2F;root&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接在 passwd 中包含 root:&#x2F;root 的行后追加 rewrite 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;root:\\&#x2F;root&#x2F;r rewrite&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中 1 - 3 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1,3p&quot; $&#123;filename&#125;\n\n    # 将匹配到的行内容保存到其它文件 write\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ passwd 文件中的内容追加到指定文件中 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;root:\\&#x2F;root&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接将 passwd 中包含 root:&#x2F;root 的行内容保存到 write 文件中 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;root:\\&#x2F;root&#x2F;w write&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 write 文件 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n write\n\n    # 替换第一个\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 替换 passwd 中第一个 root 为 jaime ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 root 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;root&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接将 passwd 文件中的第一个 root 替换为 jaime ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;root&#x2F;jaime&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 jaime 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;jaime&#39; $&#123;filename&#125;\n\n    # 替换第二个开始的所有的 root\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 替换 passwd 中从第二个开始的所有的 root 为 jaime ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 root 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;root&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接将 passwd 文件中从第二个开始的所有的 root 为 jaime ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;root&#x2F;jaime&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 jaime 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;jaime&#39; $&#123;filename&#125;\n\n    # 替换所有的 root\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 替换 passwd 中所有的 root 为 jaime ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 root 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;root&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接将 passwd 文件中的所有的 root 替换为 jaime ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;root&#x2F;jaime&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 jaime 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;jaime&#39; $&#123;filename&#125;\n\n    # 替换所有的 ssh\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 替换 passwd 中所有的 ssh|SSH 为 http ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 ssh|SSH 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n -E &#39;ssh|SSH&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 ssh|SSH 的行(sed) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n -r &#39;&#x2F;ssh|SSH&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接将 passwd 文件中的所有的 ssh|SSH 替换为 jaime(不区分大小写) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;ssh&#x2F;http&#x2F;ig&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 http 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;http&#39; $&#123;filename&#125;\n\n    # 显示行号\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 查找 passwd 文件中包含 zsh 或者 bash 的行并显示行号 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 zsh 或者 bash 的行并显示行号(使用 sed 扩展正则表达式) ...$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n -r &#39;&#x2F;bash|zsh&#x2F;&#x3D;;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 zsh 或者 bash 的行并显示行号(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n -E &#39;bash|zsh&#39; $&#123;filename&#125;\n\n    # 删除测试文件\n    cd $&#123;filepath&#125; &amp;&amp; rm -rf test_dir&#x2F;\n\n&#125;\ntest_sed_command</code></pre>\n\n<h4 id=\"运行结果-2\"><a href=\"#运行结果-2\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">------ 删除 passwd 文件中一行 ------\n\n 删除 passwd 文件中的第 1 行 ...\n 直接删除前打印 passwd 的第 1 行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n 直接删除 passwd 文件中的第 1 行 ...\n 打印 passwd 的第 1 行 ...\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\n\n------ 删除 passwd 文件中多行 ------\n\n 直接删除前打印 passwd 的第 1 - 3 行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\n 直接删除 passwd 文件中的第 1 - 3 行 ...\n 打印 passwd 的第 1 - 3 行 ...\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\n\n------ 删除 passwd 文件中多行 2 ------\n\n 直接删除前打印 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ...\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\nnobody:x:99:99:Nobody:&#x2F;:&#x2F;sbin&#x2F;nologin\nsystemd-network:x:192:192:systemd Network Management:&#x2F;:&#x2F;sbin&#x2F;nologin\ndbus:x:81:81:System message bus:&#x2F;:&#x2F;sbin&#x2F;nologin\npolkitd:x:999:998:User for polkitd:&#x2F;:&#x2F;sbin&#x2F;nologin\nsshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\npostfix:x:89:89::&#x2F;var&#x2F;spool&#x2F;postfix:&#x2F;sbin&#x2F;nologin\nchrony:x:998:996::&#x2F;var&#x2F;lib&#x2F;chrony:&#x2F;sbin&#x2F;nologin\nrpc:x:32:32:Rpcbind Daemon:&#x2F;var&#x2F;lib&#x2F;rpcbind:&#x2F;sbin&#x2F;nologin\ngluster:x:997:993:GlusterFS daemons:&#x2F;run&#x2F;gluster:&#x2F;sbin&#x2F;nologin\nlibstoragemgmt:x:996:992:daemon account for libstoragemgmt:&#x2F;var&#x2F;run&#x2F;lsm:&#x2F;sbin&#x2F;nologin\nqemu:x:107:107:qemu user:&#x2F;:&#x2F;sbin&#x2F;nologin\nunbound:x:995:991:Unbound DNS resolver:&#x2F;etc&#x2F;unbound:&#x2F;sbin&#x2F;nologin\nsaslauth:x:994:76:Saslauthd user:&#x2F;run&#x2F;saslauthd:&#x2F;sbin&#x2F;nologin\ntss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin\nusbmuxd:x:113:113:usbmuxd user:&#x2F;:&#x2F;sbin&#x2F;nologin\nsaned:x:993:990:SANE scanner daemon user:&#x2F;usr&#x2F;share&#x2F;sane:&#x2F;sbin&#x2F;nologin\ncolord:x:992:988:User for colord:&#x2F;var&#x2F;lib&#x2F;colord:&#x2F;sbin&#x2F;nologin\nabrt:x:173:173::&#x2F;etc&#x2F;abrt:&#x2F;sbin&#x2F;nologin\ngeoclue:x:991:987:User for geoclue:&#x2F;var&#x2F;lib&#x2F;geoclue:&#x2F;sbin&#x2F;nologin\nntp:x:38:38::&#x2F;etc&#x2F;ntp:&#x2F;sbin&#x2F;nologin\nsetroubleshoot:x:990:986::&#x2F;var&#x2F;lib&#x2F;setroubleshoot:&#x2F;sbin&#x2F;nologin\nrpcuser:x:29:29:RPC Service User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nnfsnobody:x:65534:65534:Anonymous NFS User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nrtkit:x:172:172:RealtimeKit:&#x2F;proc:&#x2F;sbin&#x2F;nologin\npulse:x:171:171:PulseAudio System Daemon:&#x2F;var&#x2F;run&#x2F;pulse:&#x2F;sbin&#x2F;nologin\nsssd:x:989:983:User for sssd:&#x2F;:&#x2F;sbin&#x2F;nologin\nradvd:x:75:75:radvd user:&#x2F;:&#x2F;sbin&#x2F;nologin\ngdm:x:42:42::&#x2F;var&#x2F;lib&#x2F;gdm:&#x2F;sbin&#x2F;nologin\ngnome-initial-setup:x:988:982::&#x2F;run&#x2F;gnome-initial-setup&#x2F;:&#x2F;sbin&#x2F;nologin\ntcpdump:x:72:72::&#x2F;:&#x2F;sbin&#x2F;nologin\navahi:x:70:70:Avahi mDNS&#x2F;DNS-SD Stack:&#x2F;var&#x2F;run&#x2F;avahi-daemon:&#x2F;sbin&#x2F;nologin\nnginx:x:987:981:Nginx web server:&#x2F;var&#x2F;lib&#x2F;nginx:&#x2F;sbin&#x2F;nologin\n 直接删除 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ...\n 打印 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ...\n\n------ 删除 passwd 文件中多行 3 ------\n\n 直接删除前打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\n 直接删除 passwd 中从 mail 开始的行到 ftp 开始的行 ...\n 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...\n\n------ passwd 文件行后追加内容 ------\n\n 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n 直接在 passwd 中包含 root:&#x2F;root 的行后追加 This is user which can login system ...\n 打印 passwd 中 1 - 3 行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nThis is user which can login system\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\n\n------ passwd 文件行前插入内容 ------\n\n 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\n 直接在 passwd 中从 mail 开始的行到 ftp 开始的行前添加 This is nologin user  ...\n 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\nThis is nologin user\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\nThis is nologin user\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nThis is nologin user\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\n\n------ passwd 文件中添加指定文件的内容 ------\n\n 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n 直接在 passwd 中包含 root:&#x2F;root 的行后追加 rewrite 文件内容 ...\n 打印 passwd 中 1 - 3 行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nThis is user which can login system\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\n\n------ passwd 文件中的内容追加到指定文件中 ------\n\n 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n 直接将 passwd 中包含 root:&#x2F;root 的行内容保存到 write 文件中 ...\n 打印 write 文件 ...\n     1    root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n\n------ 替换 passwd 中第一个 root 为 jaime ------\n\n 打印 passwd 文件中包含 root 的行(grep) ...\n1:root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n 直接将 passwd 文件中的第一个 root 替换为 jaime ...\n 打印 passwd 文件中包含 jaime 的行(grep) ...\n1:jaime:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;jaime:&#x2F;sbin&#x2F;nologin\n\n------ 替换 passwd 中从第二个开始的所有的 root 为 jaime ------\n\n 打印 passwd 文件中包含 root 的行(grep) ...\n1:root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n 直接将 passwd 文件中从第二个开始的所有的 root 为 jaime ...\n 打印 passwd 文件中包含 jaime 的行(grep) ...\n1:root:x:0:0:jaime:&#x2F;jaime:&#x2F;bin&#x2F;zsh\n\n------ 替换 passwd 中所有的 root 为 jaime ------\n\n 打印 passwd 文件中包含 root 的行(grep) ...\n1:root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n 直接将 passwd 文件中的所有的 root 替换为 jaime ...\n 打印 passwd 文件中包含 jaime 的行(grep) ...\n1:jaime:x:0:0:jaime:&#x2F;jaime:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;jaime:&#x2F;sbin&#x2F;nologin\n\n------ 替换 passwd 中所有的 ssh|SSH 为 http ------\n\n 打印 passwd 文件中包含 ssh|SSH 的行(grep) ...\n17:sshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\n 打印 passwd 文件中包含 ssh|SSH 的行(sed) ...\nsshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\n 直接将 passwd 文件中的所有的 ssh|SSH 替换为 jaime(不区分大小写) ...\n 打印 passwd 文件中包含 http 的行(grep) ...\n17:httpd:x:74:74:Privilege-separated http:&#x2F;var&#x2F;empty&#x2F;httpd:&#x2F;sbin&#x2F;nologin\n\n------ 查找 passwd 文件中包含 zsh 或者 bash 的行并显示行号 ------\n\n 打印 passwd 文件中包含 zsh 或者 bash 的行并显示行号(使用 sed 扩展正则表达式) ...\n\n1\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\nshutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown\nhalt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\nnobody:x:99:99:Nobody:&#x2F;:&#x2F;sbin&#x2F;nologin\nsystemd-network:x:192:192:systemd Network Management:&#x2F;:&#x2F;sbin&#x2F;nologin\ndbus:x:81:81:System message bus:&#x2F;:&#x2F;sbin&#x2F;nologin\npolkitd:x:999:998:User for polkitd:&#x2F;:&#x2F;sbin&#x2F;nologin\nsshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\npostfix:x:89:89::&#x2F;var&#x2F;spool&#x2F;postfix:&#x2F;sbin&#x2F;nologin\nchrony:x:998:996::&#x2F;var&#x2F;lib&#x2F;chrony:&#x2F;sbin&#x2F;nologin\n20\nryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh\nrpc:x:32:32:Rpcbind Daemon:&#x2F;var&#x2F;lib&#x2F;rpcbind:&#x2F;sbin&#x2F;nologin\ngluster:x:997:993:GlusterFS daemons:&#x2F;run&#x2F;gluster:&#x2F;sbin&#x2F;nologin\nlibstoragemgmt:x:996:992:daemon account for libstoragemgmt:&#x2F;var&#x2F;run&#x2F;lsm:&#x2F;sbin&#x2F;nologin\nqemu:x:107:107:qemu user:&#x2F;:&#x2F;sbin&#x2F;nologin\nunbound:x:995:991:Unbound DNS resolver:&#x2F;etc&#x2F;unbound:&#x2F;sbin&#x2F;nologin\nsaslauth:x:994:76:Saslauthd user:&#x2F;run&#x2F;saslauthd:&#x2F;sbin&#x2F;nologin\ntss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin\nusbmuxd:x:113:113:usbmuxd user:&#x2F;:&#x2F;sbin&#x2F;nologin\nsaned:x:993:990:SANE scanner daemon user:&#x2F;usr&#x2F;share&#x2F;sane:&#x2F;sbin&#x2F;nologin\ncolord:x:992:988:User for colord:&#x2F;var&#x2F;lib&#x2F;colord:&#x2F;sbin&#x2F;nologin\nabrt:x:173:173::&#x2F;etc&#x2F;abrt:&#x2F;sbin&#x2F;nologin\ngeoclue:x:991:987:User for geoclue:&#x2F;var&#x2F;lib&#x2F;geoclue:&#x2F;sbin&#x2F;nologin\nntp:x:38:38::&#x2F;etc&#x2F;ntp:&#x2F;sbin&#x2F;nologin\nsetroubleshoot:x:990:986::&#x2F;var&#x2F;lib&#x2F;setroubleshoot:&#x2F;sbin&#x2F;nologin\nrpcuser:x:29:29:RPC Service User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nnfsnobody:x:65534:65534:Anonymous NFS User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nrtkit:x:172:172:RealtimeKit:&#x2F;proc:&#x2F;sbin&#x2F;nologin\npulse:x:171:171:PulseAudio System Daemon:&#x2F;var&#x2F;run&#x2F;pulse:&#x2F;sbin&#x2F;nologin\nsssd:x:989:983:User for sssd:&#x2F;:&#x2F;sbin&#x2F;nologin\nradvd:x:75:75:radvd user:&#x2F;:&#x2F;sbin&#x2F;nologin\ngdm:x:42:42::&#x2F;var&#x2F;lib&#x2F;gdm:&#x2F;sbin&#x2F;nologin\ngnome-initial-setup:x:988:982::&#x2F;run&#x2F;gnome-initial-setup&#x2F;:&#x2F;sbin&#x2F;nologin\ntcpdump:x:72:72::&#x2F;:&#x2F;sbin&#x2F;nologin\navahi:x:70:70:Avahi mDNS&#x2F;DNS-SD Stack:&#x2F;var&#x2F;run&#x2F;avahi-daemon:&#x2F;sbin&#x2F;nologin\nnginx:x:987:981:Nginx web server:&#x2F;var&#x2F;lib&#x2F;nginx:&#x2F;sbin&#x2F;nologin\n 打印 passwd 文件中包含 zsh 或者 bash 的行并显示行号(grep) ...\n1:root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n20:ryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh</code></pre>\n\n<h3 id=\"反向引用\"><a href=\"#反向引用\" class=\"headerlink\" title=\"反向引用\"></a>反向引用</h3><p><code>&amp;</code> 和 <code>\\1</code> 引用模式匹配到的整个串。区别：</p>\n<ul>\n<li><code>&amp;</code> 只能表示匹配到的完整字符串，只能引用整个字符串。</li>\n<li><code>\\1</code> 可以使用 <code>()</code> 将匹配到的不需要改变的部分括起来，小括号需要转义。（例如：如果只需要替换匹配到的字符串的一部分，这是只能使用 <code>\\1</code> ，然后将不需要改变的部分用括号括起来，替换时只替换括号外的）</li>\n</ul>\n<h3 id=\"测试-2\"><a href=\"#测试-2\" class=\"headerlink\" title=\"测试 2\"></a>测试 2</h3><h4 id=\"需求描述\"><a href=\"#需求描述\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>例如：有一个文件 <code>str</code>，内容如下。</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">hadAAp is a bigdata frame.\nSpark hadBBp Kaffa.\nPaper on hadCCp.\nGoogle hadEEp.</code></pre>\n\n<ol>\n<li>将文件中的 hadAAp, hadBBp, … hadEEp 后面加后缀 s。（hadAAp -&gt; hadAAps, hadEEp -&gt; hadEEps）</li>\n<li>将上一步改变后的文件中的 hadAAps, hadBBps, … hadEEps 后面加后缀 O 。（hadAAps -&gt; hadAApsO, hadEEps -&gt; hadEEpsO）</li>\n<li>将上一步改变后的文件中的 hadAApsO, hadBBpsO, … hadEEpsO 全部替换为 hadoop。</li>\n<li>将上一步改变后的文件中的 hadoop 全部替换为 HADOOP。</li>\n</ol>\n<h4 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li><p>替换两种操作：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ sed -i &#39;s&#x2F;had..p&#x2F;&amp;s&#x2F;g&#39; str # had..p 表示匹配 hadAAp, hadBBp, ... hadEEp 字符串，&amp; 引用 had..p 串\n$ sed -i &#39;s&#x2F;\\(had..p\\)&#x2F;\\1s&#x2F;g&#39; str # had..p 表示匹配 hadAAp, hadBBp, ... hadEEp 字符串，\\1 引用 had..p 串</code></pre></li>\n<li><p>匹配模式中存在变量时，建议使用双引号。</p>\n</li>\n</ol>\n<h4 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# sed 中的 command 练习 2\n\nfilepath&#x3D;$(\n    cd &quot;$(dirname &quot;$0&quot;)&quot;\n    pwd\n)\ntestpath&#x3D;&quot;$&#123;filepath&#125;&#x2F;test_dir&quot;\nfilename&#x3D;&quot;$&#123;testpath&#125;&#x2F;str&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction sed_str() &#123;\n    # 生成测试文件\n    mkdir -p $&#123;testpath&#125; &amp;&amp; cd $&#123;testpath&#125;\n    cat &gt;&gt;$&#123;filename&#125; &lt;&lt;EOF\nhadAAp is a bigdata frame.\nSpark hadBBp Kaffa.\nPaper on hadCCp.\nGoogle hadEEp.\nEOF\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadAAp, hadBBp, ... hadEEp 后面加后缀 s ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;had..p&#x2F;&amp;s&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadAAps, hadBBps, ... hadEEps 后面加后缀 O ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;\\(had..ps\\)&#x2F;\\1O&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadAApsO, hadBBpsO, ... hadEEpsO 全部替换为 hadoop ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;\\(had\\).....&#x2F;\\1oop&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    old_str&#x3D;&quot;hadoop&quot;\n    new_str&#x3D;&quot;HADOOP&quot;\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadoop 全部替换为 HADOOP(使用单引号操作,变量不加单引号) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;$&#123;old_str&#125;&#x2F;$&#123;new_str&#125;&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    sed -i &quot;s&#x2F;HADOOP&#x2F;hadoop&#x2F;g&quot; $&#123;filename&#125;\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadoop 全部替换为 HADOOP(使用双引号操作) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &quot;s&#x2F;$&#123;old_str&#125;&#x2F;$&#123;new_str&#125;&#x2F;g&quot; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    sed -i &quot;s&#x2F;HADOOP&#x2F;hadoop&#x2F;g&quot; $&#123;filename&#125;\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadoop 全部替换为 HADOOP(使用单引号操作,变量加单引号) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;&#39;$&#123;old_str&#125;&#39;&#x2F;&#39;$&#123;new_str&#125;&#39;&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    # 删除测试文件夹\n    cd $&#123;filepath&#125; &amp;&amp; rm -rf test_dir&#x2F;\n&#125;\n\nsed_str</code></pre>\n\n<h4 id=\"脚本执行\"><a href=\"#脚本执行\" class=\"headerlink\" title=\"脚本执行\"></a>脚本执行</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">打印 str 文件内容 ...\n    1    hadAAp is a bigdata frame.\n    2    Spark hadBBp Kaffa.\n    3    Paper on hadCCp.\n    4    Google hadEEp.\n将 str 文件中的 hadAAp, hadBBp, ... hadEEp 后面加后缀 s ...\n打印 str 文件内容 ...\n    1    hadAAps is a bigdata frame.\n    2    Spark hadBBps Kaffa.\n    3    Paper on hadCCps.\n    4    Google hadEEps.\n将 str 文件中的 hadAAps, hadBBps, ... hadEEps 后面加后缀 O ...\n打印 str 文件内容 ...\n    1    hadAApsO is a bigdata frame.\n    2    Spark hadBBpsO Kaffa.\n    3    Paper on hadCCpsO.\n    4    Google hadEEpsO.\n将 str 文件中的 hadAApsO, hadBBpsO, ... hadEEpsO 全部替换为 hadoop ...\n打印 str 文件内容 ...\n    1    hadoop is a bigdata frame.\n    2    Spark hadoop Kaffa.\n    3    Paper on hadoop.\n    4    Google hadoop.\n将 str 文件中的 hadoop 全部替换为 HADOOP(使用单引号操作,变量不加单引号) ...\n打印 str 文件内容 ...\n    1    hadoop is a bigdata frame.\n    2    Spark hadoop Kaffa.\n    3    Paper on hadoop.\n    4    Google hadoop.\n将 str 文件中的 hadoop 全部替换为 HADOOP(使用双引号操作) ...\n打印 str 文件内容 ...\n    1    HADOOP is a bigdata frame.\n    2    Spark HADOOP Kaffa.\n    3    Paper on HADOOP.\n    4    Google HADOOP.\n将 str 文件中的 hadoop 全部替换为 HADOOP(使用单引号操作,变量加单引号) ...\n打印 str 文件内容 ...\n    1    HADOOP is a bigdata frame.\n    2    Spark HADOOP Kaffa.\n    3    Paper on HADOOP.\n    4    Google HADOOP.</code></pre>\n\n<h2 id=\"利用-sed-查找文件内容\"><a href=\"#利用-sed-查找文件内容\" class=\"headerlink\" title=\"利用 sed 查找文件内容\"></a>利用 sed 查找文件内容</h2><h3 id=\"查询命令对照表\"><a href=\"#查询命令对照表\" class=\"headerlink\" title=\"查询命令对照表\"></a>查询命令对照表</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1p</td>\n<td>打印第 1 行内容</td>\n</tr>\n<tr>\n<td>1,10p</td>\n<td>打印第 1 行到第 10 行内容</td>\n</tr>\n<tr>\n<td>1,1+5p</td>\n<td>打印第 1 行到第 6 行内容</td>\n</tr>\n<tr>\n<td>/pattern1/p</td>\n<td>打印包含 pattern1 的行内容</td>\n</tr>\n<tr>\n<td>/patttern1/,/pattern2/p</td>\n<td>打印从包含 pattern1 到 包含 pattern2 的行内容</td>\n</tr>\n<tr>\n<td>/pattern1/,10p</td>\n<td>打印从包含 patttern1 到第 10 行的内容</td>\n</tr>\n<tr>\n<td>10,/pattern1/p</td>\n<td>打印第 10 行到包含 pattern1 的行内容</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">1. 打印 &#x2F;etc&#x2F;passwd 文件中第 20 行内容\n\n   sed -n &#39;20p&#39; &#x2F;etc&#x2F;passwd\n\n2. 打印 &#x2F;etc&#x2F;passwd 文件中第 8 - 20 行内容\n\n   sed -n &#39;8, 20p&#39; &#x2F;etc&#x2F;passwd\n\n3. 打印 &#x2F;etc&#x2F;passwd 文件中第 8, +5 行内容\n\n   sed -n &#39;8, +5p&#39; &#x2F;etc&#x2F;passwd\n\n4. 打印 &#x2F;etc&#x2F;passwd 文件中包含 zsh 或者 bash 的行\n\n   sed -n -e &#39;&#x2F;bash&#x2F;p&#39; -e &#39;&#x2F;zsh&#x2F;p&#39; &#x2F;etc&#x2F;passwd\n\n5. 打印 &#x2F;etc&#x2F;passwd 文件中包含 zsh 或者 bash 的行(使用扩展正则表达式)\n\n   sed -n -r &#39;&#x2F;bash|zsh&#x2F;p&#39; &#x2F;etc&#x2F;passwd\n\n6. 打印 &#x2F;etc&#x2F;passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行\n\n   sed -n &#39;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#39; &#x2F;etc&#x2F;passwd\n\n7. 打印 &#x2F;etc&#x2F;passwd 中以 root 开始的行\n\n   sed -n &#39;&#x2F;^root&#x2F;p&#39; &#x2F;etc&#x2F;passwd\n\n8. 打印 &#x2F;etc&#x2F;passwd 中从 mail 开始的行到 ftp 开始的行\n\n   sed -n &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&#39; &#x2F;etc&#x2F;passwd\n\n9. 打印 &#x2F;etc&#x2F;passwd 中从第 4 行到以 shutdown 结束的行\n\n   sed -n &#39;4,&#x2F;shutdown$&#x2F;p&#39; &#x2F;etc&#x2F;passwd\n\n10. 打印 &#x2F;etc&#x2F;passwd 中从以 bin 开始的行到第 6 行\n\n    sed -n &#39;&#x2F;^bin&#x2F;,6p&#39; &#x2F;etc&#x2F;passwd</code></pre>\n\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"需求描述-1\"><a href=\"#需求描述-1\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>处理一个类似 MySQL 配置文件 <code>my.cnf</code> 的文本，示例如下。</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"># this is read by the standalone daemon and embedded servers\n[client]\nport &#x3D; 3306\nsocket &#x3D; &#x2F;tmp&#x2F;mysql.socket\n\n# this Segment Fot server\n[server]\ninnodb_buffer_pool_size &#x3D; 91750M\ninnodb_buffer_pool_instances &#x3D; 8\ninnodb_buffer_pool_load_at_startup &#x3D; 1\ninnodb_buffer_pool_dump_at_shutdown &#x3D; 1\ninnodb_data_file_path &#x3D; ibdata1:1G:autoextend\ninnodb_flush_log_at_trx_commit &#x3D; 1\ninnodb_log_buffer_size &#x3D; 32M\ninnodb_log_file_size &#x3D; 2G\ninnodb_log_files_in_group &#x3D; 2\ninnodb_max_undo_log_size &#x3D; 4G\ninnodb_undo_directory &#x3D; undolog\ninnodb_undo_tablespaces &#x3D; 95\n\n# this is only for the mysqld standalone daemon\n[mysqld]\nport &#x3D; 3306\nsocket &#x3D; &#x2F;tmp&#x2F;mysql.sock\nbasedir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql\ndatadir &#x3D; &#x2F;data&#x2F;mysql\npid-file &#x3D; &#x2F;data&#x2F;mysql&#x2F;mysql.pid\nuser &#x3D; mysql\nbind-address &#x3D; 0.0.0.0\nsort_buffer_size &#x3D; 16M\njoin_buffer_size &#x3D; 16M\nthread_cache_size &#x3D; 3000\ninteractive_timeout &#x3D; 600\n\n# this Segment For mysqld safe\n[mysqld safe]\nlog-error &#x3D; &#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.log\npid-file &#x3D; &#x2F;var&#x2F;run&#x2F;mariadb&#x2F;mariadb.pid\nmax_connections &#x3D; 1000\nopen_files_limit &#x3D; 65535\nthread_stack &#x3D; 512K\nexternal-locking &#x3D; FALSE\nmax_allowed_packet &#x3D; 32M\n\n# this is only for embedded server\n[embedded]\ngtid_mode &#x3D; on\nenforce_gtid_consistency &#x3D; 1\nlog_slave_updates\nslave-rows-search-algorithms &#x3D; &#39;INDEX_SCAN, HASH_SCAN&#39;\nbinlog_format &#x3D; row\nbinlog_checksum &#x3D; 1\nrelay_log_recovery &#x3D; 1\nrelay-log-purge &#x3D; 1\n\n# use this group for options that older servers don&#39;t understand\n[mysqld-5.5]\nkey_buffer_size &#x3D; 32M\nread_buffer_size &#x3D; 8M\nread_rnd_buffer_size &#x3D; 16M\nbulk_insert_buffer_size &#x3D; 64M\nmyisam_sort_buffer_size &#x3D; 128M\nmyisam_max_sort_file_size &#x3D; 10G\nmyisam_repair_threads &#x3D; 1\nlock_wait_timeout &#x3D; 3600\nexplicit_defaults_for_timestamp &#x3D; 1</code></pre>\n\n<p>编写脚本实现以下功能：</p>\n<ol>\n<li>输出文件有几个段；</li>\n<li>针对每个段可以统计配置参数总个数。</li>\n</ol>\n<p>预想输出结果：</p>\n<pre class=\"line-numbers language-ini\" data-language=\"ini\"><code class=\"language-ini\">第 1 个配置项:      client 共有  2 个配置项.\n第 2 个配置项:      server 共有 12 个配置项.\n第 3 个配置项:      mysqld 共有 11 个配置项.\n第 4 个配置项: mysqld_safe 共有  7 个配置项.\n第 5 个配置项:    embedded 共有  8 个配置项.\n第 6 个配置项:  mysqld-5.5 共有  9 个配置项.\n\n ------ my.cnf 共有 6 个段. ------</code></pre>\n\n<h4 id=\"思路分析-1\"><a href=\"#思路分析-1\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li><p>function get_all_segment 获取所有段；</p>\n<ul>\n<li><p>grep 直接获取 [client] 字符串 <code>grep -E &quot;^\\[&quot; $&#123;filename&#125;</code></p>\n</li>\n<li><p>sed 直接获取 [client] 字符串, 然后将 ‘[‘ ‘]’ 替换为空 <code>sed -n &quot;/\\[.*\\]/p&quot; $&#123;filename&#125; | sed -e &quot;s/\\[//g&quot; -e &quot;s/\\]//g&quot;</code></p>\n</li>\n<li><p>直接使用 sed 反向引用获取 [client] 字符串内的 client 字段 <code>sed -n -e &quot;s/\\[\\(.*\\)\\]/\\1/gp&quot; $&#123;filename&#125;</code></p>\n</li>\n</ul>\n</li>\n<li><p>function count_items_in_segment 统计配置参数总个数；</p>\n<ul>\n<li>grep：使用 <code>sed &quot;//,//p&quot;</code> 区间匹配, 然后排除 [client]、空行、注释行, 最后统计。 <code>sed -n &quot;/\\[&quot;$1&quot;\\]/,/\\[.*\\]/p&quot; $&#123;filename&#125; | grep -v &quot;\\[.*\\]&quot; | grep -v &quot;^\\#&quot; | grep -v &quot;^$&quot; | wc -l)</code></li>\n<li>sed：使用 <code>sed &quot;//,//p&quot;</code> 区间匹配, 然后排除 [client]、空行、注释行, 最后统计。<code>$(sed -n &quot;/\\[&quot;$1&quot;\\]/,/\\[.*\\]/p&quot; $&#123;filename&#125; | grep -v &quot;\\[.*\\]&quot; | grep -v &quot;^\\#&quot; | grep -v &quot;^$&quot; | wc -l)</code></li>\n</ul>\n</li>\n</ol>\n<h4 id=\"测试代码-3\"><a href=\"#测试代码-3\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 处理 my.cnf 文件\n# 1. function get_all_segment 输出文件有几个段；\n# 2. function count_items_in_segment 针对每个段可以统计配置参数总个数。\n\nfilepath&#x3D;$(\n    cd &quot;$(dirname &quot;$0&quot;)&quot;\n    pwd\n)\nfilename&#x3D;&quot;$&#123;filepath&#125;&#x2F;my.cnf&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Blue_font_prefix&#x3D;&quot;\\033[34m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction create_my_cnf() &#123;\n\n    cat &gt;$&#123;filename&#125; &lt;&lt;EOF\n# this is read by the standalone daemon and embedded servers\n[client]\nport &#x3D; 3306\nsocket &#x3D; &#x2F;tmp&#x2F;mysql.socket\n\n# this Segment Fot server\n[server]\ninnodb_buffer_pool_size &#x3D; 91750M\ninnodb_buffer_pool_instances &#x3D; 8\ninnodb_buffer_pool_load_at_startup &#x3D; 1\ninnodb_buffer_pool_dump_at_shutdown &#x3D; 1\ninnodb_data_file_path &#x3D; ibdata1:1G:autoextend\ninnodb_flush_log_at_trx_commit &#x3D; 1\ninnodb_log_buffer_size &#x3D; 32M\ninnodb_log_file_size &#x3D; 2G\ninnodb_log_files_in_group &#x3D; 2\ninnodb_max_undo_log_size &#x3D; 4G\ninnodb_undo_directory &#x3D; undolog\ninnodb_undo_tablespaces &#x3D; 95\n\n# this is only for the mysqld standalone daemon\n[mysqld]\nport &#x3D; 3306\nsocket &#x3D; &#x2F;tmp&#x2F;mysql.sock\nbasedir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql\ndatadir &#x3D; &#x2F;data&#x2F;mysql\npid-file &#x3D; &#x2F;data&#x2F;mysql&#x2F;mysql.pid\nuser &#x3D; mysql\nbind-address &#x3D; 0.0.0.0\nsort_buffer_size &#x3D; 16M\njoin_buffer_size &#x3D; 16M\nthread_cache_size &#x3D; 3000\ninteractive_timeout &#x3D; 600\n\n# this Segment For mysqld safe\n[mysqld_safe]\nlog-error &#x3D; &#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.log\npid-file &#x3D; &#x2F;var&#x2F;run&#x2F;mariadb&#x2F;mariadb.pid\nmax_connections &#x3D; 1000\nopen_files_limit &#x3D; 65535\nthread_stack &#x3D; 512K\nexternal-locking &#x3D; FALSE\nmax_allowed_packet &#x3D; 32M\n\n# this is only for embedded server\n[embedded]\ngtid_mode &#x3D; on\nenforce_gtid_consistency &#x3D; 1\nlog_slave_updates\nslave-rows-search-algorithms &#x3D; &#39;INDEX_SCAN, HASH_SCAN&#39;\nbinlog_format &#x3D; row\nbinlog_checksum &#x3D; 1\nrelay_log_recovery &#x3D; 1\nrelay-log-purge &#x3D; 1\n\n# use this group for options that older servers don&#39;t understand\n[mysqld-5.5]\nkey_buffer_size &#x3D; 32M\nread_buffer_size &#x3D; 8M\nread_rnd_buffer_size &#x3D; 16M\nbulk_insert_buffer_size &#x3D; 64M\nmyisam_sort_buffer_size &#x3D; 128M\nmyisam_max_sort_file_size &#x3D; 10G\nmyisam_repair_threads &#x3D; 1\nlock_wait_timeout &#x3D; 3600\nexplicit_defaults_for_timestamp &#x3D; 1\nEOF\n&#125;\n\nfunction get_all_segment() &#123;\n\n    # grep 直接获取 [client] 字符串\n    # grep -E &quot;^\\[&quot; $&#123;filename&#125;\n\n    # sed 直接获取 [client] 字符串, 然后将 &#39;[&#39; &#39;]&#39; 替换为空\n    # sed -n &quot;&#x2F;\\[.*\\]&#x2F;p&quot; $&#123;filename&#125; | sed -e &quot;s&#x2F;\\[&#x2F;&#x2F;g&quot; -e &quot;s&#x2F;\\]&#x2F;&#x2F;g&quot;\n\n    #直接使用 sed 反向引用获取 [client] 字符串内的 client 字段\n    # sed -n -e &quot;s&#x2F;\\[\\(.*\\)\\]&#x2F;\\1&#x2F;gp&quot; $&#123;filename&#125;\n\n    echo -e &quot;$(sed -n -e &quot;s&#x2F;\\[\\(.*\\)\\]&#x2F;\\1&#x2F;gp&quot; $&#123;filename&#125;)&quot;\n\n&#125;\n\nfunction count_items_in_segment_grep() &#123;\n\n    # 使用 sed &quot;&#x2F;&#x2F;,&#x2F;&#x2F;p&quot; 区间匹配, 然后排除 [client]、空行、注释行, 最后统计\n    echo -e &quot;$(sed -n &quot;&#x2F;\\[&quot;$1&quot;\\]&#x2F;,&#x2F;\\[.*\\]&#x2F;p&quot; $&#123;filename&#125; | grep -v &quot;\\[.*\\]&quot; | grep -v &quot;^\\#&quot; | grep -v &quot;^$&quot; | wc -l)&quot;\n&#125;\n\nfunction count_items_in_segment_sed() &#123;\n\n    # 使用 sed &quot;&#x2F;&#x2F;,&#x2F;&#x2F;p&quot; 区间匹配, 然后排除 [client]、空行、注释行, 最后统计\n    echo -e &quot;$(sed -n &quot;&#x2F;\\[&quot;$1&quot;\\]&#x2F;,&#x2F;\\[.*\\]&#x2F;p&quot; $&#123;filename&#125; | sed &#39;&#x2F;\\[.*\\]&#x2F;d&#39; | sed &#39;&#x2F;^\\#&#x2F;d&#39; | sed &#39;&#x2F;^$&#x2F;d&#39; | wc -l)&quot;\n&#125;\n\nfunction main() &#123;\n\n    create_my_cnf\n    index&#x3D;0\n    for segment in $(get_all_segment); do\n        index&#x3D;$(($&#123;index&#125; + 1))\n        # echo -e &quot;第 $&#123;index&#125; 个配置项：$&#123;segment&#125; 共有 $(count_items_in_segment_sed $&#123;segment&#125;) 个配置项.&quot;\n        # echo -e &quot;第 $&#123;index&#125; 个配置项：$&#123;segment&#125; 共有 $(count_items_in_segment_grep $&#123;segment&#125;) 个配置项.&quot;\n        printf &quot;$&#123;Green_font_prefix&#125;第 %d 个配置项: %12s 共有 %2d 个配置项.(sed)$&#123;Font_color_suffix&#125;\\n&quot; $&#123;index&#125; $&#123;segment&#125; $(count_items_in_segment_sed $&#123;segment&#125;)\n        printf &quot;$&#123;Blue_font_prefix&#125;第 %d 个配置项: %12s 共有 %2d 个配置项.(grep)$&#123;Font_color_suffix&#125;\\n&quot; $&#123;index&#125; $&#123;segment&#125; $(count_items_in_segment_grep $&#123;segment&#125;)\n    done\n    echo -e &quot;\\n ------ my.cnf 共有 $&#123;index&#125; 个段. ------&quot;\n\n    # 删除文件\n    rm -rf $&#123;filename&#125;\n&#125;\n\nmain</code></pre>\n\n<h4 id=\"运行结果-3\"><a href=\"#运行结果-3\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">第 1 个配置项:      client 共有  2 个配置项.(sed)\n第 1 个配置项:      client 共有  2 个配置项.(grep)\n第 2 个配置项:      server 共有 12 个配置项.(sed)\n第 2 个配置项:      server 共有 12 个配置项.(grep)\n第 3 个配置项:      mysqld 共有 11 个配置项.(sed)\n第 3 个配置项:      mysqld 共有 11 个配置项.(grep)\n第 4 个配置项: mysqld_safe 共有  7 个配置项.(sed)\n第 4 个配置项: mysqld_safe 共有  7 个配置项.(grep)\n第 5 个配置项:    embedded 共有  8 个配置项.(sed)\n第 5 个配置项:    embedded 共有  8 个配置项.(grep)\n第 6 个配置项:  mysqld-5.5 共有  9 个配置项.(sed)\n第 6 个配置项:  mysqld-5.5 共有  9 个配置项.(grep)\n\n ------ my.cnf 共有 6 个段. ------</code></pre>\n\n<h2 id=\"利用-sed-删除文件内容\"><a href=\"#利用-sed-删除文件内容\" class=\"headerlink\" title=\"利用 sed 删除文件内容\"></a>利用 sed 删除文件内容</h2><h3 id=\"删除命令对照表\"><a href=\"#删除命令对照表\" class=\"headerlink\" title=\"删除命令对照表\"></a>删除命令对照表</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1d</td>\n<td>删除第 1 行内容</td>\n</tr>\n<tr>\n<td>1,10d</td>\n<td>删除第 1 行到第 10 行内容</td>\n</tr>\n<tr>\n<td>1,1+5d</td>\n<td>删除第 1 行到第 6 行内容</td>\n</tr>\n<tr>\n<td>/pattern1/d</td>\n<td>删除包含 pattern1 的行内容</td>\n</tr>\n<tr>\n<td>/patttern1/,/pattern2/d</td>\n<td>删除从包含 pattern1 到 包含 pattern2 的行内容</td>\n</tr>\n<tr>\n<td>/pattern1/,10d</td>\n<td>删除从包含 patttern1 到第 10 行的内容</td>\n</tr>\n<tr>\n<td>10,/pattern1/d</td>\n<td>删除第 10 行到包含 pattern1 的行内容</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">1. 删除 &#x2F;etc&#x2F;passwd 文件中第 20 行内容\n\n   sed -i &#39;20d&#39; &#x2F;etc&#x2F;passwd\n\n2. 删除 &#x2F;etc&#x2F;passwd 文件中第 8 - 20 行内容\n\n   sed -i &#39;8, 20d&#39; &#x2F;etc&#x2F;passwd\n\n3. 删除 &#x2F;etc&#x2F;passwd 文件中第 8, +5 行内容\n\n   sed -i &#39;8, +5d&#39; &#x2F;etc&#x2F;passwd\n\n4. 删除 &#x2F;etc&#x2F;passwd 文件中包含 zsh 或者 bash 的行\n\n   sed -i -e &#39;&#x2F;bash&#x2F;d&#39; -e &#39;&#x2F;zsh&#x2F;d&#39; &#x2F;etc&#x2F;passwd\n\n5. 删除 &#x2F;etc&#x2F;passwd 文件中包含 zsh 或者 bash 的行(使用扩展正则表达式)\n\n   sed -i -r &#39;&#x2F;bash|zsh&#x2F;d&#39; &#x2F;etc&#x2F;passwd\n\n6. 删除 &#x2F;etc&#x2F;passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行\n\n   sed -i &#39;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#39; &#x2F;etc&#x2F;passwd\n\n7. 删除 &#x2F;etc&#x2F;passwd 中以 root 开始的行\n\n   sed -i &#39;&#x2F;^root&#x2F;d&#39; &#x2F;etc&#x2F;passwd\n\n8. 删除 &#x2F;etc&#x2F;passwd 中从 mail 开始的行到 ftp 开始的行\n\n   sed -i &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;d&#39; &#x2F;etc&#x2F;passwd\n\n9. 删除 &#x2F;etc&#x2F;passwd 中从第 4 行到以 shutdown 结束的行\n\n   sed -i &#39;4,&#x2F;shutdown$&#x2F;d&#39; &#x2F;etc&#x2F;passwd\n\n10. 删除 &#x2F;etc&#x2F;passwd 中从以 bin 开始的行到第 6 行\n\n    sed -i &#39;&#x2F;^bin&#x2F;,6d&#39; &#x2F;etc&#x2F;passwd</code></pre>\n\n<h3 id=\"练习-1\"><a href=\"#练习-1\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"需求描述-2\"><a href=\"#需求描述-2\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>处理 nginx 的配置文件 <code>nginx.conf</code> ，文件内容如下：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"># For more information on configuration, see:\n#   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;\n#   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;\n\nuser nginx;\nworker_processes auto;\nerror_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;\npid &#x2F;run&#x2F;nginx.pid;\n\n# Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.\ninclude &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;\n\nevents &#123;\n    worker_connections 1024;\n&#125;\n\nhttp &#123;\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\n    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;\n    default_type        application&#x2F;octet-stream;\n\n    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.\n    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include\n    # for more information.\n    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;\n\n    server &#123;\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n\n        # Load configuration files for the default server block.\n        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n\n        location &#x2F; &#123;\n        &#125;\n\n        error_page 404 &#x2F;404.html;\n        location &#x3D; &#x2F;404.html &#123;\n        &#125;\n\n        error_page 500 502 503 504 &#x2F;50x.html;\n        location &#x3D; &#x2F;50x.html &#123;\n        &#125;\n    &#125;\n\n# Settings for a TLS enabled server.\n#\n#    server &#123;\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n#\n#        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;\n#        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n#\n#        location &#x2F; &#123;\n#        &#125;\n#\n#        error_page 404 &#x2F;404.html;\n#        location &#x3D; &#x2F;404.html &#123;\n#        &#125;\n#\n#        error_page 500 502 503 504 &#x2F;50x.html;\n#        location &#x3D; &#x2F;50x.html &#123;\n#        &#125;\n#    &#125;\n\n&#125;</code></pre>\n\n<p>编写脚本实现以下功能：</p>\n<ol>\n<li>删除配置文件中的所有注释行和空行。</li>\n<li>在配置文件中所有不以 <code>#</code> 开头的行前添加 <code>*</code> 符号。注意：以 <code>#</code> 开头的行不添加。</li>\n</ol>\n<h4 id=\"思路分析-2\"><a href=\"#思路分析-2\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">function delete_blank_comment_line # 删除空行和注释行\nfunction add_star_before_line # 行前添加 * 号</code></pre>\n\n<ol>\n<li>删除注释行。注释行分两种：<ul>\n<li>以 <code>#</code> 号开头的行：<code>sed -i &#39;/^\\#/d&#39; $&#123;filename&#125;</code></li>\n<li>以 空格开头(一个或多个) + <code>#</code> 号的行：<code>sed -i &#39;/[:blank:]*\\#/d&#39; $&#123;filename&#125;</code></li>\n</ul>\n</li>\n<li>删除空行。空行：<code>sed -i &#39;/^$/d&#39; $&#123;filename&#125;</code></li>\n<li>不以 <code>#</code> 开头的行前添加 <code>*</code> 符号：<code>sed -i &#39;s/\\(^[^\\#]\\)/*\\1/g&#39; $&#123;filename&#125;</code></li>\n<li>空行前添加 <code>*</code> 符号：<code>sed -i &#39;s/^$/*&amp;/g&#39; $&#123;filename&#125;</code></li>\n</ol>\n<h4 id=\"脚本编写\"><a href=\"#脚本编写\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 处理 nginx.conf 文件\n# 1. function delete_blank_comment_line 删除空行和注释行\n# 2. function add_star_before_line 行前添加 * 号\n\nfilepath&#x3D;&quot;$PWD&quot;\nfilename&#x3D;&quot;$&#123;filepath&#125;&#x2F;nginx.conf&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Blue_font_prefix&#x3D;&quot;\\033[34m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction create_nginx_conf() &#123;\n    cat &gt;$&#123;filename&#125; &lt;&lt;EOF\n# For more information on configuration, see:\n#   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;\n#   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;\n\nuser nginx;\nworker_processes auto;\nerror_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;\npid &#x2F;run&#x2F;nginx.pid;\n\n# Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.\ninclude &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;\n\nevents &#123;\n    worker_connections 1024;\n&#125;\n\nhttp &#123;\n    log_format  main  &#39;\\$remote_addr - \\$remote_user [\\$time_local] &quot;\\$request&quot; &#39;\n                      &#39;\\$status \\$body_bytes_sent &quot;\\$http_referer&quot; &#39;\n                      &#39;&quot;\\$http_user_agent&quot; &quot;\\$http_x_forwarded_for&quot;&#39;;\n\n    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;\n    default_type        application&#x2F;octet-stream;\n\n    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.\n    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include\n    # for more information.\n    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;\n\n    server &#123;\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n\n        # Load configuration files for the default server block.\n        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n\n        location &#x2F; &#123;\n        &#125;\n\n        error_page 404 &#x2F;404.html;\n        location &#x3D; &#x2F;404.html &#123;\n        &#125;\n\n        error_page 500 502 503 504 &#x2F;50x.html;\n        location &#x3D; &#x2F;50x.html &#123;\n        &#125;\n    &#125;\n\n# Settings for a TLS enabled server.\n#\n#    server &#123;\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n#\n#        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;\n#        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n#\n#        location &#x2F; &#123;\n#        &#125;\n#\n#        error_page 404 &#x2F;404.html;\n#        location &#x3D; &#x2F;404.html &#123;\n#        &#125;\n#\n#        error_page 500 502 503 504 &#x2F;50x.html;\n#        location &#x3D; &#x2F;50x.html &#123;\n#        &#125;\n#    &#125;\n\n&#125;\nEOF\n&#125;\n\nfunction delete_blank_comment_line() &#123;\n    create_nginx_conf\n    echo -e &quot;$&#123;Blue_font_prefix&#125; ------ 删除空行和注释行后的 nginx.conf 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot;\n    sed -i &#39;&#x2F;[:blank:]*\\#&#x2F;d;&#x2F;^$&#x2F;d&#39; $&#123;filename&#125;\n    cat -n $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;\n&#125;\n\nfunction add_star_before_line() &#123;\n    create_nginx_conf\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 删除空行和注释行后的 nginx.conf 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot;\n    sed -i &#39;s&#x2F;\\(^[^\\#]\\)&#x2F;*\\1&#x2F;g&#39; $&#123;filename&#125;\n    sed -i &#39;s&#x2F;^$&#x2F;*&amp;&#x2F;g&#39; $&#123;filename&#125;\n    cat -n $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;\n&#125;\n\ndelete_blank_comment_line\nadd_star_before_line</code></pre>\n\n<h4 id=\"运行结果-4\"><a href=\"#运行结果-4\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">------ 删除空行和注释行后的 nginx.conf 文件内容 ------\n\n    1    user nginx;\n    2    worker_processes auto;\n    3    error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;\n    4    pid &#x2F;run&#x2F;nginx.pid;\n    5    include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;\n    6    events &#123;\n    7        worker_connections 1024;\n    8    &#125;\n    9    http &#123;\n   10        log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n   11                          &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n   12                          &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n   13        access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;\n   14        sendfile            on;\n   15        tcp_nopush          on;\n   16        tcp_nodelay         on;\n   17        keepalive_timeout   65;\n   18        types_hash_max_size 2048;\n   19        include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;\n   20        default_type        application&#x2F;octet-stream;\n   21        include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;\n   22        server &#123;\n   23            listen       80 default_server;\n   24            listen       [::]:80 default_server;\n   25            server_name  _;\n   26            root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n   27            include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n   28            location &#x2F; &#123;\n   29            &#125;\n   30            error_page 404 &#x2F;404.html;\n   31            location &#x3D; &#x2F;404.html &#123;\n   32            &#125;\n   33            error_page 500 502 503 504 &#x2F;50x.html;\n   34            location &#x3D; &#x2F;50x.html &#123;\n   35            &#125;\n   36        &#125;\n   37    &#125;\n\n------ 删除空行和注释行后的 nginx.conf 文件内容 ------\n\n    1    # For more information on configuration, see:\n    2    #   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;\n    3    #   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;\n    4    *\n    5    *user nginx;\n    6    *worker_processes auto;\n    7    *error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;\n    8    *pid &#x2F;run&#x2F;nginx.pid;\n    9    *\n   10    # Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.\n   11    *include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;\n   12    *\n   13    *events &#123;\n   14    *    worker_connections 1024;\n   15    *&#125;\n   16    *\n   17    *http &#123;\n   18    *    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n   19    *                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n   20    *                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n   21    *\n   22    *    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;\n   23    *\n   24    *    sendfile            on;\n   25    *    tcp_nopush          on;\n   26    *    tcp_nodelay         on;\n   27    *    keepalive_timeout   65;\n   28    *    types_hash_max_size 2048;\n   29    *\n   30    *    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;\n   31    *    default_type        application&#x2F;octet-stream;\n   32    *\n   33    *    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.\n   34    *    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include\n   35    *    # for more information.\n   36    *    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;\n   37    *\n   38    *    server &#123;\n   39    *        listen       80 default_server;\n   40    *        listen       [::]:80 default_server;\n   41    *        server_name  _;\n   42    *        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n   43    *\n   44    *        # Load configuration files for the default server block.\n   45    *        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n   46    *\n   47    *        location &#x2F; &#123;\n   48    *        &#125;\n   49    *\n   50    *        error_page 404 &#x2F;404.html;\n   51    *        location &#x3D; &#x2F;404.html &#123;\n   52    *        &#125;\n   53    *\n   54    *        error_page 500 502 503 504 &#x2F;50x.html;\n   55    *        location &#x3D; &#x2F;50x.html &#123;\n   56    *        &#125;\n   57    *    &#125;\n   58    *\n   59    # Settings for a TLS enabled server.\n   60    #\n   61    #    server &#123;\n   62    #        listen       443 ssl http2 default_server;\n   63    #        listen       [::]:443 ssl http2 default_server;\n   64    #        server_name  _;\n   65    #        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n   66    #\n   67    #        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;\n   68    #        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;\n   69    #        ssl_session_cache shared:SSL:1m;\n   70    #        ssl_session_timeout  10m;\n   71    #        ssl_ciphers HIGH:!aNULL:!MD5;\n   72    #        ssl_prefer_server_ciphers on;\n   73    #\n   74    #        # Load configuration files for the default server block.\n   75    #        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n   76    #\n   77    #        location &#x2F; &#123;\n   78    #        &#125;\n   79    #\n   80    #        error_page 404 &#x2F;404.html;\n   81    #        location &#x3D; &#x2F;404.html &#123;\n   82    #        &#125;\n   83    #\n   84    #        error_page 500 502 503 504 &#x2F;50x.html;\n   85    #        location &#x3D; &#x2F;50x.html &#123;\n   86    #        &#125;\n   87    #    &#125;\n   88    *\n   89    *&#125;</code></pre>\n\n<h2 id=\"利用-sed-修改文件内容\"><a href=\"#利用-sed-修改文件内容\" class=\"headerlink\" title=\"利用 sed 修改文件内容\"></a>利用 sed 修改文件内容</h2><h3 id=\"修改命令对照表\"><a href=\"#修改命令对照表\" class=\"headerlink\" title=\"修改命令对照表\"></a>修改命令对照表</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1s/old/new</td>\n<td>替换第 1 行内容中第一个 old 替换为 new</td>\n</tr>\n<tr>\n<td>1,10s/old/new</td>\n<td>替换第 1 行到第 10 行内容中第一个 old 替换为 new</td>\n</tr>\n<tr>\n<td>1,1+5s/old/new</td>\n<td>替换第 1 行到第 6 行内容中第一个 old 替换为 new</td>\n</tr>\n<tr>\n<td>/pattern1/s/old/new</td>\n<td>替换包含 pattern1 的行内容中第一个 old 替换为 new</td>\n</tr>\n<tr>\n<td>/patttern1/,/pattern2/s/old/new</td>\n<td>替换从包含 pattern1 到 包含 pattern2 的行内容中第一个 old 替换为 new</td>\n</tr>\n<tr>\n<td>/pattern1/,10s/old/new</td>\n<td>替换从包含 patttern1 到第 10 行的内容中第一个 old 替换为 new</td>\n</tr>\n<tr>\n<td>10,/pattern1/s/old/new</td>\n<td>替换第 10 行到包含 pattern1 的行内容中第一个 old 替换为 new</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">1. 替换 passwd 文件中第 1 行内容中第一个 root 替换为 ROOT\n\n   sed -i &#39;1s&#x2F;root&#x2F;ROOT&#39; passwd\n\n2. 替换 passwd 文件中第 5 - 10 行内容中所有的 &#x2F;sbin&#x2F;nologin 替换为 &#x2F;bin&#x2F;bash\n\n   sed -i &#39;5, 20s&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;\\&#x2F;bin\\&#x2F;bash&#x2F;g&#39; passwd\n\n3. 替换 passwd 文件中第 5, +5 行( 5 - 11 )内容中所有的 games 替换为 movies(games 在 11 行)\n\n   sed -i &#39;5, +5s&#x2F;games&#x2F;movies&#x2F;g&#39; passwd\n\n4. 替换 passwd 文件中包含 zsh 或者 bash 的行内容中所有的 zsh|bash 替换为 powershell\n\n   sed -i -e &#39;&#x2F;bash&#x2F;s&#x2F;bash&#x2F;powershell&#x2F;g&#39; -e &#39;&#x2F;zsh&#x2F;s&#x2F;zsh&#x2F;powershell&#x2F;g&#39; passwd\n\n5. 替换 passwd 文件中包含 zsh 或者 bash 的行内容中所有的 bin 替换为 BIN(使用扩展正则表达式)\n\n   sed -i -r &#39;&#x2F;bash|zsh&#x2F;s&#x2F;bin&#x2F;bin&#x2F;g&#39; passwd\n\n6. 替换 passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行内容中第一个 &#x2F;sbin&#x2F;nologin 替换为 &#x2F;bin&#x2F;zsh\n\n   sed -i &#39;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#x2F;s&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;\\&#x2F;bin\\&#x2F;zsh&#39; passwd\n\n7. 替换 passwd 中以 root 开始的行内容中所有的 root 替换为 jaime\n\n   sed -i &#39;&#x2F;^root&#x2F;s&#x2F;root&#x2F;jaime&#x2F;g&#39; passwd\n\n8. 替换 passwd 中从 mail 开始的行到 ftp 开始的行中所有的 &#x2F;sbin&#x2F;nologin 替换为 &#x2F;bin&#x2F;bash\n\n   sed -i &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;s&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;\\&#x2F;bin\\&#x2F;bash&#x2F;g&#39; passwd\n\n9. 替换 passwd 中从第 4 行到以 shutdown 结束的行中所有的 nologin 替换为 zsh\n\n   sed -i &#39;4,&#x2F;shutdown$&#x2F;s&#x2F;nologin&#x2F;zsh&#x2F;g&#39; passwd\n\n10. 替换 passwd 中从以 bin 开始的行到第 6 行中第 2 个开始所有的 bin 替换为 BIN\n\n    sed -i &#39;&#x2F;^bin&#x2F;,6s&#x2F;bin&#x2F;BIN&#x2F;2g&#39; passwd</code></pre>\n\n<h3 id=\"练习-2\"><a href=\"#练习-2\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"需求描述-3\"><a href=\"#需求描述-3\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>处理密码文件 <code>password</code> ，文件内容如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\nG.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\nL8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\nJB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\nluff-famed-assault-zooid-heighten-mummer-epitome-coke\nlawmaker-rerun-ratchet-grotto-floodlit-glitter-mock-nebulous\nvermin-opine-bunk-piquant-crabby-masterly-halcyon-oatmeal\nBuyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\nBreadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\nWill-olin-acrylic-try-stasis-salivate-hummock-convolve</code></pre>\n\n<p>编写脚本实现以下功能：</p>\n<ol>\n<li>删除文件中的数字。</li>\n<li>小写字母转大写。</li>\n<li>大写字母转小写。</li>\n<li>字母大小写反转。</li>\n</ol>\n<h4 id=\"思路分析-3\"><a href=\"#思路分析-3\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1. function delete_number # 删除文件中的数字\n2. function to_uppercase # 小写字母转大写\n3. function to_lowercase # 大写字母转小写\n4. function reverse_string_case # 字母大小写反转</code></pre>\n\n<h4 id=\"脚本编写-1\"><a href=\"#脚本编写-1\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 处理 password 文件\n# 1. function delete_number # 删除文件中的数字\n# 2. function to_uppercase 小写字母转大写\n# 3. function to_lowercase 大写字母转小写\n# 4. function reverse_string_case 字母大小写反转\n\nfilepath&#x3D;&quot;$PWD&quot;\nfilename&#x3D;&quot;$&#123;filepath&#125;&#x2F;password&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Blue_font_prefix&#x3D;&quot;\\033[34m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction create_password() &#123;\n    cat &gt;$&#123;filename&#125; &lt;&lt;EOF\nLUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\nG.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\nL8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\nJB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\nluff-famed-assault-zooid-heighten-mummer-epitome-coke\nlawmaker-rerun-ratchet-grotto-floodlit-glitter-mock-nebulous\nvermin-opine-bunk-piquant-crabby-masterly-halcyon-oatmeal\nBuyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\nBreadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\nWill-olin-acrylic-try-stasis-salivate-hummock-convolve\nEOF\n&#125;\nfunction delete_number() &#123;\n    create_password &amp;&amp; cp $&#123;filename&#125; $&#123;filename&#125;.bak\n    echo -e &quot;$&#123;Green_font_prefix&#125; ------ 删除数字后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;[0-9]*&#x2F;&#x2F;g&#39; $&#123;filename&#125;\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n&#125;\n\nfunction to_uppercase() &#123;\n    create_password &amp;&amp; cp $&#123;filename&#125; $&#123;filename&#125;.bak\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 小写字母转大写后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;[a-z]&#x2F;\\u&amp;&#x2F;g&#39; $&#123;filename&#125;\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n\n    create_password &amp;&amp; cp $&#123;filename&#125; $&#123;filename&#125;.bak\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 第一个小写字母转大写后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;\\b[a-z]&#x2F;\\u&amp;&#x2F;g&#39; $&#123;filename&#125;\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n&#125;\n\nfunction to_lowercase() &#123;\n    create_password &amp;&amp; cp $&#123;filename&#125; $&#123;filename&#125;.bak\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 大写字母转小写后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;[A-Z]&#x2F;\\l&amp;&#x2F;g&#39; $&#123;filename&#125;\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n\n    create_password &amp;&amp; cp $&#123;filename&#125; $&#123;filename&#125;.bak\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 第一个大写字母转小写后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;\\b[A-Z]&#x2F;\\l&amp;&#x2F;g&#39; $&#123;filename&#125;\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n&#125;\n\nfunction reverse_string_case() &#123;\n    create_password\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 大小写互转后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot;\n    cat $&#123;filename&#125; | tr &#39;[a-zA-Z]&#39; &#39;[A-Za-z]&#39; &gt;$&#123;filename&#125;.bak\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n&#125;\n\ndelete_number\nto_uppercase\nto_lowercase\nreverse_string_case</code></pre>\n\n<h4 id=\"运行结果-5\"><a href=\"#运行结果-5\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"> ------ 删除数字后的 password 文件内容 ------\n\n1,6c1,6\n&lt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&lt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&lt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&lt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&lt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&lt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n---\n&gt; LUD?N\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?NZJ-psgC?QHwY,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&gt; G.t*pk_pbAAWBmJpZMZXoGRaeMZab.nVrtAEM~a?_my@CWg!eEpwMdiTz\n&gt; ,Pyv?]jEU,NPAaX\\&gt;cR#x,wgxX\\&gt;HCD\\&gt;@TXFNkzawsNud~PpuZiPemGh&#125;rxbx\n&gt; dmJBswvFxwo&#125;mNFmqtmZ:BmLzLdQE+QH&#125;,YEZwuVET.iZtLmu,bHz\n&gt; Li+k\\)vQHfF:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^?mXPssYGMT@E_XwBCG-B\n&gt; JB\\&gt;&#x3D;H!usea!fwPZQWnt,,HtGJo&#x3D;cV%t*!N-mQep\\&gt;]A*TMJ\\&gt;%FU_%^W!\n\n ------ 小写字母转大写后的 password 文件内容 ------\n\n1,12c1,12\n&lt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&lt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&lt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&lt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&lt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&lt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n&lt; luff-famed-assault-zooid-heighten-mummer-epitome-coke\n&lt; lawmaker-rerun-ratchet-grotto-floodlit-glitter-mock-nebulous\n&lt; vermin-opine-bunk-piquant-crabby-masterly-halcyon-oatmeal\n&lt; Buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&lt; Breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&lt; Will-olin-acrylic-try-stasis-salivate-hummock-convolve\n---\n&gt; LUD?N52\\&gt;*BJQ.KG*&#x3D;ZRBBY#GJVQV?N1ZJ-PSGC?QHW77Y2,F%U~UC:]&#125;P:J!XMJPO&#x3D;\n&gt; G.T*PK_PBAAWBM2JPZMZXOGR2AEMZAB6.NVR9TAE04M~A?8_MY@CWG!EEP5WM1DITZ\n&gt; ,PYV?]JEU,NPAA7X\\&gt;1CR#X5,WGXX\\&gt;HCD3\\&gt;@TX6FNKZA5WS7NUD~PPUZIPEMGH&#125;RXBX\n&gt; 37DMJBS3WVFXWO&#125;M76NFM91QTM1Z:BML6ZLDQE+QH&#125;,Y531EZWUVET.IZTLMU,BH0Z\n&gt; L8I+K\\)7VQHFF6:,TZDZH\\)A_ETZ.NJ-\\&gt;NXTU.CC,:OW^9?MXPSSYGM99T@E_XWBCG-B\n&gt; JB\\&gt;&#x3D;H!US6E12A!6FWPZQWNT,,HT8GJO&#x3D;CV%T5*!N-48MQEP\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n&gt; LUFF-FAMED-ASSAULT-ZOOID-HEIGHTEN-MUMMER-EPITOME-COKE\n&gt; LAWMAKER-RERUN-RATCHET-GROTTO-FLOODLIT-GLITTER-MOCK-NEBULOUS\n&gt; VERMIN-OPINE-BUNK-PIQUANT-CRABBY-MASTERLY-HALCYON-OATMEAL\n&gt; BUYOUT-MOLY-NITROGEN-KNOWHOW-FROTH-UNTIL-SAUNTER-HURD\n&gt; BREADTH-ORLANDO-URUGUAY-LAMPOON-CANE-ALBUMEN-ANTENNAE-JAPAN\n&gt; WILL-OLIN-ACRYLIC-TRY-STASIS-SALIVATE-HUMMOCK-CONVOLVE\n\n ------ 第一个小写字母转大写后的 password 文件内容 ------\n\n1,12c1,12\n&lt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&lt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&lt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&lt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&lt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&lt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n&lt; luff-famed-assault-zooid-heighten-mummer-epitome-coke\n&lt; lawmaker-rerun-ratchet-grotto-floodlit-glitter-mock-nebulous\n&lt; vermin-opine-bunk-piquant-crabby-masterly-halcyon-oatmeal\n&lt; Buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&lt; Breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&lt; Will-olin-acrylic-try-stasis-salivate-hummock-convolve\n---\n&gt; LUD?N52\\&gt;*BjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-PsgC?QHw77Y2,F%U~Uc:]&#125;P:J!XmjPo&#x3D;\n&gt; G.T*Pk_pbAAWBm2JpZMZXoGR2aeMZab6.NVr9tAE04M~A?8_my@CWg!EEp5wM1diTz\n&gt; ,Pyv?]JEU,NPAa7X\\&gt;1cR#X5,WgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;Rxbx\n&gt; 37dmJBs3wvFxwo&#125;M76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.IZtLmu,BH0z\n&gt; L8i+K\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;NXtU.CC,:Ow^9?MXPssYGM99T@E_XwBCG-B\n&gt; JB\\&gt;&#x3D;H!Us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;CV%T5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n&gt; Luff-Famed-Assault-Zooid-Heighten-Mummer-Epitome-Coke\n&gt; Lawmaker-Rerun-Ratchet-Grotto-Floodlit-Glitter-Mock-Nebulous\n&gt; Vermin-Opine-Bunk-Piquant-Crabby-Masterly-Halcyon-Oatmeal\n&gt; Buyout-Moly-Nitrogen-Knowhow-Froth-Until-Saunter-Hurd\n&gt; Breadth-Orlando-Uruguay-Lampoon-Cane-Albumen-Antennae-Japan\n&gt; Will-Olin-Acrylic-Try-Stasis-Salivate-Hummock-Convolve\n\n ------ 大写字母转小写后的 password 文件内容 ------\n\n1,6c1,6\n&lt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&lt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&lt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&lt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&lt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&lt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n---\n&gt; lud?n52\\&gt;*bjq.kg*&#x3D;zrbby#gjvqv?n1zj-psgc?qhw77y2,f%u~uc:]&#125;p:j!xmjpo&#x3D;\n&gt; g.t*pk_pbaawbm2jpzmzxogr2aemzab6.nvr9tae04m~a?8_my@cwg!eep5wm1ditz\n&gt; ,pyv?]jeu,npaa7x\\&gt;1cr#x5,wgxx\\&gt;hcd3\\&gt;@tx6fnkza5ws7nud~ppuzipemgh&#125;rxbx\n&gt; 37dmjbs3wvfxwo&#125;m76nfm91qtm1z:bml6zldqe+qh&#125;,y531ezwuvet.iztlmu,bh0z\n&gt; l8i+k\\)7vqhff6:,tzdzh\\)a_etz.nj-\\&gt;nxtu.cc,:ow^9?mxpssygm99t@e_xwbcg-b\n&gt; jb\\&gt;&#x3D;h!us6e12a!6fwpzqwnt,,ht8gjo&#x3D;cv%t5*!n-48mqep\\&gt;]0a*7tmj\\&gt;%fu_%^w4!\n10,12c10,12\n&lt; Buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&lt; Breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&lt; Will-olin-acrylic-try-stasis-salivate-hummock-convolve\n---\n&gt; buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&gt; breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&gt; will-olin-acrylic-try-stasis-salivate-hummock-convolve\n\n ------ 第一个大写字母转小写后的 password 文件内容 ------\n\n1,6c1,6\n&lt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&lt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&lt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&lt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&lt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&lt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n---\n&gt; lUD?n52\\&gt;*bjQ.kg*&#x3D;zrbbY#gJvQv?n1ZJ-psgC?qHw77Y2,f%u~uc:]&#125;p:j!xmjPo&#x3D;\n&gt; g.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@cWg!eEp5wM1diTz\n&gt; ,pyv?]jEU,nPAa7X\\&gt;1cR#x5,wgxX\\&gt;hCD3\\&gt;@tX6FNkza5ws7Nud~ppuZiPemGh&#125;rxbx\n&gt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:bmL6zLdQE+qH&#125;,y531EZwuVET.iZtLmu,bH0z\n&gt; l8i+k\\)7vQHfF6:,tZdZh\\)a_eTz.nJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@e_XwBCG-b\n&gt; jB\\&gt;&#x3D;h!us6e12a!6fwPZQWnt,,ht8GJo&#x3D;cV%t5*!n-48mQep\\&gt;]0A*7TMJ\\&gt;%fU_%^w4!\n10,12c10,12\n&lt; Buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&lt; Breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&lt; Will-olin-acrylic-try-stasis-salivate-hummock-convolve\n---\n&gt; buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&gt; breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&gt; will-olin-acrylic-try-stasis-salivate-hummock-convolve\n\n ------ 大小写互转后的 password 文件内容 ------\n\n1,12c1,12\n&lt; lud?n52\\&gt;*BJq.kG*&#x3D;zRBBy#gjVqV?n1zj-PSGc?qhW77y2,f%U~uC:]&#125;P:J!xMJpO&#x3D;\n&lt; g.T*PK_PBaawbM2jPzmzxOgr2AEmzAB6.NvR9Tae04m~A?8_MY@cwG!EeP5Wm1DItZ\n&lt; ,pYV?]Jeu,npaA7x\\&gt;1Cr#X5,WGXx\\&gt;hcd3\\&gt;@tx6fnKZA5WS7nUD~pPUzIpEMgH&#125;RXBX\n&lt; 37DMjbS3WVfXWO&#125;M76nfM91QTM1z:bMl6ZlDqe+qh&#125;,y531ezWUvet.IzTlMU,Bh0Z\n&lt; l8I+K\\)7VqhFf6:,tzDzH\\)a_EtZ.nj-\\&gt;NxTu.Cc,:OW^9?MxpSSygm99t@e_xWbcg-b\n&lt; jb\\&gt;&#x3D;h!US6E12A!6FWpzqwNT,,hT8gjO&#x3D;Cv%T5*!n-48MqEP\\&gt;]0a*7tmj\\&gt;%fu_%^w4!\n&lt; LUFF-FAMED-ASSAULT-ZOOID-HEIGHTEN-MUMMER-EPITOME-COKE\n&lt; LAWMAKER-RERUN-RATCHET-GROTTO-FLOODLIT-GLITTER-MOCK-NEBULOUS\n&lt; VERMIN-OPINE-BUNK-PIQUANT-CRABBY-MASTERLY-HALCYON-OATMEAL\n&lt; bUYOUT-MOLY-NITROGEN-KNOWHOW-FROTH-UNTIL-SAUNTER-HURD\n&lt; bREADTH-ORLANDO-URUGUAY-LAMPOON-CANE-ALBUMEN-ANTENNAE-JAPAN\n&lt; wILL-OLIN-ACRYLIC-TRY-STASIS-SALIVATE-HUMMOCK-CONVOLVE\n---\n&gt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&gt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&gt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&gt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&gt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&gt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n&gt; luff-famed-assault-zooid-heighten-mummer-epitome-coke\n&gt; lawmaker-rerun-ratchet-grotto-floodlit-glitter-mock-nebulous\n&gt; vermin-opine-bunk-piquant-crabby-masterly-halcyon-oatmeal\n&gt; Buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&gt; Breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&gt; Will-olin-acrylic-try-stasis-salivate-hummock-convolve</code></pre>\n\n<h2 id=\"利用-sed-追加文件内容\"><a href=\"#利用-sed-追加文件内容\" class=\"headerlink\" title=\"利用 sed 追加文件内容\"></a>利用 sed 追加文件内容</h2><h3 id=\"追加命令对照表\"><a href=\"#追加命令对照表\" class=\"headerlink\" title=\"追加命令对照表\"></a>追加命令对照表</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>匹配行后追加</td>\n</tr>\n<tr>\n<td>i</td>\n<td>匹配行前增加</td>\n</tr>\n<tr>\n<td>r</td>\n<td>外部文件读入，匹配行后追加</td>\n</tr>\n<tr>\n<td>w</td>\n<td>匹配行写入外部文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"示例详解\"><a href=\"#示例详解\" class=\"headerlink\" title=\"示例详解\"></a>示例详解</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">1. a 匹配行前追加 append\n\n    - passwd 文件第 10 行后面追加 &quot;Add Line Behind.&quot;\n        sed -i &quot;10a Add Line Behind.&quot; passwd\n    - passwd 文件第 10 - 20 行后追加 &quot;Test Line Behind.&quot;\n        sed -i &quot;10, 20a Test line Behind.&quot; passwd\n    - passwd 文件包含 &#x2F;bin&#x2F;bash 的行后面追加 &quot;Insert Line For &#x2F;bin&#x2F;bash Behind.&quot;\n        sed -i &quot;&#x2F;\\&#x2F;bin\\&#x2F;bash&#x2F;a Insert Line For &#x2F;bin&#x2F;bash Behind.&quot; passwd\n\n2. i 匹配行前插入 insert\n\n    - passwd 文件中以 yarn 开头的行前插入 &quot;Add Line Before.&quot;\n        sed -i &quot;&#x2F;^yarn&#x2F;i Add Line Before.&quot;\n    - passwd 文件每一行前面插入 &quot;Insert Line Before Every Line.&quot;\n        sed -i &quot;i Insert Line Before Every Line.&quot;\n\n3. r 外部文件读入，匹配行后追加\n\n    - 将 &#x2F;etc&#x2F;fstab 文件中的内容追加到 passwd 文件中第 20 行后面\n        sed -i &quot;20r &#x2F;etc&#x2F;fstab&quot; passwd\n    - 将 &#x2F;etc&#x2F;inittab 文件内容追加到 passwd 文件中包含 &#x2F;sbin&#x2F;nologin 的行后\n        sed -i &quot;&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;r &#x2F;etc&#x2F;inittab&quot; passwd\n    - 将 &#x2F;etc&#x2F;vconsole.conf 文件内容追加到 passwd 文件中以 ftp 开头的行到第 18 行\n        sed -i &quot;&#x2F;^ftp&#x2F;,18r &#x2F;etc&#x2F;vconsole.conf&quot; passwd\n\n4. w 匹配行写入外部文件\n\n    - 将 passwd 文件中包含 &#x2F;bin&#x2F;bash 的行追加到 &#x2F;tmp&#x2F;sed.txt 文件中\n        sed -i &quot;&#x2F;\\&#x2F;bin\\&#x2F;bash&#x2F;w &#x2F;tmp&#x2F;sed.txt&quot; passwd\n    - 将 passwd 文件中第 10 行开始到以 hdfs 开头的行区间内的所有内容全部追加到 &#x2F;tmp&#x2F;sed-1.txt 文件中\n        sed -i &quot;10,&#x2F;^hdfs&#x2F;w &#x2F;tmp&#x2F;sed-1.txt&quot; passwd</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文代码：<a href=\"https://github.com/JaimeZeng/learning-linux/314-shell-scripting/06-shell/\">06-shell</a></p></blockquote>\n","text":"本章主要讲解 Shell 中最核心的文本处理三剑客之 sed 的用法。 sed 的工作模式基础介绍 sed(Stream Editor)：流编辑器。对标准输出或文件逐行进行处理。 语法格式| | 格式 || —— | ————————————- | ——————————- || ...","link":"","photos":[],"count_time":{"symbolsCount":"89k","symbolsTime":"1:20"},"categories":[{"name":"Linux","slug":"Linux","count":7,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":7,"path":"api/tags/Linux.json"},{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sed-%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">sed 的工作模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">基础介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">语法格式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sed-%E7%9A%84%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">sed 的选项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">选项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">测试代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">运行结果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sed-%E4%B8%AD%E7%9A%84-pattern-%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">sed 中的 pattern 详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">匹配模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95-1\"><span class=\"toc-text\">测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">测试代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-1\"><span class=\"toc-text\">运行结果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#sed-%E4%B8%AD%E7%9A%84%E7%BC%96%E8%BE%91%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">sed 中的编辑命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E5%AF%B9%E7%85%A7%E8%A1%A8\"><span class=\"toc-text\">命令对照表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95-1\"><span class=\"toc-text\">测试 1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81-2\"><span class=\"toc-text\">测试代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-2\"><span class=\"toc-text\">运行结果</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%90%91%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">反向引用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95-2\"><span class=\"toc-text\">测试 2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99\"><span class=\"toc-text\">代码编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">脚本执行</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8-sed-%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">利用 sed 查找文件内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4%E5%AF%B9%E7%85%A7%E8%A1%A8\"><span class=\"toc-text\">查询命令对照表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-1\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-1\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81-3\"><span class=\"toc-text\">测试代码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-3\"><span class=\"toc-text\">运行结果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8-sed-%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">利用 sed 删除文件内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%91%BD%E4%BB%A4%E5%AF%B9%E7%85%A7%E8%A1%A8\"><span class=\"toc-text\">删除命令对照表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0-1\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-2\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-2\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99\"><span class=\"toc-text\">脚本编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-4\"><span class=\"toc-text\">运行结果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8-sed-%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">利用 sed 修改文件内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E5%91%BD%E4%BB%A4%E5%AF%B9%E7%85%A7%E8%A1%A8\"><span class=\"toc-text\">修改命令对照表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0-2\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-3\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-3\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-1\"><span class=\"toc-text\">脚本编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C-5\"><span class=\"toc-text\">运行结果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8-sed-%E8%BF%BD%E5%8A%A0%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">利用 sed 追加文件内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%BD%E5%8A%A0%E5%91%BD%E4%BB%A4%E5%AF%B9%E7%85%A7%E8%A1%A8\"><span class=\"toc-text\">追加命令对照表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">示例详解</span></a></li></ol></li></ol>","author":{"name":"JaimeZeng","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/JaimeZeng/cdn/main/blog/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":"https://github.com/JaimeZeng"}}},"mapped":true,"prev_post":{"title":"Linux 系统服务器禁止 root 用户登录","uid":"60594cec29f293a49a928359541eda5f","slug":"2020-11-12-Linux-云服务器禁止-root-用户登录","date":"2020-11-12T10:06:33.000Z","updated":"2021-09-01T16:19:13.147Z","comments":true,"path":"api/articles/2020-11-12-Linux-云服务器禁止-root-用户登录.json","keywords":null,"cover":[],"text":" Linux 账户下 root 账户属于超级用户，具有全权管理权，可以做任何事。如果误操作会产生很大的破坏性。如果被黑，对方得到 root 的权限就能够读取写入系统上的所有文件。为了避免这一现象，我们需要添加新的用户并赋予管理员权限。该用户想要获取 root 权限可以使用 sud...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"Linux","slug":"Linux","count":7,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":7,"path":"api/tags/Linux.json"}],"author":{"name":"JaimeZeng","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/JaimeZeng/cdn/main/blog/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":"https://github.com/JaimeZeng"}}}},"next_post":{"title":"文本处理命令 grep","uid":"a2787fdbc6396b9d6a932d66753ffcfb","slug":"2020-10-03-05_文本处理 grep","date":"2020-10-03T11:23:26.000Z","updated":"2021-09-01T16:19:13.147Z","comments":true,"path":"api/articles/2020-10-03-05_文本处理 grep.json","keywords":null,"cover":null,"text":"grepgrep 是”Global Regular Expressions Print“的首字母缩写词，意为全局正则表达式打印。grep 是一个逐行扫描指定文件或文件的程序，返回包含模式的行。模式是一种表达式，它通过将字符解释为元字符来指定一组字符串。例如，星号元字符（*）被解释...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"Linux","slug":"Linux","count":7,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":7,"path":"api/tags/Linux.json"},{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"}],"author":{"name":"JaimeZeng","slug":"blog-author","avatar":"https://cdn.staticaly.com/gh/JaimeZeng/cdn/main/blog/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":"https://github.com/JaimeZeng"}}}}}