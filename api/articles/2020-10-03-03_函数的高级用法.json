{"title":"函数的高级用法","uid":"45466a0fbcef37e512cea56b5a3634ff","slug":"2020-10-03-03_函数的高级用法","date":"2020-10-03T11:21:26.000Z","updated":"2021-08-28T16:49:26.486Z","comments":true,"path":"api/articles/2020-10-03-03_函数的高级用法.json","keywords":null,"cover":null,"content":"<p>讲解 Shell 中函数是如何定义和使用的、如何向函数传递参数、函数的返回值，并剖析和其他语言使用函数的区别；之后介绍如何调用函数、函数的作用域、如何进行递归调用以及函数库的概念，所有的讲解都会配合在真实环境演示，以帮助学员彻底理解…</p>\n<h2 id=\"函数的定义和使用\"><a href=\"#函数的定义和使用\" class=\"headerlink\" title=\"函数的定义和使用\"></a>函数的定义和使用</h2><h3 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h3><ul>\n<li>Linux Shell 中的函数和大多数编程语言中的函数一样。</li>\n<li>将相似的任务或代码封装到函数中，供其他地方调用。</li>\n</ul>\n<h3 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>语法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>第一种</td>\n<td>name() {<br/> command1<br/> command2<br/> ……<br/> commandn<br/>}<br/></td>\n</tr>\n<tr>\n<td>第二种</td>\n<td>function name {<br/> command1<br/> command2<br/> ……<br/> commandn<br/>}</td>\n</tr>\n</tbody></table>\n<h3 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h3><ul>\n<li><p>直接使用函数名调用，可以将其想象成 Shell 中的一条命令。</p>\n</li>\n<li><p>函数内部可以直接使用参数 $1、$2 …… $n。</p>\n</li>\n<li><p>调用函数：function_name $1 $2。</p>\n</li>\n</ul>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><ol>\n<li><p>定义函数，调用执行后终端输出 <code>Hello, Zhangsan~</code>。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nfunction hello() &#123;\n    echo -e &quot;Hello, Zhangsan~&quot;\n&#125;\n\nhello</code></pre></li>\n<li><p>定义函数，调用执行后控制台循环输出 <code>1 - 10</code>。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nfunction print_num() &#123;\n    for ((i &#x3D; 0; i &lt;&#x3D; 10; i++)); do\n        # echo -e &quot;This is $i num: $i .\\n&quot;\n        printf &quot;This is %2d num: %2d .\\n&quot; $i $i\n    done\n&#125;\n\nprint_num</code></pre></li>\n</ol>\n<h4 id=\"需求描述\"><a href=\"#需求描述\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>写一个监控 nginx 服务的脚本。如果 nginx 服务宕掉，则该脚本可以检测到并将进程启动。</p>\n<h4 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li>使用 <code>ps -ef | grep nginx | grep -v grep</code> 命令查看 nginx 进程，<code>grep -v grep</code> 命令排除 grep 进程。如果脚本名中带有 nginx 字段，还需要排除脚本进程。</li>\n<li>当进程存在，上述命令返回值为 0，则输出 <code>Nginx is running well!</code>。否则重启该进程。</li>\n</ol>\n<h4 id=\"脚本编写\"><a href=\"#脚本编写\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 监控 nginx 服务的脚本。如果 nginx 服务宕掉，则该脚本可以检测到并将进程启动\n\nthis_pid&#x3D;$$\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction check_root() &#123;\n    if [ $&#123;UID&#125; -ne 0 ]; then\n        echo -e &quot;当前非 ROOT 账号(或没有 ROOT 权限)，无法继续操作，请更换 ROOT 账号或使用 su命令获取临时 ROOT 权限&quot; &amp;&amp; exit 1\n    fi\n&#125;\n\nfunction nginx_daemon() &#123;\n    # 查看进程是否存在，屏蔽结果信息\n    ps -ef | grep nginx | grep -v grep | grep -v $&#123;this_pid&#125; &amp;&gt;&#x2F;dev&#x2F;null\n    # echo $?\n\n    if [ &quot;$?&quot; -ne 0 ]; then\n        echo -e &quot;[$&#123;Red_font_prefix&#125;$(TZ&#x3D;&#39;America&#x2F;Los_Angeles&#39; date &quot;+%F %T&quot;)]$&#123;Font_color_suffix&#125; Nginx is down, Start it ...&quot;\n        sudo systemctl start nginx\n    else\n        echo -e &quot;$&#123;Green_font_prefix&#125;[$(TZ&#x3D;&#39;America&#x2F;Los_Angeles&#39; date &quot;+%F %T&quot;)]$&#123;Font_color_suffix&#125; Nginx is running well ~&quot;\n    fi\n&#125;\n\ncheck_root\nwhile true; do\n    nginx_daemon\n    sleep 3\ndone</code></pre>\n\n<h4 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[ryan@ryan-tencentcloud-2]~$ sudo su -\n[root@ryan-tencentcloud-2]~# cd &#x2F;home&#x2F;ryan&#x2F;\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# systemctl stop nginx\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# nohup sh nginx_daemon.sh &amp;\n[1] 117505\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# nohup: ignoring input and appending output to &#39;nohup.out&#39;\n\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# systemctl stop nginx\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# ps -aux | grep nginx_daemon.sh | grep -v grep\nroot     117505  0.1  0.0 113288  1484 pts&#x2F;1    SN   08:03   0:00 sh nginx_daemon.sh\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# kill -9 117505\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan#\n[1]  + killed     nohup sh nginx_daemon.sh\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# cat -n nohup.out\n     1\n     2  [2020-10-02 05:03:20] Nginx is down, Start it ...\n     3  [2020-10-02 05:03:24] Nginx is running well ~\n     4  [2020-10-02 05:03:27] Nginx is running well ~\n     5  [2020-10-02 05:03:30] Nginx is running well ~\n     6  [2020-10-02 05:03:33] Nginx is running well ~\n     7  [2020-10-02 05:03:36] Nginx is running well ~\n     8  [2020-10-02 05:03:39] Nginx is running well ~\n     9  [2020-10-02 05:03:43] Nginx is down, Start it ...\n    10  [2020-10-02 05:03:46] Nginx is running well ~\n    11  [2020-10-02 05:03:49] Nginx is running well ~\n</code></pre>\n\n<h2 id=\"函数中传递参数\"><a href=\"#函数中传递参数\" class=\"headerlink\" title=\"函数中传递参数\"></a>函数中传递参数</h2><ul>\n<li>函数中传递参数和调用脚本传递参数类似，都是使用 $1 $2 $3 $4 $5 $6 $7 这种方式。</li>\n</ul>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><table>\n<thead>\n<tr>\n<th>语法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>function-name $1 $2</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"练习-1\"><a href=\"#练习-1\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"需求描述-1\"><a href=\"#需求描述-1\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>编写一个脚本，该脚本可以实现计算器的功能，可以进行 <code>+ - x / %</code>数学运算。</p>\n<p>例如：<code>sh calculate.sh 30 + 40 | sh calculate.sh 30 - 40</code>。</p>\n<h4 id=\"思路分析-1\"><a href=\"#思路分析-1\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ul>\n<li>数学运算使用 bc 或者 expr 处理。</li>\n</ul>\n<h4 id=\"脚本编写-1\"><a href=\"#脚本编写-1\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 实现计算器的功能，可以进行 &#96;+ - x &#x2F; %&#96;数学运算。\n# 例如：&#96;sh calculate.sh 30 + 40    | sh calculate.sh 30 - 40&#96;。\n\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\ncalculate() &#123;\n    case $2 in\n    +)\n        echo -e &quot;$1 $2 $3 &#x3D; $(expr $1 + $3)&quot;\n        # echo -e &quot;$1 + $3&quot; | bc\n        ;;\n    -)\n        echo -e &quot;$1 $2 $3 &#x3D; $(expr $1 - $3)&quot;\n        ;;\n    x)\n        echo -e &quot;$1 $2 $3 &#x3D; $(expr $1 \\* $3)&quot;\n        ;;\n    &#x2F;)\n        echo -e &quot;$1 $2 $3 &#x3D; $(expr $1 &#x2F; $3)&quot;\n        ;;\n    %)\n        echo -e &quot;$1 $2 $3 &#x3D; $(expr $1 % $3)&quot;\n        ;;\n    *)\n        echo -e &quot;$&#123;Red_font_prefix&#125;ERROR!!!$&#123;Font_color_suffix&#125; Pls input a operator in (+|-|x|&#x2F;|%)!&quot;\n        ;;\n    esac\n&#125;\n\ncalculate $1 $2 $3</code></pre>\n\n<h4 id=\"执行结果-1\"><a href=\"#执行结果-1\" class=\"headerlink\" title=\"执行结果\"></a>执行结果</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[ryan@ryan-tencentcloud-2]~ sh calculate.sh 20 + 3\n20 + 3 &#x3D; 23\n[ryan@ryan-tencentcloud-2]~ sh calculate.sh 20 - 3\n20 - 3 &#x3D; 17\n[ryan@ryan-tencentcloud-2]~ sh calculate.sh 20 x 3\n20 x 3 &#x3D; 60\n[ryan@ryan-tencentcloud-2]~ sh calculate.sh 20 &#x2F; 3\n20 &#x2F; 3 &#x3D; 6\n[ryan@ryan-tencentcloud-2]~ sh calculate.sh 20 % 3\n20 % 3 &#x3D; 2\n[ryan@ryan-tencentcloud-2]~ sh calculate.sh  20 * 30\nERROR!!! Pls input a operator (+|-|x|&#x2F;|%)!</code></pre>\n\n<h2 id=\"函数返回值\"><a href=\"#函数返回值\" class=\"headerlink\" title=\"函数返回值\"></a>函数返回值</h2><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>返回值方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>方法一</td>\n<td>return</td>\n</tr>\n<tr>\n<td>方法二</td>\n<td>echo</td>\n</tr>\n</tbody></table>\n<ul>\n<li>使用 return 返回值<ul>\n<li>只能返回 1 - 255 的整数</li>\n<li>函数使用 return 返回值，通常只是用来供其它地方调用获取状态。因此，通常仅返回 0 或 1。0 表示成功， 1 表示失败。</li>\n</ul>\n</li>\n<li>使用 echo 返回值<ul>\n<li>可以返回任何字符串结果</li>\n<li>通常用于返回数据，比如一个字符串值或者列表值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"练习-1\"><a href=\"#练习-1\" class=\"headerlink\" title=\"练习 1\"></a>练习 1</h3><h4 id=\"需求描述-2\"><a href=\"#需求描述-2\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>判断 nginx 进程是否存在。如果存在终端输出 “Nginx is running!”，否则终端输出”Nginx is stoped~”。</p>\n<h4 id=\"思路分析-2\"><a href=\"#思路分析-2\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li>使用 <code>ps -ef | grep nginx | grep -v grep</code> 命令查看 nginx 进程，<code>grep -v grep</code> 命令排除 grep 进程。如果脚本名中带有 nginx 字段，还需要排除脚本进程。</li>\n<li>函数执行结果为 0 时输出 “Nginx is running!”，否则终端输出”Nginx is stoped~”。</li>\n</ol>\n<h4 id=\"脚本编写-2\"><a href=\"#脚本编写-2\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 判断 nginx 进程是否存在。\n# 如果存在终端输出 &quot;Nginx is running!&quot;. 否则终端输出&quot;Nginx is stoped~&quot;\n\nthis_pid&#x3D;$$\n\nis_nginx_running() &#123;\n    ps -ef | grep nginx | grep -v grep | grep -v $&#123;this_pid&#125; &amp;&gt;&#x2F;dev&#x2F;null\n    if [ $? -eq 0 ]; then\n        return # return 0\n    else\n        return 1\n    fi\n&#125;\n\nis_nginx_running &amp;&amp; echo -e &quot;Nginx is running!&quot; || echo -e &quot;Nginx is stoped~&quot;</code></pre>\n\n<h4 id=\"代码执行\"><a href=\"#代码执行\" class=\"headerlink\" title=\"代码执行\"></a>代码执行</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[ryan@ryan-tencentcloud-2]~ sh -x is_nginx_running.sh    #sh -x 查看执行过程\n+ PATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;home&#x2F;ryan&#x2F;bin\n+ export PATH\n+ this_pid&#x3D;119050\n+ is_nginx_running\n+ ps -ef\n+ grep nginx\n+ grep -v grep\n+ grep -v 119050\n+ &#39;[&#39; 0 -eq 0 &#39;]&#39;\n+ return\n+ echo -e &#39;Nginx is running!&#39;\nNginx is running!\n[ryan@ryan-tencentcloud-2]~ sudo systemctl stop nginx\n[ryan@ryan-tencentcloud-2]~ sh -x is_nginx_running.sh\n+ PATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;home&#x2F;ryan&#x2F;bin\n+ export PATH\n+ this_pid&#x3D;119098\n+ is_nginx_running\n+ grep -v grep\n+ grep -v 119098\n+ ps -ef\n+ grep nginx\n+ &#39;[&#39; 1 -eq 0 &#39;]&#39;\n+ return 1\n+ echo -e &#39;Nginx is stoped~&#39;\nNginx is stoped~</code></pre>\n\n<h3 id=\"练习-2\"><a href=\"#练习-2\" class=\"headerlink\" title=\"练习 2\"></a>练习 2</h3><h4 id=\"需求描述-3\"><a href=\"#需求描述-3\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>获取系统所有用户并输出。</p>\n<h4 id=\"思路分析-3\"><a href=\"#思路分析-3\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ol>\n<li>系统所有用户在 <code>/etc/passwd</code> 文件中。</li>\n<li>使用 <code>cut -d &quot;:&quot; -f 1</code> 命令截取输出结果中的第一列。<code>cut</code> 命令默认属于使用 <code>TAB</code> 作为分隔符，使用 <code>-d &quot;:&quot;</code> 命令指定 <code>:</code> 为分隔符。使用 <code>-f 1</code> 参数指定获取第一列。</li>\n</ol>\n<h4 id=\"脚本编写-3\"><a href=\"#脚本编写-3\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 获取系统所有用户并输出\n\nget_user() &#123;\n    user&#x3D;$(cat &#x2F;etc&#x2F;passwd | cut -d &quot;:&quot; -f 1)\n    echo $&#123;user&#125;\n&#125;\n\nuser_list&#x3D;$(get_user)\nindex&#x3D;0\nfor user in $&#123;user_list&#125;; do\n    # echo -e &quot;This is $&#123;index&#125; user: $&#123;user&#125; .&quot;\n    printf &quot;This is %02d user: %s\\n&quot; $&#123;index&#125; $&#123;user&#125;\n    index&#x3D;$(($&#123;index&#125; + 1))\ndone</code></pre>\n\n<h4 id=\"代码执行-1\"><a href=\"#代码执行-1\" class=\"headerlink\" title=\"代码执行\"></a>代码执行</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[ryan@ryan-tencentcloud-2]~ sh get_user.sh\nThis is 00 user: root\nThis is 01 user: bin\nThis is 02 user: daemon\nThis is 03 user: adm\nThis is 04 user: lp\nThis is 05 user: sync\nThis is 06 user: shutdown\nThis is 07 user: halt\nThis is 08 user: mail\nThis is 09 user: operator\nThis is 10 user: games\nThis is 11 user: ftp\nThis is 12 user: nobody\nThis is 13 user: systemd-network\nThis is 14 user: dbus\nThis is 15 user: polkitd\nThis is 16 user: libstoragemgmt\nThis is 17 user: colord\nThis is 18 user: rpc\nThis is 19 user: abrt\nThis is 20 user: rtkit\nThis is 21 user: pulse\nThis is 22 user: chrony\nThis is 23 user: gluster\nThis is 24 user: ntp\nThis is 25 user: tss\nThis is 26 user: sssd\nThis is 27 user: geoclue\nThis is 28 user: mysql\nThis is 29 user: setroubleshoot\nThis is 30 user: gdm\nThis is 31 user: rpcuser\nThis is 32 user: nfsnobody\nThis is 33 user: sshd\nThis is 34 user: postfix\nThis is 35 user: tcpdump\nThis is 36 user: ryan\nThis is 37 user: nginx</code></pre>\n\n<h2 id=\"局部变量和全局变量\"><a href=\"#局部变量和全局变量\" class=\"headerlink\" title=\"局部变量和全局变量\"></a>局部变量和全局变量</h2><h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><ul>\n<li>不做特殊声明，Shell 中变量都是全局变量。</li>\n<li>Tips：大型脚本程序中函数慎用全局变量。</li>\n</ul>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><ul>\n<li>定义变量时，使用 local 关键字定义局部变量。</li>\n<li>如果函数内和函数外存在同名变量，则函数内部变量会覆盖外部变量。</li>\n</ul>\n<h3 id=\"练习-2\"><a href=\"#练习-2\" class=\"headerlink\" title=\"练习\"></a>练习</h3><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 全局变量、局部变量练习\n\nvar1&#x3D;&quot;Hello World&quot;\n\ntest() &#123;\n    var1&#x3D;&quot;Hello Ryan~&quot;\n    echo -e &quot;函数内部定义的全部变量 var1 值为： $&#123;var1&#125;&quot;\n    var2&#x3D;88\n    local var3&#x3D;99\n&#125;\n\necho -e &quot;函数外部定义的全部变量 var1 值为： $&#123;var1&#125;&quot;\ntest\necho -e &quot;函数内部定义的全部变量 var2 值为： $&#123;var2&#125;&quot;\necho -e &quot;函数内部定义的局部变量 var3 值为： $&#123;var3&#125;&quot;\n\n# Output\n#\n# 函数外部定义的全部变量 var1 值为： Hello World\n# 函数内部定义的全部变量 var1 值为： Hello Ryan~\n# 函数内部定义的全部变量 var2 值为： 88\n# 函数内部定义的局部变量 var3 值为：</code></pre>\n\n<h2 id=\"函数库\"><a href=\"#函数库\" class=\"headerlink\" title=\"函数库\"></a>函数库</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ul>\n<li>经常使用的重复代码封装成函数文件；</li>\n<li>一般不直接执行，而是由其它脚本调用。</li>\n<li>库文件名的后缀是任意的，但一般使用<code> .lib</code>。</li>\n<li>库文件通常没有可执行选项。</li>\n<li>库文件无需和脚本在同级目录，只需在脚本中引用时<strong>指定详细路径</strong>。</li>\n<li>库文件第一行一般使用 <code>#!/bin/echo</code> 输出警告信息，避免用户直接执行。</li>\n</ul>\n<h3 id=\"练习-3\"><a href=\"#练习-3\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"需求描述-4\"><a href=\"#需求描述-4\" class=\"headerlink\" title=\"需求描述\"></a>需求描述</h4><p>定义一个函数库，该函数实现以下几个函数：</p>\n<ol>\n<li>加法函数 <code>add</code></li>\n<li>减法函数 <code>reduce</code></li>\n<li>乘法函数 <code>multiple</code></li>\n<li>除法函数 <code>divide</code></li>\n<li>打印系统运行情况的函数 <code>sys_load</code>，该函数可以显示内存运行情况、磁盘使用情况。</li>\n</ol>\n<h4 id=\"思路分析-4\"><a href=\"#思路分析-4\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h4><ul>\n<li>加减乘除运算使用 expr 进行计算。</li>\n<li>内存运行情况 <code>free -m</code> ，磁盘使用情况 <code>df -h</code>。</li>\n</ul>\n<h4 id=\"脚本编写-4\"><a href=\"#脚本编写-4\" class=\"headerlink\" title=\"脚本编写\"></a>脚本编写</h4><pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;bin&#x2F;echo\n\nadd() &#123;\n    echo -e &quot;$1 + $2 &#x3D; $(expr $1 + $2)&quot;\n&#125;\n\nreduce() &#123;\n    echo -e &quot;$1 - $2 &#x3D; $(expr $1 - $2)&quot;\n&#125;\n\nmultiple() &#123;\n    echo -e &quot;$1 * $2 &#x3D; $(expr $1 \\* $2)&quot;\n&#125;\n\ndivide() &#123;\n    echo -e &quot;$1 &#x2F; $2 &#x3D; $(expr $1 &#x2F; $2)&quot;\n&#125;\n\nsys_load() &#123;\n    echo -e &quot;-------- Memory Info --------&quot;\n    free -m\n    echo -e &quot;-----------------------------\\n&quot;\n    echo -e &quot;------ Disk Usage Info ------&quot;\n    df -h\n    echo -e &quot;-----------------------------&quot;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n. &#x2F;home&#x2F;ryan&#x2F;base_function.lib\n\nadd 20 3\nreduce 20 3\nmultiple 20 3\ndivide 20 3\nsys_load\n</code></pre>\n\n<h4 id=\"代码执行-2\"><a href=\"#代码执行-2\" class=\"headerlink\" title=\"代码执行\"></a>代码执行</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">20 + 3 &#x3D; 23\n20 - 3 &#x3D; 17\n20 * 3 &#x3D; 60\n20 &#x2F; 3 &#x3D; 6\n\n-------- Memory Info --------\n              total        used        free      shared  buff&#x2F;cache   available\nMem:           1987         643         208           1        1135        1199\nSwap:          1024         290         734\n-----------------------------\n\n------ Disk Usage Info ------\nFilesystem      Size  Used Avail Use% Mounted on\ndevtmpfs        981M     0  981M   0% &#x2F;dev\ntmpfs           994M   24K  994M   1% &#x2F;dev&#x2F;shm\ntmpfs           994M  732K  993M   1% &#x2F;run\ntmpfs           994M     0  994M   0% &#x2F;sys&#x2F;fs&#x2F;cgroup\n&#x2F;dev&#x2F;vda1        50G  9.2G   38G  20% &#x2F;\ntmpfs           199M     0  199M   0% &#x2F;run&#x2F;user&#x2F;0\ntmpfs           199M     0  199M   0% &#x2F;run&#x2F;user&#x2F;1000\n-----------------------------</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文代码：<a href=\"https://github.com/JaimeZeng/learning-linux/314-shell-scripting/03-shell/\">03-shell</a></p></blockquote>\n","text":"讲解 Shell 中函数是如何定义和使用的、如何向函数传递参数、函数的返回值，并剖析和其他语言使用函数的区别；之后介绍如何调用函数、函数的作用域、如何进行递归调用以及函数库的概念，所有的讲解都会配合在真实环境演示，以帮助学员彻底理解… 函数的定义和使用函数定义 Linux She...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Linux","slug":"Linux","count":7,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":7,"path":"api/tags/Linux.json"},{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">函数的定义和使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">函数定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">语法格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">调用函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99\"><span class=\"toc-text\">脚本编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">执行结果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E4%B8%AD%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">函数中传递参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0-1\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-1\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-1\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-1\"><span class=\"toc-text\">脚本编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C-1\"><span class=\"toc-text\">执行结果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">函数返回值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95-1\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0-1\"><span class=\"toc-text\">练习 1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-2\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-2\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-2\"><span class=\"toc-text\">脚本编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">代码执行</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0-2\"><span class=\"toc-text\">练习 2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-3\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-3\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-3\"><span class=\"toc-text\">脚本编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-1\"><span class=\"toc-text\">代码执行</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">局部变量和全局变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">全局变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">局部变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0-2\"><span class=\"toc-text\">练习</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%BA%93\"><span class=\"toc-text\">函数库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0-3\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9C%80%E6%B1%82%E6%8F%8F%E8%BF%B0-4\"><span class=\"toc-text\">需求描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90-4\"><span class=\"toc-text\">思路分析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99-4\"><span class=\"toc-text\">脚本编写</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-2\"><span class=\"toc-text\">代码执行</span></a></li></ol></li></ol></li></ol>","author":{"name":"JaimeZeng","slug":"blog-author","avatar":"/icon/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"文件查找命令 find","uid":"9351df5cbba08f50ebf152b511a1565c","slug":"2020-10-03-04_文件查找 find","date":"2020-10-03T11:22:26.000Z","updated":"2021-08-28T16:49:26.486Z","comments":true,"path":"api/articles/2020-10-03-04_文件查找 find.json","keywords":null,"cover":null,"text":"该小节讲解 Shell 中常用的命令，包括文件查找 find 和 locate 的使用，尤其是 find 的各种高级用法，并结合 xargs 对大量文件进行处理；之后讲解数据备份、文件压缩、目录备份以及下载工具的使用方法；所有的用法都会在真实环境给大家做演示… find语法 语法...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"26 mins."},"categories":[{"name":"Linux","slug":"Linux","count":7,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":7,"path":"api/tags/Linux.json"},{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"}],"author":{"name":"JaimeZeng","slug":"blog-author","avatar":"/icon/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"变量的高级用法","uid":"a6f9db63870b876ac4f0e8fb7a8c3c63","slug":"2020-10-03-02_变量的高级用法","date":"2020-10-03T11:20:26.000Z","updated":"2021-08-28T16:49:26.486Z","comments":true,"path":"api/articles/2020-10-03-02_变量的高级用法.json","keywords":null,"cover":null,"text":"该小节介绍了变量的高级用法，如何进行变量替换、字符串处理方法、如何利用命令替换为变量赋值、有类型变量和变量引用的使用方法，并在实际环境中演示如何使用，加深大家的认识和理解；最后介绍 shell 中的数学运算方法，使用 expr 和 bc… 变量替换和测试变量替换 语法 说明 $&...","link":"","photos":[],"count_time":{"symbolsCount":"24k","symbolsTime":"22 mins."},"categories":[{"name":"Linux","slug":"Linux","count":7,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":7,"path":"api/tags/Linux.json"},{"name":"Shell","slug":"Shell","count":5,"path":"api/tags/Shell.json"}],"author":{"name":"JaimeZeng","slug":"blog-author","avatar":"/icon/avatar.png","link":"/","description":"Stay Simple.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}