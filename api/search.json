[{"id":"1695aa0b703806bd11679b2909b0d7d9","title":"使用 cloudflare workers 加速下载 github 项目文件","content":"部署\n\n登录 Cloudflare Workers ；\n取一个子域名，然后点击 Create a Worker创建 Worker；\n左上角修改域名前缀，删除左侧代码框内原有代码，复制 index.js 内容到左侧代码框，点击Save and deploy 保存并部署。\n\n\n\n\n\n\n\n\n\n\n\nindex.js默认配置下 clone 走 github.com.cnpmjs.org，项目文件会走 jsDeliver，如需走 worker，修改 Config 变量即可\nASSET_URL是静态资源的 url（实际上就是现在显示出来的那个输入框单页面）\nPREFIX是前缀，默认（根路径情况为”/“），如果自定义路由为 example.com/gh/*，请将 PREFIX 改为 ‘/gh/‘，注意，少一个杠都会错！\n\n使用# 网上其他大佬的下载加速站\nhttps:&#x2F;&#x2F;gh.con.sh\nhttps:&#x2F;&#x2F;ghproxy.com\nhttps:&#x2F;&#x2F;pd.zwc365.com\nhttps:&#x2F;&#x2F;download.fastgit.org\nhttps:&#x2F;&#x2F;gh.api.99988866.xyz\nhttps:&#x2F;&#x2F;github.91chifun.workers.dev\nhttps:&#x2F;&#x2F;gh.isteed.cc\nhttps:&#x2F;&#x2F;gh.xiu2.xyz\nhttps:&#x2F;&#x2F;gh.argv.cc\n# 本站\nhttps:&#x2F;&#x2F;gh.zxj.pub\n\n合法输入合法输入（以 cloudflare/wrangler 仓库为例）：\n\n分支源码：https://github.com/cloudflare/wrangler/archive/master.zip\nrelease 源码：https://github.com/cloudflare/wrangler/archive/v1.19.3.tar.gz\nrelease 文件：https://github.com/cloudflare/wrangler/releases/download/v1.19.3/wrangler-v1.19.3-x86_64-apple-darwin.tar.gz\n分支文件：https://github.com/cloudflare/wrangler/blob/1.11.0/README.md\ncommit 文件：https://github.com/cloudflare/wrangler/blob/26ae1992dda31395fcdec5f249/CHANGELOG.md\ngist：https://gist.githubusercontent.com/cielpy/351557e6e465c12986419ac5a4dd2568/raw/cmd.py\n\n终端下载# 下载分支源码\nwget http:&#x2F;&#x2F;gh.zxj.pub&#x2F;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;wrangler&#x2F;archive&#x2F;master.zip\n\n# 下载 release 源码\nwget http:&#x2F;&#x2F;gh.zxj.pub&#x2F;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;wrangler&#x2F;archive&#x2F;v1.19.3.tar.gz\n\n# 下载 release 文件\nwget http:&#x2F;&#x2F;gh.zxj.pub&#x2F;https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;wrangler&#x2F;releases&#x2F;download&#x2F;v1.19.3&#x2F;wrangler-v1.19.3-x86_64-apple-darwin.tar.gz\n\n# 下载 gist 文件\nwget http:&#x2F;&#x2F;gh.zxj.pub&#x2F;https:&#x2F;&#x2F;gist.githubusercontent.com&#x2F;cielpy&#x2F;351557e6e465c12986419ac5a4dd2568&#x2F;raw&#x2F;cmd.py\n\ngit 克隆推送# 设置自动跳转\ngit config --global http.followRedirects true\n\n# 设定全局参数\n# https:&#x2F;&#x2F;github.com&#x2F;hunshcn&#x2F;gh-proxy&#x2F;issues&#x2F;28#issuecomment-773769630\ngit config --global url.&quot;https:&#x2F;&#x2F;gh.zxj.pub&#x2F;https:&#x2F;&#x2F;github.com&#x2F;&quot;.insteadOf https:&#x2F;&#x2F;github.com&#x2F;\n\n\n配置之后就可以和以前一样使用 git clone/push/pull 操作了～\n\n\n\n\n\n\n\n\n\nclone 代码时要使用 https:// 协议！例如：\ngit clone --depth&#x3D;1 https:&#x2F;&#x2F;github.com&#x2F;cloudflare&#x2F;wrangler.git\n常见问题\nGithub 站点加载速度慢/无法访问时重定向到 Fastgit 站点。\n新建 Bookmark，Name 填 Open in fastgit，URL 填以下内容。\njavascript: (function () &#123;\n  var url &#x3D; window.location.href;\n  var regEx &#x3D; &#x2F;^(https?\\:\\&#x2F;\\&#x2F;)(www\\.)?(github)\\.(com)\\&#x2F;(.*)$&#x2F;i;\n  if (regEx.test(url)) &#123;\n    url &#x3D; url.replace(regEx, &quot;$1hub.fastgit.org&#x2F;$5&quot;);\n    window.open(url, &quot;_blank&quot;);\n  &#125; else &#123;\n    alert(&quot;Not a Github URL&quot;);\n  &#125;\n&#125;)();\n\n填写之后点击保存。以后在访问的 Github 时遇见加载速度慢/无法访问问题点击书签即可。例如：\n网页：https://github.com/hunshcn/gh-proxy/blob/master/index.js点击书签后会自动切换到 https://hub.fastgit.org/hunshcn/gh-proxy/blob/master/index.js。\n\nchrome 浏览器下载 github 资源速度很慢。\n按照 提升-Chrome-下载速度 配置即可。\n\n\n","slug":"2021-09-22-使用-cloudflare-workers-加速下载-github-项目文件","date":"2021-09-22T06:30:21.000Z","categories_index":"Website","tags_index":"github","author_index":"JaimeZeng"},{"id":"6db4eef64332920de496fdddd1d9425d","title":"Manjaro + Windows 双系统时间问题","content":"安装 Manjaro 与 Windows 双系统后。在切换操作系统时，两系统时间总是相差 8 小时。\n系统时间\n\n\n\n\n\n\n\n\nSystem time (简体中文) - ArchWiki (archlinux.org)\n硬件时钟和系统时钟系统用两个时钟保存时间：硬件时钟和系统时钟。\n硬件时钟(即实时时钟 RTC 或 CMOS 时钟)仅能保存：年、月、日、时、分、秒这些时间数值，无法保存时间标准(UTC 或 localtime)和是否使用夏令时调节。\n系统时钟(即软件时间) 与硬件时间分别维护，保存了：时间、时区和夏令时设置。Linux 内核保存为自 UTC 时间 1970 年 1 月 1 日经过的秒数。初始系统时钟是从硬件时间计算得来，计算时会考虑 /etc/adjtime 的设置。系统启动之后，系统时钟与硬件时钟独立运行，Linux 通过时钟中断计数维护系统时钟。\n因为系统时间是按 32 位整数保存的，最大只能记到 2038 年，所以 32 位 Linux 系统将在 2038 年停止工作。\n大部分操作系统的时间管理包括如下方面：\n\n启动时根据硬件时钟设置系统时间；\n运行时通过时间同步联网校正时间；\n关机时根据系统时间设置硬件时间；\n\n时间标准时间表示有两个标准：localtime 和 UTC(Coordinated Universal Time) 。UTC 是与时区无关的全球时间标准。尽管概念上有差别，UTC 和 GMT (格林威治时间) 是一样的。localtime 标准则依赖于当前时区。\n时间标准由操作系统设定，Windows 默认使用 localtime，Mac OS 默认使用 UTC 而 UNIX 系列的操作系统两者都有。使用 Linux 时，最好将硬件时钟设置为 UTC 标准，并在所有操作系统中使用。这样 Linux 系统就可以自动调整夏令时设置，而如果使用 localtime 标准那么系统时间不会根据夏令时自动调整。\n通过如下命令可以检查当前设置，systemd 默认硬件时钟为协调世界时（UTC）。\ntimedatectl status | grep local\n\n硬件时间可以用 hwclock 命令设置，将硬件时间设置为 localtime：\nsudo timedatectl set-local-rtc true\n\n硬件时间设置成 UTC：\nsudo timedatectl set-local-rtc false\n\n上述命令会自动生成/etc/adjtime，无需单独设置。\n解决方法原因：Manjaro 将本地硬件时间作为设定时区（如 UTC+8）的区时，而 Windows 默认使用 localtime。\n解决方法：\n\n经常使用 Manjaro 的：Windows 系统使用 UTC ，Manjaro 使用 ntp 同步时间。\n经常使用 Window 的：Manjaro 系统使用 localtime，Windows 使用 ntp 同步时间。\n\n常用 NTP 服务器# ali https:&#x2F;&#x2F;help.aliyun.com&#x2F;document_detail&#x2F;92704.html\nntp.aliyun.com\nntp1.aliyun.com\nntp2.aliyun.com\nntp3.aliyun.com\nntp4.aliyun.com\nntp5.aliyun.com\nntp6.aliyun.com\nntp7.aliyun.com\n\n# tencent https:&#x2F;&#x2F;cloud.tencent.com&#x2F;document&#x2F;product&#x2F;213&#x2F;30392\ntime1.cloud.tencent.com\ntime2.cloud.tencent.com\ntime3.cloud.tencent.com\ntime4.cloud.tencent.com\ntime5.cloud.tencent.com\n\n# cloudflare https:&#x2F;&#x2F;blog.cloudflare.com&#x2F;secure-time&#x2F;\ntime.cloudflare.com\n\n# apple\ntime.apple.com\ntime1.apple.com\ntime2.apple.com\ntime3.apple.com\ntime4.apple.com\ntime5.apple.com\ntime6.apple.com\ntime7.apple.com\ntime.euro.apple.com\n\n# tuna https:&#x2F;&#x2F;tuna.moe&#x2F;help&#x2F;ntp&#x2F;\nntp.tuna.tsinghua.edu.cn\n\n# neusoft http:&#x2F;&#x2F;ntp.neusoft.edu.cn&#x2F;\nntp.neusoft.edu.cn\n\n# ntppool https:&#x2F;&#x2F;www.ntppool.org&#x2F;zone&#x2F;asia\npool.ntp.org\n0.asia.pool.ntp.org\n1.asia.pool.ntp.org\n2.asia.pool.ntp.org\n3.asia.pool.ntp.org\ncn.pool.ntp.org\nhk.pool.ntp.org\n\n# nist\ntime.nist.gov\n\nWindows 系统使用 UTC\n使用 NTP 服务来在线同步硬件时钟；\n\nsystemd-timesyncd.service 用户\n\n编辑 timesyncd 服务配置文件 sudo vim /etc/systemd/timesyncd.conf。\n将其中 NTP= 一行取消注释，修改为 NTP=&#123;ntp_server&#125;。例如：NTP=ntp.aliyun.com ntp1.aliyun.com ntp2.aliyun.com ntp3.aliyun.com。\n重载配置 sudo systemctl restart systemd-timesyncd。\n查看配置 timedatectl show-timesync --all。\n启用 sudo timedatectl set-ntp true 。\n\n\nntpd.service 用户\n\n查看 ntpd 是否正在运行以及是否设置为开机自启动\nsystemctl is-active ntpd.service\nsystemctl is-enabled ntpd.service\nsudo systemctl daemon-reload\nsudo systemctl start ntpd\nsudo systemctl enable --now ntpd\n编辑 ntpd 服务配置文件 sudo vim /etc/ntp.conf。\n\n找到 server &#123;ntp_server&#125; iburst 的信息，将不需要的 NTP 时钟源服务器使用 # 注释或者直接删除。然后添加新的 NTP 时钟源服务器 server &#123;ntp_server&#125; iburst。例如：\n# Associate to Arch&#39;s NTP pool\n# server 0.arch.pool.ntp.org\n# server 1.arch.pool.ntp.org\n# server 2.arch.pool.ntp.org\n# server 3.arch.pool.ntp.org\nserver ntp1.aliyun.com iburst\nserver ntp2.aliyun.com iburst\nserver ntp3.aliyun.com iburst\nserver time1.cloud.tencent.com iburst\nserver time2.cloud.tencent.com iburst\nserver time3.cloud.tencent.com iburst\n重启 ntpd 服务 sudo systemctl restart ntpd。\n\n查看 ntpd 服务是否正常。 service ntpd status 或者 ntpq -p。\n\n* : 表示目前使用的 NTP 服务器。\nremote：响应这个请求的 NTP 服务器的名称。\nrefid：NTP 服务器使用的上一级 NTP 服务器。\nst：remote 远程服务器的级别。服务器从高到低级别设定为 1 - 16，为了减缓负荷和网络堵塞，原则上建议避免直接连接到级别为 1 的服务器。\nwhen：上一次成功请求之后到现在的秒数。\npoll：本地机和远程服务器多少时间进行一次同步（单位为秒）。初始运行 NTP 时，poll 值会比较小，和服务器同步的频率增加，建议尽快调整到正确的时间范围。调整之后，poll 值会逐渐增大，同步的频率也将会相应减小。\nreach：八进制值，用来测试能否和服务器连接。每成功连接一次，reach 的值将会增加。\ndelay：从本地机发送同步要求到 NTP 服务器的 round trip time。\noffset：主机通过 NTP 时钟同步与所同步时间源的时间偏移量，单位为毫秒（ms）。offset 越接近于 0，主机和 NTP 服务器的时间越接近。\njitter：用来做统计的值。统计在特定连续的连接数里 offset 的分布情况。即 jitter 数值的绝对值越小，主机的时间就越精确。\n\n\n\n\n临时同步 sudo ntpdate ntp2.aliyun.com。\n\n\n\n让 Windows 系统使用 UTC，同时禁用 Windows 的时间同步功能，以防 Windows 错误设置硬件时间。以 管理员身份 打开 命令提示符 运行以下命令：\n# 32位系统\nreg add &quot;HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\TimeZoneInformation&quot; &#x2F;v RealTimeIsUniversal &#x2F;d 1 &#x2F;t REG_DWORD &#x2F;f\n\n# 64位系统\nreg add &quot;HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\TimeZoneInformation&quot; &#x2F;v RealTimeIsUniversal &#x2F;d 1 &#x2F;t REG_QWORD &#x2F;f\n\n\n\n\n\n\n\n\n\n\n以 管理员身份 打开 命令提示符 运行代码，否则会出现 0x80070005(拒绝访问) 的问题。\n\n\nManjaro 系统使用 localtime\n将硬件时间设置为 localtime sudo timedatectl set-local-rtc true。\n\nWindows 下以 管理员身份 打开 命令提示符 运行以下命令：\nw32tm &#x2F;config &#x2F;manualpeerlist:ntp.tuna.tsinghua.edu.cn &#x2F;syncfromflags:manual &#x2F;update\n\n参考\nsystemd-timesyncd - ArchWiki (archlinux.org)\nSystem time (简体中文) - ArchWiki (archlinux.org)\nNetwork Time Protocol daemon (简体中文) - ArchWiki (archlinux.org)\n云服务器 Linux 实例：配置 NTP 服务 - 最佳实践 - 文档中心 - 腾讯云 (tencent.com)\nTUNA NTP (网络授时) 服务使用说明 | 清华大学 TUNA 协会\n\n","slug":"2021-09-03-Manjaro-+-Windows-双系统时间问题","date":"2021-09-03T09:51:18.000Z","categories_index":"Linux,Windows","tags_index":"Manjaro","author_index":"JaimeZeng"},{"id":"81ab78078b832bda2a4c8add9ba3daa1","title":"Manjaro 安装 v2rayA","content":"\n\n\n\n\n\n\n\n\nA Linux web GUI client of Project V which supports V2Ray, Xray, SS, SSR, Trojan and Pingtunnel :rocket:\nv2rayA 是一个易用而强大的，专注于 Linux 的 V2Ray 客户端。\n\n安装 v2rayA\n安装 V2Ray 内核 / Xray 内核。v2rayA 的功能依赖于 V2Ray 内核，因此需要安装内核。v2rayA 会优先使用 v2ray 内核，其次是 xray内核。\nyay -S xray --noconfirm  \n安装 v2rayA\nyay -S v2raya --noconfirm\n\n配置 v2rayA\n启动 v2rayA 服务。\nsudo systemctl daemon-reload\nsudo systemctl start v2raya\n# 设置开机启动\nsudo systemctl enable --now v2raya\n打开浏览器，输入 http://localhost:2017 访问  UI 界面。在第一次进入页面时，你需要创建一个管理员账号，请妥善保管你的用户名密码，如果遗忘，使用sudo v2raya --reset-password命令重置。\n\n导入节点。以创建或导入的方式导入节点，导入支持节点链接、订阅链接、扫描二维码和批量导入等方式。\n\n测速然后连接节点。v2rayA Wiki\n\n配置代理。默认情况下 v2rayA 会通过核心开放 20170(socks5), 20171(http), 20172(带分流规则的http) 端口。\n\n浏览器：SwitchyOmega。\n\n终端：Proxychains-ng。\n# Proxy\nproxy() &#123;\n    if [[ &quot;$1&quot; &#x3D;&#x3D; &quot;clash&quot; ]]; then\n        export HTTP_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:7890\n        export HTTPS_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:7890\n        export ALL_PROXY&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:7891\n    elif [[ &quot;$1&quot; &#x3D;&#x3D; &quot;v2&quot; ]]; then\n        export HTTP_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:8889\n        export HTTPS_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:8889\n        export ALL_PROXY&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1089\n    elif [[ &quot;$1&quot; &#x3D;&#x3D; &quot;v2a&quot; ]]; then\n        export HTTP_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:20171\n        export HTTPS_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:20171\n        export ALL_PROXY&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:20170\n    elif [[ &quot;$1&quot; ]] &amp;&amp; [[ &quot;$2&quot; ]]; then\n        export HTTP_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:&quot;$1&quot;\n        export HTTPS_PROXY&#x3D;http:&#x2F;&#x2F;127.0.0.1:&quot;$1&quot;\n        export ALL_PROXY&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:&quot;$2&quot;\n    else\n        echo -e &quot;$&#123;Red_font_prefix&#125;[Error] 请指定参数(clash&#x2F;v2&#x2F;v2a)或代理端口！$&#123;Font_color_suffix&#125;&quot; &amp;&amp; exit 1\n    fi\n    curl -fsSL &quot;https:&#x2F;&#x2F;www.google.com&quot; | grep -c Google\n&#125;\n\n\n# v2raya\nfunction v2cf() &#123;\n    if [[ &quot;$1&quot; &#x3D;&#x3D; &quot;open&quot; ]]; then\n        google-chrome-stable http:&#x2F;&#x2F;localhost:2017&#x2F;\n    elif [[ &quot;$1&quot; &#x3D;&#x3D; &quot;view&quot; ]]; then\n        bat &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;v2raya.service\n    elif [[ &quot;$1&quot; &#x3D;&#x3D; &quot;edit&quot; ]]; then\n        sudo nvim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;v2raya.service\n    elif [[ &quot;$1&quot; &#x3D;&#x3D; &quot;enable&quot; ]]; then\n        sudo systemctl enable --now v2raya\n    elif [[ &quot;$1&quot; &#x3D;&#x3D; &quot;start&quot; ]]; then\n        sudo systemctl start v2raya\n        sudo systemctl daemon-reload\n    elif [[ &quot;$1&quot; &#x3D;&#x3D; &quot;stop&quot; ]]; then\n        sudo systemctl stop v2raya\n        sudo systemctl daemon-reload\n    elif [[ &quot;$1&quot; &#x3D;&#x3D; &quot;restart&quot; ]]; then\n        sudo systemctl daemon-reload\n        sudo systemctl restart v2raya\n    elif [[ &quot;$1&quot; &#x3D;&#x3D; &quot;disable&quot; ]]; then\n        sudo systemctl disable --now v2raya\n    else\n        echo -e &quot;$&#123;Red_font_prefix&#125;[Error] 请指定参数（open&#x2F;view&#x2F;edit&#x2F;enable&#x2F;start&#x2F;stop&#x2F;restart&#x2F;disable）$&#123;Font_color_suffix&#125;&quot; &amp;&amp; exit 1\n    fi\n&#125;\n\n\n\n","slug":"2021-09-02-Manjaro-安装-v2rayA","date":"2021-09-02T03:45:56.000Z","categories_index":"Linux,Software","tags_index":"Manjaro","author_index":"JaimeZeng"},{"id":"03821857a6fe7493114505a993b276e6","title":"Manjaro 安装中文输入法","content":"安装输入法框架 Fcitx-im\n\nfcitx/fcitx5\nfcitx/fcitx5-qt\nfcitx/fcitx5-gtk\nfcitx/fcitx5-configtool\n\nfcitx5-im 包组提供了 fcitx5 本体 （仅提供英文支持）、配置工具（fcitx5-configtool）和必要的输入法模块（fcitx5-qt 对 Qt 程序的支持， fcitx5-gtk 对 GTK 程序的支持）。\n\n安装 fcitx5-im 包\n# pacman -S fcitx5 fcitx5-configtool fcitx5-gtk fcitx5-qt --noconfirm\npacman -S fcitx5-im --noconfirm\n设置环境变量，不设置的话有些程序中无法启用 fcitx5。\ncat &gt; $HOME&#x2F;.xprofile &lt;&lt;EOF\nexport GTK_IM_MODULE&#x3D;fcitx5\nexport QT_IM_MODULE&#x3D;fcitx5\nexport XMODIFIERS&#x3D;&quot;@im&#x3D;fcitx5&quot;\nexport LANG&#x3D;&quot;zh_CN.UTF-8&quot;\nexport LC_CTYPE&#x3D;&quot;zh_CN.UTF-8&quot;\nEOF\n\ncat &gt; ~&#x2F;.pam_environment &lt;&lt;EOF\nGTK_IM_MODULE DEFAULT&#x3D;fcitx\nQT_IM_MODULE  DEFAULT&#x3D;fcitx\nXMODIFIERS    DEFAULT&#x3D;@im&#x3D;fcitx\nINPUT_METHOD  DEFAULT&#x3D;fcitx\nSDL_IM_MODULE DEFAULT&#x3D;fcitx\nEOF\n\nSDL_IM_MODULE 是为了让一些使用特定版本 SDL2 库的游戏，比如 Dota2 能正常使用输入法。\n\n\n安装输入法引擎 RIME\nfcitx5-rime 对经典的 Rime IME 输入法的包装，内置了繁体中文和简体中文的支持。\npacman -S fcitx5-rime --noconfirm\n\n\n官网：RIME | 中州韻輸入法引擎\n官方文档：幫助與反饋\n\n安装四叶草拼音输入方案\n特点：\n\n完全从零开始制作文字的拼音和基础词库，导入了几个很好用的词库：\n用 pypinyin 项目生成所有字词的拼音\n合并结巴中文分词项目、rime 八股文和袖珍简化字拼音的字的字频\n由百度搜索到某个人基于大数据做过的360 万中文词库+词性+词频，该词库是用 ansj 分词对 270G 新闻语料进行分词统计词频获得\n清华大学开源词库，统计来自各大主流网站如 CSDN 博客、新浪新闻、搜狗语料\n搜狗细胞词库 网络流行新词【官方推荐】\n\n\n词库本身基于简体，并且加入繁简切换，包括自定义词库也能切换繁体（朙月拼音输入简体时的需要经过 opencc 转换，而且自定义词库也得手动转换成繁体才能繁简切换，而袖珍简化字拼音不支持繁体）。\n默认加入 emoji 表情输入支持。\n加入拼音输入特殊符号的支持（如输入 pingfang 即可打出 2）。\n修改了几乎所有特殊符号的按键，定制全部快捷键，使之符合搜狗输入法的习惯。\n\n# 打包工具\npacman -S base-devel --noconfirm\nyay -S rime-cloverpinyin --noconfirm\n\n# 配置文件\nmkdir -p ~&#x2F;.local&#x2F;share&#x2F;fcitx5&#x2F;rime&#x2F;\ncat &gt; ~&#x2F;.local&#x2F;share&#x2F;fcitx5&#x2F;rime&#x2F;default.custom.yaml &lt;&lt;EOF\npatch:\n  &quot;menu&#x2F;page_size&quot;: 9\n  schema_list:\n    - schema: clover\nEOF\n\n安装词库\n\nfelixonmars 根据中文维基百科创建的词库，适用于 Rime 输入法。\n\n启用 archlinuxcn 仓库。\n#&#x2F;etc&#x2F;pacman.conf\n[archlinuxcn]\nServer &#x3D; https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;archlinuxcn&#x2F;$arch\n\nsudo pacman -Sy\nsudo pacman -S archlinuxcn-keyring --noconfirm\n安装词库。\nsudo pacman -S fcitx5-pinyin-moegirl-rime fcitx5-pinyin-zhwiki-rime --noconfirm\n\n安装主题\n\n下载安装主题\ngit clone https:&#x2F;&#x2F;github.com&#x2F;tonyfettes&#x2F;fcitx5-nord.git\nmkdir -p ~&#x2F;.local&#x2F;share&#x2F;fcitx5&#x2F;themes&#x2F;\ncd fcitx5-nord\ncp -r Nord-Dark&#x2F; Nord-Light&#x2F; ~&#x2F;.local&#x2F;share&#x2F;fcitx5&#x2F;themes&#x2F;\n\n使用 git 克隆速度慢的使用下面的。\nuser_agent&#x3D;&quot;Mozilla&#x2F;5.0 (X11; Linux x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;93.0.4577.82 Safari&#x2F;537.36&quot;\ngithub_proxy&#x3D;&quot;https:&#x2F;&#x2F;ghproxy.com&#x2F;&quot;\n# github_proxy&#x3D;&quot;https:&#x2F;&#x2F;gh.api.99988866.xyz&#x2F;&quot;\n# github_proxy&#x3D;&quot;https:&#x2F;&#x2F;gh.argv.cc&#x2F;&quot;\n# github_proxy&#x3D;&quot;https:&#x2F;&#x2F;github.91chifun.workers.dev&#x2F;&quot;\n# github_proxy&#x3D;&quot;https:&#x2F;&#x2F;pd.zwc365.com&#x2F;&quot;\nfcitx5_theme_nord&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;tonyfettes&#x2F;fcitx5-nord&#x2F;archive&#x2F;refs&#x2F;heads&#x2F;master.zip&quot;\n\ncurl -sSL -A &#39;$&#123;user_agent&#125;&#39; -o &quot;fcitx5-nord.zip&quot; &quot;$&#123;github_proxy&#125;$&#123;fcitx5_theme_nord&#125;&quot;\nunzip -qo fcitx5-nord.zip\nmkdir -p $&#123;HOME&#125;&#x2F;.local&#x2F;share&#x2F;fcitx5&#x2F;themes&#x2F;\ncd fcitx5-nord-master&#x2F;\ncp -r Nord-Dark&#x2F; Nord-Light&#x2F; $&#123;HOME&#125;&#x2F;.local&#x2F;share&#x2F;fcitx5&#x2F;themes&#x2F;\n启动主题\nnvim ~&#x2F;.config&#x2F;fcitx5&#x2F;conf&#x2F;classicui.conf\n\n# 修改主题为 Nord-Dark\nTheme&#x3D;Nord-Dark\n# or Nord-Light\nTheme&#x3D;Nord-Light\n\n或者直接在 Fcitx5 Configure -&gt; Configure Addons -&gt; Classic User Inteface -&gt; Theme 设置主题为 Nord-Dark。\n\n重启 Fcitx5 切换主题。\nfcitx5 -r\n\n参考\nFcitx5 (简体中文)\nrime.im/docs\nfkxxyz/rime-cloverpinyin\n\n","slug":"2021-09-02-Manjaro 安装中文输入法","date":"2021-09-02T03:14:20.000Z","categories_index":"Linux,Software","tags_index":"Manjaro","author_index":"JaimeZeng"},{"id":"5768caebc930c1ab7f2d9151573a1bfd","title":"Sublime Text 4 注册汉化","content":"\n新特性\n变更许可证使用条款：Sublime Text License 密钥（注册码）不再与独立的主要版本绑定，而是对购买后 3 年内的所有更新均有效。注册码到期后，使用者仍可以使用购买注册码 3 年内发布的 Sublime Text 版本。如果要使用更新的版本则需要升级 License。\n\n支持多选项卡\n\n\n支持 Apple Silicon 和 Linux ARM64：Sublime Text for Mac 包含对 Apple Silicon 处理器的原生支持，Linux ARM64 builds 在树莓派等设备中可用。\n\n全新的 UI 界面\n\n语境感知自动补全：该版本重写了自动补全引擎，使之能够基于项目中的已有代码提供智能补全。\n\n支持 TypeScript、JSX 和 TSX\n\n语法定义升级：语法高亮引擎全新升级，能够处理非确定性语法、多行语句、lazy embed 和语法继承。此外，内存使用降低，加载速度更快。\n\nGPU 渲染：Sublime Text 4 稳定版在渲染界面时，能够在 Linux、Mac 和 Windows 系统中利用 GPU，从而带来流畅的 UI 界面，分辨率最高可达 8K，且消耗的能源更少。\n\nPython API 升级：Sublime Text 新版本 API 升级至 Python 3.8，同时具备对 Sublime Text 3 软件包的向后兼容性。Python API 新增了许多特性，如允许 LSP 等插件更好地运行。\n\n兼容性：Sublime Text 4 完全兼容 Sublime Text 3，可以自动接收旧版本的会话和配置。Sublime Text 还支持 3、4 版本的分开运行。\n\n\n\n\n\n\n\n\n\n\n\n具体内容可看：\n\nsublimetext.com/blog/articles/sublime-text-4\n\nst4-changelog.md\n\n\n注册\n\n编辑 /etc/hosts 文件.（以后将不能访问 Sublime 的网站）\n# Sublime-Bypass\n0.0.0.0 sublimetext.com\n0.0.0.0 sublimemerge.com\n0.0.0.0 sublimehq.com\n0.0.0.0 telemetry.sublimehq.com\n0.0.0.0 license.sublimehq.com\n0.0.0.0 45.55.255.55\n0.0.0.0 45.55.41.223\n运行脚本.\nwget --no-check-certificate -qO-  https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;CITIZENSIXTYNINE&#x2F;Sublime-Bypass&#x2F;mistress&#x2F;sublime-bypass.sh ｜ bash\n在 Help &gt; Enter License 输入注册码.\n-- BEGIN LICENSE --\nGeneric Name\nUnlimited User License\nEA7E-81044230\n0C0CD4A8 CAA317D9 CCABD1AC 434C984C\n7E4A0B13 77893C3E DD0A5BA1 B2EB721C\n4BAAB4C4 9B96437D 14EB743E 7DB55D9C\n7CA26EE2 67C3B4EC 29B2C65A 88D90C59\nCB6CCBA5 7DE6177B C02C2826 8C9A21B0\n6AB1A5B6 20B09EA2 01C979BD 29670B19\n92DC6D90 6E365849 4AB84739 5B4C3EA1\n048CC1D0 9748ED54 CAC9D585 90CAD815\n-- END LICENSE --\n\n\n—– BEGIN LICENSE —–\nDie Socialisten GmbH\n10 User License\nEA7E-800613\n51311422 E45F49ED 3F0ADE0C E5B8A508\n2F4D9B65 64E1E244 EDA11F0E F9D06110\nB7B2E826 E6FDAA72 2C653693 5D80582F\n09DCFFB5 113A940C 5045C0CD 5F8332F8\n34356CC6 D96F6FDB 4DEC20EA 0A24D83A\n2C82C329 E3290B29 A16109A7 EC198EB9\nF28EBB17 9C07403F D44BA75A C23C6874\nEBF11238 5546C3DD 737DC616 445C2941\n—— END LICENSE ——\n\n\n----- BEGIN LICENSE -----\nMember J2TeaM\nSingle User License\nEA7E-1011316\nD7DA350E 1B8B0760 972F8B60 F3E64036\nB9B4E234 F356F38F 0AD1E3B7 0E9C5FAD\nFA0A2ABE 25F65BD8 D51458E5 3923CE80\n87428428 79079A01 AA69F319 A1AF29A4\nA684C2DC 0B1583D4 19CBD290 217618CD\n5653E0A0 BACE3948 BB2EE45E 422D2C87\nDD9AF44B 99C49590 D2DBDEE1 75860FD2\n8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864\n------ END LICENSE ------\n\n\nKey Sublime Text 3.2.1 Build 3207\n----- BEGIN LICENSE -----\nMember J2TeaM\nSingle User License\nEA7E-1011316\nD7DA350E 1B8B0760 972F8B60 F3E64036\nB9B4E234 F356F38F 0AD1E3B7 0E9C5FAD\nFA0A2ABE 25F65BD8 D51458E5 3923CE80\n87428428 79079A01 AA69F319 A1AF29A4\nA684C2DC 0B1583D4 19CBD290 217618CD\n5653E0A0 BACE3948 BB2EE45E 422D2C87\nDD9AF44B 99C49590 D2DBDEE1 75860FD2\n8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864\n------ END LICENSE ------\n\n\nSublime Text 3.x (&lt; Build 3163)\n----- BEGIN LICENSE -----\nsgbteam\nSingle User License\nEA7E-1153259\n8891CBB9 F1513E4F 1A3405C1 A865D53F\n115F202E 7B91AB2D 0D2A40ED 352B269B\n76E84F0B CD69BFC7 59F2DFEF E267328F\n215652A3 E88F9D8F 4C38E3BA 5B2DAAE4\n969624E7 DC9CD4D5 717FB40C 1B9738CF\n20B3C4F1 E917B5B3 87C38D9C ACCE7DD8\n5F7EF854 86B9743C FADC04AA FB0DA5C0\nF913BE58 42FEA319 F954EFDD AE881E0B\n------ END LICENSE ------\n\n\nsublime-bypass.sh\n#!&#x2F;bin&#x2F;sh\n# Sublime-Bypass v1\n# A tool to bypass Sublime&#39;s activation process\n\n# Kudos to maboloshi and leo\n# This software is licensed under the zlib license. Please go to https:&#x2F;&#x2F;opensource.org&#x2F;licenses&#x2F;Zlib to learn more about it\n\nRED&#x3D;&quot;\\x1B[31m&quot;\nRST&#x3D;&quot;\\x1B[0m&quot;\ninputMerge&#x3D;merge\ninputText&#x3D;text\n\nprintf &quot;Sublime-Bypass v1.1\\n\\n&quot;\nprintf &quot;$&#123;RED&#125;Before you start, make sure you HAVE modified your &#x2F;etc&#x2F;hosts file as specified.\\n\\n$&#123;RST&#125;&quot;\nprintf &quot;Please enter the Sublime product you&#39;re trying to crack [merge&#x2F;text]\\n&gt;&quot;\nread inputUser\n\n# Selector\nif [ $inputUser &#x3D;&#x3D; $inputText ]\nthen\n    # Sublime Text Deactivation\n    printf &quot;\\nDisabling license checks for Sublime Text\\n\\n&quot;\n    cd &#x2F;opt&#x2F;sublime_text || exit\n    printf &#39;\\x48\\x31\\xC0\\xC3&#39;                 | dd of&#x3D;sublime_text bs&#x3D;1 seek&#x3D;$((0x0036567C)) conv&#x3D;notrunc\n    printf &#39;\\x90\\x90\\x90\\x90\\x90&#39;             | dd of&#x3D;sublime_text bs&#x3D;1 seek&#x3D;$((0x0035BCCB)) conv&#x3D;notrunc\n    printf &#39;\\x90\\x90\\x90\\x90\\x90&#39;             | dd of&#x3D;sublime_text bs&#x3D;1 seek&#x3D;$((0x0035BCE6)) conv&#x3D;notrunc\n    printf &#39;\\x48\\x31\\xC0\\x48\\xFF\\xC0\\xC3&#39;     | dd of&#x3D;sublime_text bs&#x3D;1 seek&#x3D;$((0x00367171)) conv&#x3D;notrunc\n    printf &#39;\\xC3&#39;                             | dd of&#x3D;sublime_text bs&#x3D;1 seek&#x3D;$((0x003653CE)) conv&#x3D;notrunc\n    printf &#39;\\xC3&#39;                             | dd of&#x3D;sublime_text bs&#x3D;1 seek&#x3D;$((0x0034F5F0)) conv&#x3D;notrunc\n    printf &quot;License checks for Sublime Text have been Disabled&quot;\nelif [ $inputUser &#x3D;&#x3D; $inputMerge ]\nthen\n    # Sublime Merge Deactivation\n    printf &quot;\\nDisabling license checks for Sublime Merge\\n\\n&quot;\n    cd &#x2F;opt&#x2F;sublime_merge || exit\n    printf &#39;\\x48\\xC7\\xC0\\x19\\x01\\x00\\x00\\xC3&#39; | dd of&#x3D;sublime_merge bs&#x3D;1 seek&#x3D;$((0x003A5400)) conv&#x3D;notrunc\n    printf &#39;\\x90\\x90\\x90\\x90\\x90&#39;             | dd of&#x3D;sublime_merge bs&#x3D;1 seek&#x3D;$((0x003A7EC9)) conv&#x3D;notrunc\n    printf &#39;\\x90\\x90\\x90\\x90\\x90&#39;             | dd of&#x3D;sublime_merge bs&#x3D;1 seek&#x3D;$((0x003A7EE4)) conv&#x3D;notrunc\n    printf &#39;\\x48\\x31\\xC0\\x48\\xFF\\xC0\\xC3&#39;     | dd of&#x3D;sublime_merge bs&#x3D;1 seek&#x3D;$((0x003A67FE)) conv&#x3D;notrunc\n    printf &#39;\\xC3&#39;                             | dd of&#x3D;sublime_merge bs&#x3D;1 seek&#x3D;$((0x003A514E)) conv&#x3D;notrunc\n    printf &#39;\\xC3&#39;                             | dd of&#x3D;sublime_merge bs&#x3D;1 seek&#x3D;$((0x003A40D2)) conv&#x3D;notrunc\n    printf &quot;License checks for Sublime Merge have been Disabled&quot;\nelse\n    printf &quot;Huh, It seems you entered something other than merge or text. Try re-running this program and specify the proper product.\\n&quot;\nfi\n\n\n\n汉化\n在菜单栏 Preferences\\Package Control  中选择 Install Package 然后输入 ChineseLocalizations 安装即可.\n","slug":"2021-08-31-Sublime-Text-4-注册","date":"2021-08-31T10:49:36.000Z","categories_index":"Linux,Software","tags_index":"Sublime Text","author_index":"JaimeZeng"},{"id":"3fc8dda71e145f0887c22ad3b9f5087b","title":"提升 Chrome 下载速度","content":"使用浏览器下载文件时，下载速度不理想。原因是 Chrome 默认采用单线程下载。所以浏览器想要提高下载速度，就需要采用多线程的下载方式。\n\nChrome 的多线程下载。\n优点：简单便捷，不用安装软件。\n缺点：可以提升 Chrome 下载速度，但是大多数情况下不能满速下载。\n\n\n使用 Aria2 插件接管浏览器下载。\n优点：能够满速下载。\n缺点：需要额外安装 Aria2 软件以及 Chrome 扩展。\n\n\n\n开启 Chrome 的多线程下载功能Chrome 浏览器自带多线程下载功能，默认是关闭的。需要使用以下步骤开启 Chrome 自带的多线程下载功能。\n\nChrome 地址栏输入 chrome://flags/#enable-parallel-downloading。\n将 Parallel downloading选项值更改为 Enabled。\n点击底部的 Relaunch按钮重启 Chrome 即可。\n\n使用 Aria2 插件接管浏览器下载\n\n\n\n\n\n\n\n\n\nAria2 for chrome 是一款为 Chrome 定制的下载任务管理扩展，能够自动拦截或手动添加下载任务到 Aria2 来完成网络资源下载。同时，引入了 AriaNG 作为前端方便用户对 Aria2 进行操作和管理。\n官方 Wiki：Aria2-for-chrome\n\n安装 Aria2 客户端。\n\n命令行客户端：Aria2\n\n\nGUI 终端：Motrix\n\n\n\n\n开启 Chrome 浏览器离线安装扩展功能（能访问谷歌应用商店在线安装扩展的，可以跳过这一步）。\n\nChrome 地址栏输入 chrome://flags/#enable-parallel-downloading。\n将 Extensions on chrome:// URLs选项值更改为 Enabled。\n点击底部的 Relaunch按钮重启 Chrome 即可。\n\n\n安装 Chrome 扩展。\n\n在线安装：aria2-for-chrome 插件地址\n\n离线安装：\n\n地址栏输入 chrome://extensions/进入扩展页面；\n点击右上角 Developer mode 开启开发者模式；\n下载 aria2-for-chrome.zip 解压；\n点击 Load unpacked ，选择刚才解压的文件夹，然后确认即可。\n\n\n\n\n\n","slug":"2021-08-05-提升-Chrome-下载速度","date":"2021-08-05T06:30:21.000Z","categories_index":"Software","tags_index":"Chrome","author_index":"JaimeZeng"},{"id":"58ba0b1f668d7f9d0a6e93511ba031d3","title":"qinglong 青龙面板安装配置","content":"安装青龙\n\nGithub: whyour/qinglong\nDockerHub: whyour/qinglong\n\n安装 Docker# 切换管理员\nsudo su -\n\n# 安装 docker-ce\ncurl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun\n\n# 国内镜像\nmkdir -p &#x2F;etc&#x2F;docker\ncat &gt;&#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt; EOF\n&#123;\n  &quot;registry-mirrors&quot;: [\n      &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,\n      &quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;\n  ]\n&#125;\nEOF\n\n# 创建 docker 工作组\ngroupadd docker\n\n# 添加用户到 docker 工作组\ngpasswd -a $&#123;USER&#125; docker\n\n# 启动 Docker 并加入开机启动项\nsystemctl daemon-reload\nsystemctl enable docker\nsystemctl restart docker\n\n# 校验 docker\ndocker version\n\n安装青龙# 拉取镜像\ndocker pull whyour&#x2F;qinglong:latest\n\n# 启动容器\n## 普通服务器\ndocker run -dit \\\n  -v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config \\\n  -v $PWD&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db \\\n  -v $PWD&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log \\\n  -v $PWD&#x2F;ql&#x2F;repo:&#x2F;ql&#x2F;repo \\\n  -v $PWD&#x2F;ql&#x2F;raw:&#x2F;ql&#x2F;raw \\\n  -v $PWD&#x2F;ql&#x2F;scripts:&#x2F;ql&#x2F;scripts \\\n  -v $PWD&#x2F;ql&#x2F;jbot:&#x2F;ql&#x2F;jbot \\\n  -p 5700:5700 \\\n  -e ENABLE_HANGUP&#x3D;true \\\n  -e ENABLE_TG_BOT&#x3D;true \\\n  -e ENABLE_WEB_PANEL&#x3D;true \\\n  -e TZ&#x3D;CST-8 \\\n  --name qinglong \\\n  --hostname qinglong \\\n  --restart always \\\n  whyour&#x2F;qinglong:latest\n## N1 等路由器\ndocker run -dit \\\n  -v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config \\\n  -v $PWD&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db \\\n  -v $PWD&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log \\\n  -v $PWD&#x2F;ql&#x2F;repo:&#x2F;ql&#x2F;repo \\\n  -v $PWD&#x2F;ql&#x2F;raw:&#x2F;ql&#x2F;raw \\\n  -v $PWD&#x2F;ql&#x2F;scripts:&#x2F;ql&#x2F;scripts \\\n  -v $PWD&#x2F;ql&#x2F;jbot:&#x2F;ql&#x2F;jbot \\\n  -e ENABLE_HANGUP&#x3D;true \\\n  -e ENABLE_TG_BOT&#x3D;true \\\n  -e ENABLE_WEB_PANEL&#x3D;true \\\n  -e TZ&#x3D;CST-8 \\\n  --net host \\\n  --name qinglong \\\n  --hostname qinglong \\\n  --restart always \\\n  whyour&#x2F;qinglong:latest\n## MacVlan 方式\ndocker run -dit \\\n  --name qinglong \\\n  --hostname qinglong \\\n  --restart always \\\n  --net&#x3D;macnet \\\n  --ip&#x3D;192.168.2.20 \\\n  --dns&#x3D;192.168.2.2 \\\n  --mac-address C2:F2:9C:C5:B1:01 \\\n  -v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config \\\n  -v $PWD&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db \\\n  -v $PWD&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log \\\n  -v $PWD&#x2F;ql&#x2F;repo:&#x2F;ql&#x2F;repo \\\n  -v $PWD&#x2F;ql&#x2F;raw:&#x2F;ql&#x2F;raw \\\n  -v $PWD&#x2F;ql&#x2F;scripts:&#x2F;ql&#x2F;scripts \\\n  -v $PWD&#x2F;ql&#x2F;jbot:&#x2F;ql&#x2F;jbot \\\n  -e ENABLE_HANGUP&#x3D;true \\\n  -e ENABLE_TG_BOT&#x3D;true \\\n  -e ENABLE_WEB_PANEL&#x3D;true \\\n  -e TZ&#x3D;CST-8 \\\n  whyour&#x2F;qinglong:latest\n\n# 修改密码\n## 服务器防火墙放行 5700 端口 (如果是国内云主机，还需要到云服务商安全组 &#x2F; 外网防火墙处放行 5700 端口)\n## 访问 http:&#x2F;&#x2F;ip:5700 ，使用 admin&#x2F;adminadmin 登录，网页会提示已初始化密码，使用以下命令获取新密码\ndocker exec -it qinglong cat &#x2F;ql&#x2F;config&#x2F;auth.json\n## 登录面板之后修改用户名和密码即可\n\n青龙基本命令# 进入容器\ndocker exec -it qinglong bash\n# 更新青龙\ndocker exec -it qinglong ql update\n# 更新青龙并编译\ndocker exec -it qinglong ql restart\n# 拉取自定义仓库\ndocker exec -it qinglong ql repo https:&#x2F;&#x2F;github.com&#x2F;whyour&#x2F;hundun.git &quot;quanx&quot; &quot;tokens|caiyun|didi|donate|fold|Env&quot;\n# 拉取单个脚本\ndocker exec -it qinglong ql raw https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;moposmall&#x2F;Script&#x2F;main&#x2F;Me&#x2F;jx_cfd.js\n# 导出互助码\ndocker exec -it qinglong ql code\n# 删除 7 天前的所有日志\ndocker exec -it qinglong ql rmlog 7\n# 启动 bot\ndocker exec -it qinglong ql bot\n# 通知测试\ndocker exec -it qinglong notify test test\n# 立即执行脚本\ndocker exec -it qinglong task test.js now\n# 并行执行脚本\ndocker exec -it qinglong task test.js conc\n\n配置青龙\n设置环境变量面板左侧环境变量管理添加，名称写 JD_COOKIE，值填你自己的 cookie，多个账户之间使用 &amp; 连接。\n安装依赖# @Oreomeow 大佬提供\ndocker exec -it qinglong bash\npackage_name&#x3D;&quot;canvas png-js date-fns axios crypto-js ts-md5 tslib @types&#x2F;node dotenv typescript fs require tslib&quot;\ninstall_dependencies_normal()&#123;\n    for i in $@; do\n        case $i in\n            canvas)\n                cd &#x2F;ql&#x2F;scripts\n                if [[ &quot;$(echo $(npm ls $i) | grep ERR)&quot; !&#x3D; &quot;&quot; ]]; then\n                    npm uninstall $i\n                fi\n                if [[ &quot;$(npm ls $i)&quot; &#x3D;~ (empty) ]]; then\n                    apk add --no-cache build-base g++ cairo-dev pango-dev giflib-dev &amp;&amp; npm i $i --prefix &#x2F;ql&#x2F;scripts --build-from-source\n                fi\n                ;;\n            *)\n                if [[ &quot;$(npm ls $i)&quot; &#x3D;~ $i ]]; then\n                    npm uninstall $i\n                elif [[ &quot;$(echo $(npm ls $i -g) | grep ERR)&quot; !&#x3D; &quot;&quot; ]]; then\n                    npm uninstall $i -g\n                fi\n                if [[ &quot;$(npm ls $i -g)&quot; &#x3D;~ (empty) ]]; then\n                    [[ $i &#x3D; &quot;typescript&quot; ]] &amp;&amp; npm i $i -g --force || npm i $i -g\n                fi\n                ;;\n        esac\n    done\n&#125;\ninstall_dependencies_normal $package_name\n\n修改配置文件\nconfig_sample.sh\n\ndocker exec -it qinglong bash\ncd &#x2F;ql&#x2F;config\nmv config.sh config.sh.bak\ncurl -s -o &quot;config.sh&quot; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Oreomeow&#x2F;VIP&#x2F;main&#x2F;Scripts&#x2F;sh&#x2F;Helpcode2.8&#x2F;config_sample.sh\n\n# 在 vim &#x2F; 面板中编辑 code.sh 文件，根据提示修改即可。\n\n在面板中编辑 config.sh 文件，参考 常用环境变量备份表 修改相关变量。\n拉库# 收集全网目前能正常使用的脚本\nql repo https:&#x2F;&#x2F;github.com&#x2F;shufflewzc&#x2F;faker2.git &quot;jd_|jx_|gua_|jddj_|getJDCookie&quot; &quot;activity|backUp|Coupon|update&quot; &quot;^jd[^_]|USER|utils|function|^JS|^TS|^JDJRValidator_Pure|^ZooFaker|^sign|ql&quot;\n# 无内置 shareCodes，使用助力池，新脚本使用 TypeScript\nql repo https:&#x2F;&#x2F;github.com&#x2F;JDHelloWorld&#x2F;jd_scripts.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp|Coupon|enen|update|test&quot; &quot;^jd[^_]|USER|^TS|utils|notify|env|package|ken.js&quot;\n# 自动互助、提交助力码，随机从数据库中选取助力码互助\nql repo https:&#x2F;&#x2F;github.com&#x2F;he1pu&#x2F;JDHelp.git &quot;jd_|jx_|getJDCookie&quot; &quot;Coupon|update&quot; &quot;^jd[^_]|USER|^sign|^ZooFaker|utils&quot;\n# 收集全网目前能正常使用的脚本\nql repo https:&#x2F;&#x2F;github.com&#x2F;yuannian1112&#x2F;jd_scripts.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|utils&quot;\n# 仓库脚本已内置远程助力地址和助力码\nql repo https:&#x2F;&#x2F;github.com&#x2F;Aaron-lv&#x2F;sync.git &quot;jd_|jx_|getJDCookie&quot; &quot;activity|backUp|Coupon&quot; &quot;^jd[^_]|USER|utils&quot; &quot;jd_scripts&quot;\n# 自动检测账号是否正常，不正常的自动禁用，正常的如果是禁用状态则自动启用.\nql repo https:&#x2F;&#x2F;github.com&#x2F;ccwav&#x2F;QLScript.git &quot;jd_&quot; &quot;sendNotify.js&quot; &quot;ql.js&quot;\n\n\n\n\n\n\n\n\n\n\n定时更新仓库（以 faker2 仓库为例）\n面板中  定时任务  -&gt;  添加定时 \n\n名称: 定时更新仓库\n命令: ql extra\n定时规则: 0 */2 * * *\n\n点击  确定  即可，程序会每隔 2 小时自动更新仓库。\n自动更新助力码\ncode.sh\ntask_before.sh\n\ndocker exec -it qinglong bash\ncd &#x2F;ql&#x2F;config\nmv code.sh code.sh.bak\nmv task_before.sh task_before.sh.bak\ncurl -s -o &quot;code.sh&quot; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Oreomeow&#x2F;VIP&#x2F;main&#x2F;Scripts&#x2F;sh&#x2F;Helpcode2.8&#x2F;code.sh\ncurl -s -o &quot;task_before&quot; https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Oreomeow&#x2F;VIP&#x2F;main&#x2F;Scripts&#x2F;sh&#x2F;Helpcode2.8&#x2F;task_before.sh\n\n# 在 vim &#x2F; 面板中编辑 code.sh 文件，根据提示修改即可。\n## 修改预设的仓库，默认调用 shufflewzc_faker2 仓库\n## 修改互助码模板样式，默认所有账号均等助力\n\n\n\n\n\n\n\n\n\n\n必读一：名称：格式化更新互助码命令：task /ql/config/code.sh定时规则：10 * * * *\n必读二：互助码和互助规则文件路径调整至 /ql/log/.ShareCode；备份路径调整至 /ql/log/.bak_ShareCode/。这两个文件夹会自动创建。可以 通过面板 - 任务日志 查看。\n必读三：task_before.sh 不再负责互助码和互助规则的导入，只负责读取 /ql/log/.ShareCode 的文件并格式化成全局互助变量提交给活动脚本。\n必读四：code.sh 和 task_before.sh 还是仍旧存放在 /ql/config/ 路径不变。\n必读五：目前，尝鲜版 code.sh 或 task_before.sh 仍旧不包含新算法助力规则和全局变量自截断的代码，所以并不能解决 Argument list too long 的问题。如果账号过多提示这个报错，建议分多容器运行。\n备份所有数据都将保存当前目录下的 ql 文件夹中，如需要备份，请直接备份 ql 文件夹即可。\n","slug":"2021-08-02-qinglong-青龙面板安装配置","date":"2021-08-02T08:10:03.000Z","categories_index":"CentOS","tags_index":"CentOS,Linux","author_index":"JaimeZeng"},{"id":"f84f6c3c498bfb6acaafe6ca5d401094","title":"SQL 练习 17 - 获取当前薪水第二多的员工的 emp_no 以及其对应的薪水 salary","content":"题目\n\n\n\n\n\n\n\n\n题目链接：获取当前薪水第二多的员工的emp_no以及其对应的薪水salary\n有一个薪水表 salaries 简况如下：\n\n\n建表及插入数据语句如下：\ndrop table if exists &#96;salaries&#96;;\nCREATE TABLE &#96;salaries&#96;\n(\n    &#96;emp_no&#96;    int(11) NOT NULL,\n    &#96;salary&#96;    int(11) NOT NULL,\n    &#96;from_date&#96; date    NOT NULL,\n    &#96;to_date&#96;   date    NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;, &#96;from_date&#96;)\n);\n\nINSERT INTO salaries\nVALUES (10001, 88958, &#39;2002-06-22&#39;, &#39;9999-01-01&#39;);\nINSERT INTO salaries\nVALUES (10002, 72527, &#39;2001-08-02&#39;, &#39;9999-01-01&#39;);\nINSERT INTO salaries\nVALUES (10003, 43311, &#39;2001-12-01&#39;, &#39;9999-01-01&#39;);\n\n请你获取薪水第二多的员工的 emp_no 以及其对应的薪水 salary：\n+--------+--------+\n| emp_no | salary |\n+--------+--------+\n|  10002 |  72527 |\n+--------+--------+\n1 row in set (0.03 sec)\n\n代码select emp_no, salary\nfrom salaries\nwhere salary &#x3D; (\n    select salary\n    from salaries\n    where to_date &#x3D; &#39;9999-01-01&#39;\n    group by salary\n    order by salary desc\n    limit 1,1\n);\n\n执行结果：\nmysql&gt; select emp_no, salary\n    -&gt; from salaries\n    -&gt; where salary &#x3D; (\n    -&gt;     select salary\n    -&gt;     from salaries\n    -&gt;     where to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;     group by salary\n    -&gt;     order by salary desc\n    -&gt;     limit 1,1\n    -&gt; );\n+--------+--------+\n| emp_no | salary |\n+--------+--------+\n|  10002 |  72527 |\n+--------+--------+\n1 row in set (0.03 sec)\n","slug":"2021-04-10-SQL 练习 17 - 获取当前薪水第二多的员工的 emp_no 以及其对应的薪水 salary","date":"2021-04-10T06:30:21.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"7f1d5492523f1f14e205a73e1b63e766","title":"SQL 练习 16 - 统计出当前各个 title 类型对应的员工当前薪水对应的平均工资","content":"题目\n\n\n\n\n\n\n\n\n题目链接：统计出当前各个title类型对应的员工当前薪水对应的平均工资\n有一个员工职称表 titles 简况如下：\nmysql&gt; select * from titles;\n+--------+-----------------+------------+------------+\n| emp_no | title           | from_date  | to_date    |\n+--------+-----------------+------------+------------+\n|  10001 | Senior engineer | 1986-06-26 | 9999-01-01 |\n|  10003 | Senior Engineer | 2001-12-01 | 9999-01-01 |\n|  10004 | Senior Engineer | 1995-12-01 | 9999-01-01 |\n|  10006 | Senior Engineer | 2001-08-02 | 9999-01-01 |\n|  10007 | Senior staff    | 1996-02-11 | 9999-01-01 |\n+--------+-----------------+------------+------------+\n5 rows in set (0.01 sec)\n\n有一个薪水表 salaries 简况如下：\nmysql&gt; select * from salaries;\n+--------+--------+------------+------------+\n| emp_no | salary | from_date  | to_date    |\n+--------+--------+------------+------------+\n|  10001 |  88958 | 1986-06-26 | 9999-01-01 |\n|  10003 |  43311 | 2001-12-01 | 9999-01-01 |\n|  10004 |  74057 | 1995-12-01 | 9999-01-01 |\n|  10006 |  43311 | 2001-08-02 | 9999-01-01 |\n|  10007 |  88070 | 2002-02-07 | 9999-01-01 |\n+--------+--------+------------+------------+\n5 rows in set (0.02 sec)\n\n建表及插入数据语句如下：\nCREATE TABLE titles\n(\n    &#96;emp_no&#96;    int(11)     NOT NULL,\n    &#96;title&#96;     varchar(50) NOT NULL,\n    &#96;from_date&#96; date        NOT NULL,\n    &#96;to_date&#96;   date DEFAULT NULL\n);\n\nINSERT INTO &#96;titles&#96;\nVALUES (10001, &#39;Senior engineer&#39;, &#39;1986-06-26&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;titles&#96;\nVALUES (10003, &#39;Senior Engineer&#39;, &#39;2001-12-01&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;titles&#96;\nVALUES (10004, &#39;Senior Engineer&#39;, &#39;1995-12-01&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;titles&#96;\nVALUES (10006, &#39;Senior Engineer&#39;, &#39;2001-08-02&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;titles&#96;\nVALUES (10007, &#39;Senior staff   &#39;, &#39;1996-02-11&#39;, &#39;9999-01-01&#39;);\n\nCREATE TABLE &#96;salaries&#96;\n(\n    &#96;emp_no&#96;    int(11) NOT NULL,\n    &#96;salary&#96;    int(11) NOT NULL,\n    &#96;from_date&#96; date    NOT NULL,\n    &#96;to_date&#96;   date    NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;, &#96;from_date&#96;)\n);\n\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 88958, &#39;1986-06-26&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10003, 43311, &#39;2001-12-01&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10004, 74057, &#39;1995-12-01&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10006, 43311, &#39;2001-08-02&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10007, 88070, &#39;2002-02-07&#39;, &#39;9999-01-01&#39;);\n\n请你统计出各个 title 类型对应的员工薪水对应的平均工资 avg。结果给出 title 以及平均工资 avg，并且以 avg 升序排序，以上例子输出如下：\n+-----------------+---------------+\n| title           | avg(s.salary) |\n+-----------------+---------------+\n| Senior engineer | 62409.2500    |\n| Senior staff    | 88070.0000    |\n+-----------------+---------------+\n2 rows in set (0.03 sec)\n\n代码select title, avg(s.salary)\nfrom titles as t\n         inner join salaries as s\n                    on s.emp_no &#x3D; t.emp_no\n                        and s.to_date &#x3D; &#39;9999-01-01&#39;\n                        and t.to_date &#x3D; &#39;9999-01-01&#39;\ngroup by t.title\norder by avg(s.salary);\n\n执行结果：\nmysql&gt; select title, avg(s.salary)\n    -&gt; from titles as t\n    -&gt;          inner join salaries as s\n    -&gt;                     on s.emp_no &#x3D; t.emp_no\n    -&gt;                         and s.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;                         and t.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt; group by t.title\n    -&gt; order by avg(s.salary);\n+-----------------+---------------+\n| title           | avg(s.salary) |\n+-----------------+---------------+\n| Senior engineer | 62409.2500    |\n| Senior staff    | 88070.0000    |\n+-----------------+---------------+\n2 rows in set (0.03 sec)\n","slug":"2021-04-10-SQL 练习 16 - 统计出当前各个 title 类型对应的员工当前薪水对应的平均工资","date":"2021-04-10T06:10:20.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"8dbbf7765577357c58fb44db48779866","title":"SQL 练习 15 - 查找 employees 表所有 emp_no 为奇数","content":"题目\n\n\n\n\n\n\n\n\n题目链接：查找employees表所有emp_no为奇数\n有一个员工表 employees 简况如下：\nmysql&gt; select * from employees;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |\n|  10003 | 1959-12-03 | Parto      | Mary      | M      | 1986-08-28 |\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n|  10005 | 0193-11-07 | Mary       | Sluis     | F      | 1990-01-22 |\n+--------+------------+------------+-----------+--------+------------+\n5 rows in set (0.03 sec)\n\n建表及插入数据语句如下：\nCREATE TABLE &#96;employees&#96;\n(\n    &#96;emp_no&#96;     int(11)     NOT NULL,\n    &#96;birth_date&#96; date        NOT NULL,\n    &#96;first_name&#96; varchar(14) NOT NULL,\n    &#96;last_name&#96;  varchar(16) NOT NULL,\n    &#96;gender&#96;     char(1)     NOT NULL,\n    &#96;hire_date&#96;  date        NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;)\n);\n\nINSERT INTO &#96;employees&#96;\nVALUES (10001, &#39;1953-09-02&#39;, &#39;Georgi&#39;, &#39;Facello&#39;, &#39;M&#39;, &#39;1986-06-26&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10002, &#39;1964-06-02&#39;, &#39;Bezalel&#39;, &#39;Simmel&#39;, &#39;F&#39;, &#39;1985-11-21&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10003, &#39;1959-12-03&#39;, &#39;Parto&#39;, &#39;Mary&#39;, &#39;M&#39;, &#39;1986-08-28&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10004, &#39;1954-05-01&#39;, &#39;Chirstian&#39;, &#39;Koblick&#39;, &#39;M&#39;, &#39;1986-12-01&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10005, &#39;193-11-07&#39;, &#39;Mary&#39;, &#39;Sluis&#39;, &#39;F&#39;, &#39;1990-01-22&#39;);\n\n请你查找 employees 表所有 emp_no 为奇数，且 last_name 不为 Mary 的员工信息，并按照 hire_date 逆序排列，以上例子查询结果如下：\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10005 | 0193-11-07 | Mary       | Sluis     | F      | 1990-01-22 |\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n+--------+------------+------------+-----------+--------+------------+\n3 rows in set (0.02 sec)ql\n\n\n代码select *\nfrom employees\nwhere emp_no &amp; 1\n  and last_name &lt;&gt; &#39;Mary&#39;\norder by hire_date desc;\n\n执行结果：\nmysql&gt; select *\n    -&gt; from employees\n    -&gt; where emp_no &amp; 1\n    -&gt;   and last_name &lt;&gt; &#39;Mary&#39;\n    -&gt; order by hire_date desc;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10005 | 0193-11-07 | Mary       | Sluis     | F      | 1990-01-22 |\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n+--------+------------+------------+-----------+--------+------------+\n3 rows in set (0.02 sec)\n","slug":"2021-04-10-SQL 练习 15 - 查找 employees 表所有 emp_no 为奇数","date":"2021-04-10T06:05:02.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"f8017dd1008f3562251696136ad1fbad","title":"SQL 练习 12 - 获取所有部门中当前员工薪水最高的相关信息","content":"题目\n\n\n\n\n\n\n\n\n题目链接： 获取所有部门中当前员工薪水最高的相关信息\n有一个员工表 dept_emp 简况如下：\nmysql&gt; select * from dept_emp;\n+--------+---------+------------+------------+\n| emp_no | dept_no | from_date  | to_date    |\n+--------+---------+------------+------------+\n|  10001 | d001    | 1986-06-26 | 9999-01-01 |\n|  10002 | d001    | 1996-08-03 | 9999-01-01 |\n|  10003 | d002    | 1996-08-03 | 9999-01-01 |\n+--------+---------+------------+------------+\n3 rows in set(0.03 sec)\n\n有一个薪水表 salaries 简况如下：\nmysql&gt; select * from salaries;\n+--------+--------+------------+------------+\n| emp_no | salary | from_date  | to_date    |\n+--------+--------+------------+------------+\n|  10001 |  88958 | 2002-06-22 | 9999-01-01 |\n|  10002 |  72527 | 2001-08-02 | 9999-01-01 |\n|  10003 |  92527 | 2001-08-02 | 9999-01-01 |\n+--------+--------+------------+------------+\n3 rows in set(0.03 sec)\n\n建表及插入数据语句如下：\nCREATE TABLE &#96;dept_emp&#96;\n (\n    &#96;emp_no&#96;    int(11)     NOT NULL,\n    &#96;dept_no&#96;   varchar(16) NOT NULL,\n    &#96;from_date&#96; date        NOT NULL,\n    &#96;to_date&#96;   date        NOT NULL,\n    PRIMARY KEY(&#96;emp_no&#96;, &#96;dept_no&#96;)\n);\n\nINSERT INTO &#96;dept_emp&#96;\nVALUES(10001, &#39;d001&#39;, &#39;1986-06-26&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;dept_emp&#96;\nVALUES(10002, &#39;d001&#39;, &#39;1996-08-03&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;dept_emp&#96;\nVALUES(10003, &#39;d002&#39;, &#39;1996-08-03&#39;, &#39;9999-01-01&#39;);\n\nCREATE TABLE &#96;salaries&#96;\n (\n    &#96;emp_no&#96;    int(11) NOT NULL,\n    &#96;salary&#96;    int(11) NOT NULL,\n    &#96;from_date&#96; date    NOT NULL,\n    &#96;to_date&#96;   date    NOT NULL,\n    PRIMARY KEY(&#96;emp_no&#96;, &#96;from_date&#96; )\n);\n\nINSERT INTO &#96;salaries&#96;\nVALUES(10001,88958, &#39;2002-06-22&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES(10002,72527, &#39;2001-08-02&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES(10003,92527, &#39;2001-08-02&#39;, &#39;9999-01-01&#39;);\n\n获取所有部门中员工薪水最高的相关信息，给出 dept_no, emp_no 以及其对应的 salary，按照部门编号升序排列，以上例子输出如下：\n+---------+--------+-----------+\n| dept_no | emp_no | maxSalary |\n+---------+--------+-----------+\n| d001    |  10001 |     88958 |\n| d002    |  10003 |     92527 |\n+---------+--------+-----------+\n2 rows in set(0.04 sec)\n\n测试用例 1drop table if exists &#96;dept_emp&#96;;\ndrop table if exists &#96;salaries&#96;;\nCREATE TABLE &#96;dept_emp&#96;\n (\n    &#96;emp_no&#96;    int(11) NOT NULL,\n    &#96;dept_no&#96;   char(4) NOT NULL,\n    &#96;from_date&#96; date    NOT NULL,\n    &#96;to_date&#96;   date    NOT NULL,\n    PRIMARY KEY(&#96;emp_no&#96;, &#96;dept_no&#96;)\n);\nCREATE TABLE &#96;salaries&#96;\n (\n    &#96;emp_no&#96;    int(11) NOT NULL,\n    &#96;salary&#96;    int(11) NOT NULL,\n    &#96;from_date&#96; date    NOT NULL,\n    &#96;to_date&#96;   date    NOT NULL,\n    PRIMARY KEY(&#96;emp_no&#96;, &#96;from_date&#96;)\n);\nINSERT INTO dept_emp\nVALUES(10001, &#39;d001&#39;, &#39;1986-06-26&#39;, &#39;9999-01-01&#39;);\nINSERT INTO dept_emp\nVALUES(10002, &#39;d001&#39;, &#39;1996-08-03&#39;, &#39;9999-01-01&#39;);\nINSERT INTO dept_emp\nVALUES(10003, &#39;d004&#39;, &#39;1995-12-03&#39;, &#39;9999-01-01&#39;);\nINSERT INTO dept_emp\nVALUES(10004, &#39;d004&#39;, &#39;1986-12-01&#39;, &#39;9999-01-01&#39;);\nINSERT INTO dept_emp\nVALUES(10005, &#39;d003&#39;, &#39;1989-09-12&#39;, &#39;9999-01-01&#39;);\nINSERT INTO dept_emp\nVALUES(10006, &#39;d002&#39;, &#39;1990-08-05&#39;, &#39;9999-01-01&#39;);\nINSERT INTO dept_emp\nVALUES(10007, &#39;d005&#39;, &#39;1989-02-10&#39;, &#39;9999-01-01&#39;);\nINSERT INTO dept_emp\nVALUES(10009, &#39;d006&#39;, &#39;1985-02-18&#39;, &#39;9999-01-01&#39;);\nINSERT INTO dept_emp\nVALUES(10010, &#39;d006&#39;, &#39;2000-06-26&#39;, &#39;9999-01-01&#39;);\n\nINSERT INTO salaries\nVALUES(10001,88958, &#39;2002-06-22&#39;, &#39;9999-01-01&#39;);\nINSERT INTO salaries\nVALUES(10002,72527, &#39;2001-08-02&#39;, &#39;9999-01-01&#39;);\nINSERT INTO salaries\nVALUES(10003,43311, &#39;2001-12-01&#39;, &#39;9999-01-01&#39;);\nINSERT INTO salaries\nVALUES(10004,74057, &#39;2001-11-27&#39;, &#39;9999-01-01&#39;);\nINSERT INTO salaries\nVALUES(10005,94692, &#39;2001-09-09&#39;, &#39;9999-01-01&#39;);\nINSERT INTO salaries\nVALUES(10006,43311, &#39;2001-08-02&#39;, &#39;9999-01-01&#39;);\nINSERT INTO salaries\nVALUES(10007,88070, &#39;2002-02-07&#39;, &#39;9999-01-01&#39;);\nINSERT INTO salaries\nVALUES(10009,95409, &#39;2002-02-14&#39;, &#39;9999-01-01&#39;);\nINSERT INTO salaries\nVALUES(10010,94409, &#39;2001-11-23&#39;, &#39;9999-01-01&#39;);\n\n结构如下：\nmysql&gt; select * from dept_emp;\n+--------+---------+------------+------------+\n| emp_no | dept_no | from_date  | to_date    |\n+--------+---------+------------+------------+\n|  10001 | d001    | 1986-06-26 | 9999-01-01 |\n|  10002 | d001    | 1996-08-03 | 9999-01-01 |\n|  10003 | d004    | 1995-12-03 | 9999-01-01 |\n|  10004 | d004    | 1986-12-01 | 9999-01-01 |\n|  10005 | d003    | 1989-09-12 | 9999-01-01 |\n|  10006 | d002    | 1990-08-05 | 9999-01-01 |\n|  10007 | d005    | 1989-02-10 | 9999-01-01 |\n|  10009 | d006    | 1985-02-18 | 9999-01-01 |\n|  10010 | d006    | 2000-06-26 | 9999-01-01 |\n+--------+---------+------------+------------+\n9 rows in set(0.03 sec)\n\nmysql&gt; select * from salaries;\n+--------+--------+------------+------------+\n| emp_no | salary | from_date  | to_date    |\n+--------+--------+------------+------------+\n|  10001 |  88958 | 2002-06-22 | 9999-01-01 |\n|  10002 |  72527 | 2001-08-02 | 9999-01-01 |\n|  10003 |  43311 | 2001-12-01 | 9999-01-01 |\n|  10004 |  74057 | 2001-11-27 | 9999-01-01 |\n|  10005 |  94692 | 2001-09-09 | 9999-01-01 |\n|  10006 |  43311 | 2001-08-02 | 9999-01-01 |\n|  10007 |  88070 | 2002-02-07 | 9999-01-01 |\n|  10009 |  95409 | 2002-02-14 | 9999-01-01 |\n|  10010 |  94409 | 2001-11-23 | 9999-01-01 |\n+--------+--------+------------+------------+\n9 rows in set(0.03 sec)\n\n代码 1一个部门存在多个人的薪水 salary 等于部门 dept_no 的 max(salary)，全部显示。\nselect dms.dept_no, sas.emp_no, dms.maxSalary\nfrom (\n         select de.dept_no as dept_no, max(sa.salary) as maxSalary\n         from dept_emp as de,\n              salaries as sa\n         where de.emp_no &#x3D; sa.emp_no\n           and de.to_date &#x3D; &#39;9999-01-01&#39;\n           and sa.to_date &#x3D; &#39;9999-01-01&#39;\n         group by de.dept_no\n)as dms,\n     dept_emp as dep,\n     salaries as sas\nwhere sas.salary &#x3D; dms.maxSalary\n  and dep.emp_no &#x3D; sas.emp_no\n  and dep.to_date &#x3D; &#39;9999-01-01&#39;\n  and sas.to_date &#x3D; &#39;9999-01-01&#39;\norder by dms.dept_no asc;\n\n先创建一张部门员工最大 salary 表，用于记录 dept_no 和 dept_no 的 max(salary):\nmysql&gt; select de.dept_no as dept_no, max(sa.salary) as maxSalary\n    -&gt; from dept_emp as de,\n    -&gt;      salaries as sa\n    -&gt; where de.emp_no &#x3D; sa.emp_no\n    -&gt;   and de.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;   and sa.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt; group by de.dept_no;\n+---------+-----------+\n| dept_no | maxSalary |\n+---------+-----------+\n| d001    |     88958 |\n| d002    |     92527 |\n+---------+-----------+\n2 rows in set(0.04 sec)\n\n然后关联三张表（部门员工表 dept_emp、薪水表 salaries、部门最大薪水表 dept_max_salary)，选择工资 salary 等于部门编号 dept_no 的 max(salary) 的员工 dept_emp.emp_no，最后按照部门编号 dept_no 升序排列。\nmysql&gt; select dms.dept_no, sas.emp_no, dms.maxSalary\n    -&gt; from (\n    -&gt;          select de.dept_no as dept_no, max(sa.salary) as maxSalary\n    -&gt;          from dept_emp as de,\n    -&gt;               salaries as sa\n    -&gt;          where de.emp_no &#x3D; sa.emp_no\n    -&gt;            and de.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;            and sa.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;          group by de.dept_no\n    -&gt;)as dms,\n    -&gt;      dept_emp as dep,\n    -&gt;      salaries as sas\n    -&gt; where sas.salary &#x3D; dms.maxSalary\n    -&gt;   and dep.emp_no &#x3D; sas.emp_no\n    -&gt;   and dep.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;   and sas.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt; order by dms.dept_no asc;\n+---------+--------+-----------+\n| dept_no | emp_no | maxSalary |\n+---------+--------+-----------+\n| d001    |  10001 |     88958 |\n| d002    |  10003 |     92527 |\n+---------+--------+-----------+\n2 rows in set(0.04 sec)\n\nmysql&gt; select dms.dept_no, sas.emp_no, dms.maxSalary\n    -&gt; from (\n    -&gt;          select de.dept_no as dept_no, max(sa.salary) as maxSalary\n    -&gt;          from dept_emp as de,\n    -&gt;               salaries as sa\n    -&gt;          where de.emp_no &#x3D; sa.emp_no\n    -&gt;            and de.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;            and sa.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;          group by de.dept_no\n    -&gt;)as dms,\n    -&gt;      dept_emp as dep,\n    -&gt;      salaries as sas\n    -&gt; where sas.salary &#x3D; dms.maxSalary\n    -&gt;   and dep.emp_no &#x3D; sas.emp_no\n    -&gt;   and dep.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;   and sas.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt; order by dms.dept_no asc;\n+---------+--------+-----------+\n| dept_no | emp_no | maxSalary |\n+---------+--------+-----------+\n| d001    |  10001 |     88958 |\n| d002    |  10003 |     43311 |\n| d002    |  10006 |     43311 |\n| d003    |  10005 |     94692 |\n| d004    |  10004 |     74057 |\n| d005    |  10007 |     88070 |\n| d006    |  10009 |     95409 |\n+---------+--------+-----------+\n7 rows in set(0.02 sec)\n\n代码 2一个部门存在多个人的薪水 salary 等于部门 dept_no 的 max(salary)，只显示员工号 emp_no 最大的一条。\nselect es.dept_no, es.emp_no, es.salary as maxSalary\nfrom (\n         select de.dept_no, de.emp_no, sa.salary\n         from dept_emp as de,\n              salaries as sa\n         where de.emp_no &#x3D; sa.emp_no\n           and de.to_date &#x3D; &#39;9999-01-01&#39;\n           and sa.to_date &#x3D; &#39;9999-01-01&#39;\n         order by sa.salary desc\n    )as es\ngroup by es.dept_no\norder by es.dept_no asc;\n\n先将所有员工薪资按照降序排列：\nmysql&gt; select de.dept_no, de.emp_no, sa.salary\n    -&gt; from dept_emp as de,\n    -&gt;      salaries as sa\n    -&gt; where de.emp_no &#x3D; sa.emp_no\n    -&gt;   and de.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;   and sa.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt; order by sa.salary desc;\n+---------+--------+--------+\n| dept_no | emp_no | salary |\n+---------+--------+--------+\n| d006    |  10009 |  95409 |\n| d003    |  10005 |  94692 |\n| d006    |  10010 |  94409 |\n| d001    |  10001 |  88958 |\n| d005    |  10007 |  88070 |\n| d004    |  10004 |  74057 |\n| d001    |  10002 |  72527 |\n| d002    |  10006 |  43311 |\n| d004    |  10003 |  43311 |\n+---------+--------+--------+\n9 rows in set (0.03 sec)\n\n然后使用 group by 默认取非聚合数据的第一条记录，然后按照部门编号 dept_no 升序排列。（在 mysql 上也会触发 only_full_group_by 模式，select 列表中出现 group by 和聚合函数之外的非聚合字段）\nselect es.dept_no, es.emp_no, es.salary as maxSalary\nfrom (\n         select de.dept_no, de.emp_no, sa.salary\n         from dept_emp as de,\n              salaries as sa\n         where de.emp_no &#x3D; sa.emp_no\n           and de.to_date &#x3D; &#39;9999-01-01&#39;\n           and sa.to_date &#x3D; &#39;9999-01-01&#39;\n         order by sa.salary desc\n    )as es\ngroup by es.dept_no\norder by es.dept_no asc;\n","slug":"2021-04-09-SQL 练习 12 - 获取所有部门中当前员工薪水最高的相关信息","date":"2021-04-09T11:58:08.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"d999d4d857c4990140fca7cdb9ae2222","title":"SQL 练习 11 - 获取所有员工当前的 manager","content":"题目\n\n\n\n\n\n\n\n\n题目链接：获取所有员工当前的manager\n有一个员工表 dept_emp 简况如下：\nmysql&gt; select * from dept_emp;\n+--------+---------+------------+------------+\n| emp_no | dept_no | from_date  | to_date    |\n+--------+---------+------------+------------+\n|  10001 | d001    | 1986-06-26 | 9999-01-01 |\n|  10002 | d001    | 1996-08-03 | 9999-01-01 |\n|  10003 | d002    | 1995-12-03 | 9999-01-01 |\n+--------+---------+------------+------------+\n\n第一行表示为员工编号为 10001 的部门是 d001 部门。\n有一个部门经理表 dept_manager 简况如下：\nmysql&gt; select * from dept_manager;\n+---------+--------+------------+------------+\n| dept_no | emp_no | from_date  | to_date    |\n+---------+--------+------------+------------+\n| d001    |  10002 | 1996-08-03 | 9999-01-01 |\n| d002    |  10003 | 1990-08-05 | 9999-01-01 |\n+---------+--------+------------+------------+\n2 rows in set (0.03 sec)\n\n第一行表示为 d001 部门的经理是编号为 10002 的员工。\n建表及插入数据语句如下：\nCREATE TABLE &#96;dept_emp&#96;\n(\n    &#96;emp_no&#96;    int(11)     NOT NULL,\n    &#96;dept_no&#96;   varchar(16) NOT NULL,\n    &#96;from_date&#96; date        NOT NULL,\n    &#96;to_date&#96;   date        NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;)\n);\n\nINSERT INTO &#96;dept_emp&#96;\nVALUES (10001, &#39;d001&#39;, &#39;1986-06-26&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;dept_emp&#96;\nVALUES (10002, &#39;d001&#39;, &#39;1996-08-03&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;dept_emp&#96;\nVALUES (10003, &#39;d002&#39;, &#39;1995-12-03&#39;, &#39;9999-01-01&#39;);\n\nCREATE TABLE &#96;dept_manager&#96;\n(\n    &#96;dept_no&#96;   varchar(16) NOT NULL,\n    &#96;emp_no&#96;    int(11)     NOT NULL,\n    &#96;from_date&#96; date        NOT NULL,\n    &#96;to_date&#96;   date        NOT NULL,\n    PRIMARY KEY (&#96;dept_no&#96;)\n);\n\nINSERT INTO &#96;dept_manager&#96;\nVALUES (&#39;d001&#39;, 10002, &#39;1996-08-03&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;dept_manager&#96;\nVALUES (&#39;d002&#39;, 10003, &#39;1990-08-05&#39;, &#39;9999-01-01&#39;);\n\n获取所有的员工和员工对应的经理，如果员工本身是经理的话则不显示，以上例子如下：\n+--------+---------+\n| emp_no | manager |\n+--------+---------+\n|  10001 |   10002 |\n+--------+---------+\n1 row in set (0.02 sec)\n\n代码select de.emp_no as emp_no, dm.emp_no as manager\nfrom dept_emp as de\n         inner join dept_manager as dm\n                    on de.dept_no &#x3D; dm.dept_no\nwhere de.to_date &#x3D; &#39;9999-01-01&#39;\n  and dm.to_date &#x3D; &#39;9999-01-01&#39;\n  and de.emp_no &lt;&gt; dm.emp_no;\n\n执行结果：\nmysql&gt; select de.emp_no as emp_no, dm.emp_no as manager\n    -&gt; from dept_emp as de\n    -&gt;          inner join dept_manager as dm\n    -&gt;                     on de.dept_no &#x3D; dm.dept_no\n    -&gt; where de.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;   and dm.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;   and de.emp_no &lt;&gt; dm.emp_no;\n+--------+---------+\n| emp_no | manager |\n+--------+---------+\n|  10001 |   10002 |\n+--------+---------+\n1 row in set (0.02 sec)\n","slug":"2021-04-09-SQL 练习 11 - 获取所有员工当前的 manager","date":"2021-04-09T11:50:56.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"cf79093335f0bbcd8fd2d3201c73b441","title":"SQL 练习 10 - 获取所有非 manager 的员工 emp_no","content":"题目\n\n\n\n\n\n\n\n\n题目链接：    获取所有非manager的员工emp_no\n有一个员工表 employees 简况如下：\nmysql&gt; select * from employees;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |\n|  10003 | 1959-12-03 | Parto      | Bamtor    | M      | 1986-08-28 |\n+--------+------------+------------+-----------+--------+------------+\n3 rows in set (0.05 sec)\n\n有一个各个部门的领导表 dept_manager 简况如下：\nmysql&gt; select * from dept_manager;\n+---------+--------+------------+------------+\n| dept_no | emp_no | from_date  | to_date    |\n+---------+--------+------------+------------+\n| d001    |  10002 | 1996-08-03 | 9999-01-01 |\n| d002    |  10003 | 1990-08-05 | 9999-01-01 |\n+---------+--------+------------+------------+\n2 rows in set (0.04 sec)\n\n建表及插入数据语句如下：\nCREATE TABLE &#96;employees&#96;\n(\n    &#96;emp_no&#96;     int(11)     NOT NULL,\n    &#96;birth_date&#96; date        NOT NULL,\n    &#96;first_name&#96; varchar(14) NOT NULL,\n    &#96;last_name&#96;  varchar(16) NOT NULL,\n    &#96;gender&#96;     char(1)     NOT NULL,\n    &#96;hire_date&#96;  date        NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;)\n);\n\nINSERT INTO &#96;employees&#96;\nVALUES (10001, &#39;1953-09-02&#39;, &#39;Georgi&#39;, &#39;Facello&#39;, &#39;M&#39;, &#39;1986-06-26&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10002, &#39;1964-06-02&#39;, &#39;Bezalel&#39;, &#39;Simmel&#39;, &#39;F&#39;, &#39;1985-11-21&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10003, &#39;1959-12-03&#39;, &#39;Parto &#39;, &#39;Bamtor&#39;, &#39;M&#39;, &#39;1986-08-28&#39;);\n\nCREATE TABLE &#96;dept_manager&#96;\n(\n    &#96;dept_no&#96;   char(4) NOT NULL,\n    &#96;emp_no&#96;    int(11) NOT NULL,\n    &#96;from_date&#96; date    NOT NULL,\n    &#96;to_date&#96;   date    NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;, &#96;dept_no&#96;)\n);\n\nINSERT INTO &#96;dept_manager&#96;\nVALUES (&#39;d001&#39;, 10002, &#39;1996-08-03&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;dept_manager&#96;\nVALUES (&#39;d002&#39;, 10003, &#39;1990-08-05&#39;, &#39;9999-01-01&#39;);\n\n请你找出所有非部门领导的员工 emp_no，以上例子输出：\n+--------+\n| emp_no |\n+--------+\n|  10001 |\n+--------+\n1 row in set (0.02 sec)\n\n代码select emp_no\nfrom employees\nwhere emp_no not in (\n    select emp_no\n    from dept_manager\n);\n\nselect em.emp_no\nfrom employees as em\nleft outer join dept_manager as dm\non em.emp_no &#x3D; dm.emp_no\nwhere dm.emp_no is null;\n\n执行结果：\nmysql&gt; select em.emp_no\n    -&gt; from employees as em\n    -&gt; left outer join dept_manager as dm\n    -&gt; on em.emp_no &#x3D; dm.emp_no\n    -&gt; where dm.emp_no is null;\n+--------+\n| emp_no |\n+--------+\n|  10001 |\n+--------+\n1 row in set (0.04 sec)\n","slug":"2021-04-09-SQL 练习 10 - 获取所有非 manager 的员工 emp_no","date":"2021-04-09T11:35:56.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"cfcb2bb8cf695bb46581e53552840c49","title":"SQL 练习 08 - 找出所有员工当前具体的薪水 salary 情况","content":"题目\n\n\n\n\n\n\n\n\n题目链接：找出所有员工当前具体的薪水salary情况-牛客网\n有一个薪水表，salaries 简况如下：\nmysql&gt; select * from salaries;\n+--------+--------+------------+------------+\n| emp_no | salary | from_date  | to_date    |\n+--------+--------+------------+------------+\n|  10001 |  72527 | 2002-06-22 | 9999-01-01 |\n|  10002 |  72527 | 2001-08-22 | 9999-01-01 |\n|  10003 |  43311 | 2001-12-01 | 9999-01-01 |\n+--------+--------+------------+------------+\n3 rows in set (0.02 sec)\n\n建表及插入数据语句如下：\nCREATE TABLE &#96;salaries&#96;\n(\n    &#96;emp_no&#96;    int(11) NOT NULL,\n    &#96;salary&#96;    int(11) NOT NULL,\n    &#96;from_date&#96; date    NOT NULL,\n    &#96;to_date&#96;   date    NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;, &#96;from_date&#96;)\n);\n\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 72527, &#39;2002-06-22&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10002, 72527, &#39;2001-08-22&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10003, 43311, &#39;2001-12-01&#39;, &#39;9999-01-01&#39;);\n\n请你找出所有员工具体的薪水 salary 情况，对于相同的薪水只显示一次，并按照逆序显示，以上例子输出如下：\n+--------+\n| salary |\n+--------+\n|  72527 |\n|  43311 |\n+--------+\n2 rows in set (0.02 sec)\n\n代码select distinct salary\nfrom salaries\nwhere to_date &#x3D; &#39;9999-01-01&#39;\norder by salary desc;\n\nselect salary\nfrom salaries\nwhere to_date &#x3D; &#39;9999-01-01&#39;\ngroup by salary\norder by salary desc;\n\n执行结果：\nmysql&gt; select distinct salary\n    -&gt; from salaries\n    -&gt; where to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt; order by salary desc;\n+--------+\n| salary |\n+--------+\n|  72527 |\n|  43311 |\n+--------+\n2 rows in set (0.02 sec)\n\nmysql&gt; select salary\n    -&gt; from salaries\n    -&gt; where to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt; group by salary\n    -&gt; order by salary desc;\n+--------+\n| salary |\n+--------+\n|  72527 |\n|  43311 |\n+--------+\n2 rows in set (0.02 sec)\n","slug":"2021-04-09-SQL 练习 08 - 找出所有员工当前具体的薪水 salary 情况","date":"2021-04-09T11:32:06.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"fad862217846453f877bc21dd3654c0c","title":"SQL 练习 07 - 查找薪水涨幅超过 15 次的员工号 emp_no 以及其对应的涨幅次数 t","content":"题目\n\n\n\n\n\n\n\n\n题目链接：查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t-牛客网\n有一个薪水表，salaries 简况如下：\nmysql&gt; select * from salaries;\n+--------+--------+------------+------------+\n| emp_no | salary | from_date  | to_date    |\n+--------+--------+------------+------------+\n|  10001 |  60117 | 1986-06-26 | 1987-06-26 |\n|  10001 |  62102 | 1987-06-26 | 1988-06-25 |\n|  10001 |  66074 | 1988-06-25 | 1989-06-25 |\n|  10001 |  66596 | 1989-06-25 | 1990-06-25 |\n|  10001 |  66961 | 1990-06-25 | 1991-06-25 |\n|  10001 |  71046 | 1991-06-25 | 1992-06-24 |\n|  10001 |  74333 | 1992-06-24 | 1993-06-24 |\n|  10001 |  75286 | 1993-06-24 | 1994-06-24 |\n|  10001 |  75994 | 1994-06-24 | 1995-06-24 |\n|  10001 |  76884 | 1995-06-24 | 1996-06-23 |\n|  10001 |  80013 | 1996-06-23 | 1997-06-23 |\n|  10001 |  81025 | 1997-06-23 | 1998-06-23 |\n|  10001 |  81097 | 1998-06-23 | 1999-06-23 |\n|  10001 |  84917 | 1999-06-23 | 2000-06-22 |\n|  10001 |  85112 | 2000-06-22 | 2001-06-22 |\n|  10001 |  85097 | 2001-06-22 | 2002-06-22 |\n|  10002 |  72527 | 1996-08-03 | 1997-08-03 |\n+--------+--------+------------+------------+\n17 rows in set (0.03 sec)\n\n建表及插入数据语句如下：\nCREATE TABLE &#96;salaries&#96;\n(\n    &#96;emp_no&#96;    int(11) NOT NULL,\n    &#96;salary&#96;    int(11) NOT NULL,\n    &#96;from_date&#96; date    NOT NULL,\n    &#96;to_date&#96;   date    NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;, &#96;from_date&#96;)\n);\n\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 60117, &#39;1986-06-26&#39;, &#39;1987-06-26&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 62102, &#39;1987-06-26&#39;, &#39;1988-06-25&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 66074, &#39;1988-06-25&#39;, &#39;1989-06-25&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 66596, &#39;1989-06-25&#39;, &#39;1990-06-25&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 66961, &#39;1990-06-25&#39;, &#39;1991-06-25&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 71046, &#39;1991-06-25&#39;, &#39;1992-06-24&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 74333, &#39;1992-06-24&#39;, &#39;1993-06-24&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 75286, &#39;1993-06-24&#39;, &#39;1994-06-24&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 75994, &#39;1994-06-24&#39;, &#39;1995-06-24&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 76884, &#39;1995-06-24&#39;, &#39;1996-06-23&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 80013, &#39;1996-06-23&#39;, &#39;1997-06-23&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 81025, &#39;1997-06-23&#39;, &#39;1998-06-23&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 81097, &#39;1998-06-23&#39;, &#39;1999-06-23&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 84917, &#39;1999-06-23&#39;, &#39;2000-06-22&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 85112, &#39;2000-06-22&#39;, &#39;2001-06-22&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 85097, &#39;2001-06-22&#39;, &#39;2002-06-22&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10002, 72527, &#39;1996-08-03&#39;, &#39;1997-08-03&#39;);\n\n请你查找薪水记录超过 15 次的员工号 emp_no 以及其对应的记录次数 t，以上例子输出如下：\n+--------+----+\n| emp_no | t  |\n+--------+----+\n|  10001 | 16 |\n+--------+----+\n1 row in set (0.01 sec)\n\n代码select emp_no, count(emp_no) as t\nfrom salaries\ngroup by emp_no\nhaving t &gt; 15;\n\n执行结果：\nmysql&gt; select emp_no, count(emp_no) as t\n    -&gt; from salaries\n    -&gt; group by emp_no\n    -&gt; having t &gt; 15;\n+--------+----+\n| emp_no | t  |\n+--------+----+\n|  10001 | 16 |\n+--------+----+\n1 row in set (0.03 sec)\n","slug":"2021-04-09-SQL 练习 07 - 查找薪水涨幅超过 15 次的员工号 emp_no 以及其对应的涨幅次数 t","date":"2021-04-09T11:29:20.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"83acaf1df61848614cb9fed2fd95464c","title":"SQL 练习 05 - 查找所有员工的 last_name 和 first_name 以及对应部门编号 dept_no","content":"题目\n\n\n\n\n\n\n\n\n题目链接：查找所有员工的last_name和first_name以及对应部门编号dept_no-牛客网\n有一个员工表，employees 简况如下：\nmysql&gt; select * from employees;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |\n|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n+--------+------------+------------+-----------+--------+------------+\n4 rows in set (0.02 sec)\n\n有一个部门表，dept_emp 简况如下：\nmysql&gt; select * from dept_emp;\n+--------+---------+------------+------------+\n| emp_no | dept_no | from_date  | to_date    |\n+--------+---------+------------+------------+\n|  10001 | d001    | 1986-06-26 | 9999-01-01 |\n|  10002 | d002    | 1996-08-03 | 9999-01-01 |\n+--------+---------+------------+------------+\n2 rows in set (0.02 sec)\n\n建表及插入数据语句如下：\n-- ----------------------------\n-- Table structure for employees\n-- ----------------------------\nDROP TABLE IF EXISTS &#96;employees&#96;;\nCREATE TABLE &#96;employees&#96;\n(\n    &#96;emp_no&#96;     int(11)     NOT NULL,\n    &#96;birth_date&#96; date        NOT NULL,\n    &#96;first_name&#96; varchar(14) NOT NULL,\n    &#96;last_name&#96;  varchar(16) NOT NULL,\n    &#96;gender&#96;     char(1)     NOT NULL,\n    &#96;hire_date&#96;  date        NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;)\n);\n\n-- ----------------------------\n-- Records of employees\n-- ----------------------------\nINSERT INTO &#96;employees&#96;\nVALUES (10001, &#39;1953-09-02&#39;, &#39;Georgi&#39;, &#39;Facello&#39;, &#39;M&#39;, &#39;1986-06-26&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10002, &#39;1964-06-02&#39;, &#39;Bezalel&#39;, &#39;Simmel&#39;, &#39;F&#39;, &#39;1985-11-21&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10003, &#39;1959-12-03&#39;, &#39;Parto&#39;, &#39;Bamford&#39;, &#39;M&#39;, &#39;1986-08-28&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10004, &#39;1954-05-01&#39;, &#39;Chirstian&#39;, &#39;Koblick&#39;, &#39;M&#39;, &#39;1986-12-01&#39;);\n\n-- ----------------------------\n-- Table structure for dept_emp\n-- ----------------------------\nDROP TABLE IF EXISTS &#96;dept_emp&#96;;\nCREATE TABLE &#96;dept_emp&#96;\n(\n    &#96;emp_no&#96;    int(11) NOT NULL,\n    &#96;dept_no&#96;   char(4) NOT NULL,\n    &#96;from_date&#96; date    NOT NULL,\n    &#96;to_date&#96;   date    NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;, &#96;dept_no&#96;)\n);\n\n-- ----------------------------\n-- Records of dept_emp\n-- ----------------------------\nINSERT INTO &#96;dept_emp&#96;\nVALUES (10001, &#39;d001&#39;, &#39;1986-06-26&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;dept_emp&#96;\nVALUES (10002, &#39;d002&#39;, &#39;1996-08-03&#39;, &#39;9999-01-01&#39;);\n\n请你查找所有已经分配部门的员工的 last_name 和 first_name 以及 dept_no，也包括暂时没有分配具体部门的员工，以上例子如下：\n+-----------+------------+---------+\n| last_name | first_name | dept_no |\n+-----------+------------+---------+\n| Facello   | Georgi     | d001    |\n| Simmel    | Bezalel    | d002    |\n| Bamford   | Parto      | NULL    |\n| Koblick   | Chirstian  | NULL    |\n+-----------+------------+---------+\n4 rows in set (0.03 sec)\n\n代码select employees.last_name, employees.first_name, dept_emp.dept_no\nfrom employees\n         left outer join dept_emp\n                   on employees.emp_no &#x3D; dept_emp.emp_no;\n\nSELECT * FROM TableA LEFT OUTER JOIN TableB ON TableA.name = TableB.name; 产生表 A 的完全集，而表 B 中匹配的则有值，没有匹配的则以 null 值取代。\n执行结果：\nmysql&gt; select employees.last_name, employees.first_name, dept_emp.dept_no\n    -&gt; from employees\n    -&gt;          left outer join dept_emp\n    -&gt;                    on employees.emp_no &#x3D; dept_emp.emp_no;\n+-----------+------------+---------+\n| last_name | first_name | dept_no |\n+-----------+------------+---------+\n| Facello   | Georgi     | d001    |\n| Simmel    | Bezalel    | d002    |\n| Bamford   | Parto      | NULL    |\n| Koblick   | Chirstian  | NULL    |\n+-----------+------------+---------+\n4 rows in set (0.02 sec)\n","slug":"2021-04-09-SQL 练习 05 - 查找所有员工的 last_name 和 first_name 以及对应部门编号 dept_no","date":"2021-04-09T11:27:30.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"eb5014506122b57ab6c675aa81da2983","title":"SQL 练习 04 - 查找所有已经分配部门的员工的 last_name 和 first_name","content":"题目\n\n\n\n\n\n\n\n\n题目链接：查找所有已经分配部门的员工的last_name和first_name-牛客网\n有一个员工表，employees 简况如下：\nmysql&gt; select * from employees;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |\n|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n+--------+------------+------------+-----------+--------+------------+\n4 rows in set (0.02 sec)\n\n有一个部门表，dept_emp 简况如下：\nmysql&gt; select * from dept_emp;\n+--------+---------+------------+------------+\n| emp_no | dept_no | from_date  | to_date    |\n+--------+---------+------------+------------+\n|  10001 | d001    | 1986-06-26 | 9999-01-01 |\n|  10002 | d002    | 1996-08-03 | 9999-01-01 |\n+--------+---------+------------+------------+\n2 rows in set (0.02 sec)\n\n建表及插入数据语句如下：\n-- ----------------------------\n-- Table structure for employees\n-- ----------------------------\nDROP TABLE IF EXISTS &#96;employees&#96;;\nCREATE TABLE &#96;employees&#96;\n(\n    &#96;emp_no&#96;     int(11)     NOT NULL,\n    &#96;birth_date&#96; date        NOT NULL,\n    &#96;first_name&#96; varchar(14) NOT NULL,\n    &#96;last_name&#96;  varchar(16) NOT NULL,\n    &#96;gender&#96;     char(1)     NOT NULL,\n    &#96;hire_date&#96;  date        NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;)\n);\n\n-- ----------------------------\n-- Records of employees\n-- ----------------------------\nINSERT INTO &#96;employees&#96;\nVALUES (10001, &#39;1953-09-02&#39;, &#39;Georgi&#39;, &#39;Facello&#39;, &#39;M&#39;, &#39;1986-06-26&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10002, &#39;1964-06-02&#39;, &#39;Bezalel&#39;, &#39;Simmel&#39;, &#39;F&#39;, &#39;1985-11-21&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10003, &#39;1959-12-03&#39;, &#39;Parto&#39;, &#39;Bamford&#39;, &#39;M&#39;, &#39;1986-08-28&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10004, &#39;1954-05-01&#39;, &#39;Chirstian&#39;, &#39;Koblick&#39;, &#39;M&#39;, &#39;1986-12-01&#39;);\n\n-- ----------------------------\n-- Table structure for dept_emp\n-- ----------------------------\nDROP TABLE IF EXISTS &#96;dept_emp&#96;;\nCREATE TABLE &#96;dept_emp&#96;\n(\n    &#96;emp_no&#96;    int(11) NOT NULL,\n    &#96;dept_no&#96;   char(4) NOT NULL,\n    &#96;from_date&#96; date    NOT NULL,\n    &#96;to_date&#96;   date    NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;, &#96;dept_no&#96;)\n);\n\n-- ----------------------------\n-- Records of dept_emp\n-- ----------------------------\nINSERT INTO &#96;dept_emp&#96;\nVALUES (10001, &#39;d001&#39;, &#39;1986-06-26&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;dept_emp&#96;\nVALUES (10002, &#39;d002&#39;, &#39;1996-08-03&#39;, &#39;9999-01-01&#39;);\n\n请你查找所有已经分配部门的员工的 last_name 和 first_name 以及 dept_no，未分配的部门的员工不显示，以上例子如下：\n+-----------+------------+---------+\n| last_name | first_name | dept_no |\n+-----------+------------+---------+\n| Facello   | Georgi     | d001    |\n| Simmel    | Bezalel    | d002    |\n+-----------+------------+---------+\n2 rows in set (0.02 sec)\n\n代码select last_name, first_name, dept_no\nfrom employees,\n     dept_emp\nwhere employees.emp_no &#x3D; dept_emp.emp_no;\n\n执行结果：\nmysql&gt; select last_name, first_name, dept_no\n    -&gt; from employees,\n    -&gt;      dept_emp\n    -&gt; where employees.emp_no &#x3D; dept_emp.emp_no;\n+-----------+------------+---------+\n| last_name | first_name | dept_no |\n+-----------+------------+---------+\n| Facello   | Georgi     | d001    |\n| Simmel    | Bezalel    | d002    |\n+-----------+------------+---------+\n2 rows in set (0.02 sec)\n","slug":"2021-04-09-SQL 练习 04 - 查找所有已经分配部门的员工的 last_name 和 first_name","date":"2021-04-09T11:26:22.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"1234b829e2afd6ef04e79f63a2f8696c","title":"SQL 练习 03 - 查找各个部门当前领导当前薪水详情以及其对应部门编号 dept_no","content":"题目\n\n\n\n\n\n\n\n\n题目链接： 查找各个部门当前领导当前薪水详情以及其对应部门编号dept_no-牛客网\n有一个全部员工的薪水表 salaries 简况如下：\nmysql&gt; select * from salaries;\n+--------+--------+------------+------------+\n| emp_no | salary | from_date  | to_date    |\n+--------+--------+------------+------------+\n|  10001 |  88958 | 2002-06-22 | 9999-01-01 |\n|  10002 |  72527 | 2001-08-02 | 9999-01-01 |\n|  10003 |  43311 | 2001-12-01 | 9999-01-01 |\n+--------+--------+------------+------------+\n3 rows in set (0.02 sec)\n\n有一个各个部门的领导表 dept_manager 简况如下：\nmysql&gt; select * from dept_manager;\n+---------+--------+------------+\n| dept_no | emp_no | to_date    |\n+---------+--------+------------+\n| d001    |  10001 | 9999-01-01 |\n| d002    |  10003 | 9999-01-01 |\n+---------+--------+------------+\n2 rows in set (0.02 sec)\n\n建表及插入数据语句如下：\n-- ----------------------------\n-- Table structure for salaries\n-- ----------------------------\nDROP TABLE IF EXISTS &#96;salaries&#96;;\nCREATE TABLE &#96;salaries&#96;\n(\n    &#96;emp_no&#96;    int(11) NOT NULL,\n    &#96;salary&#96;    int(11) NOT NULL,\n    &#96;from_date&#96; date NOT NULL,\n    &#96;to_date&#96;   date NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;, &#96;from_date&#96;)\n);\n\n-- ----------------------------\n-- Records of salaries\n-- ----------------------------\nINSERT INTO &#96;salaries&#96;\nVALUES (10001, 88958, &#39;2002-06-22&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10002, 72527, &#39;2001-08-02&#39;, &#39;9999-01-01&#39;);\nINSERT INTO &#96;salaries&#96;\nVALUES (10003, 43311, &#39;2001-12-01&#39;, &#39;9999-01-01&#39;);\n\n-- ----------------------------\n-- Table structure for dept_manager\n-- ----------------------------\nDROP TABLE IF EXISTS &#96;dept_manager&#96;;\nCREATE TABLE &#96;dept_manager&#96;\n(\n    &#96;dept_no&#96; char(4) NOT NULL,\n    &#96;emp_no&#96;  int(11) NOT NULL,\n    &#96;to_date&#96; date    NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;, &#96;dept_no&#96;)\n);\n\n-- ----------------------------\n-- Records of dept_manager\n-- ----------------------------\nINSERT INTO &#96;dept_manager&#96;\nVALUES (&#39;d001&#39;, 10001, &#39;9999-01-01&#39;);\nINSERT INTO &#96;dept_manager&#96;\nVALUES (&#39;d002&#39;, 10003, &#39;9999-01-01&#39;);\n\n请你查找各个部门领导薪水详情以及其对应部门编号 dept_no，输出结果以 salaries.emp_no 升序排序，并且请注意输出结果里面 dept_no 列是最后一列，以上例子输入如下：\n+--------+--------+------------+------------+---------+\n| emp_no | salary | from_date  | to_date    | dept_no |\n+--------+--------+------------+------------+---------+\n|  10001 |  88958 | 2002-06-22 | 9999-01-01 | d001    |\n|  10003 |  43311 | 2001-12-01 | 9999-01-01 | d002    |\n+--------+--------+------------+------------+---------+\n2 rows in set (0.03 sec)\n\n代码select s.*, d.dept_no\nfrom salaries as s,\n     dept_manager as d\nwhere s.to_date &#x3D; &#39;9999-01-01&#39;\n  and d.to_date &#x3D; &#39;9999-01-01&#39;\n  and s.emp_no &#x3D; d.emp_no;\n\n执行结果：\nmysql&gt; select s.*, d.dept_no\n    -&gt; from salaries as s,\n    -&gt;      dept_manager as d\n    -&gt; where s.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;   and d.to_date &#x3D; &#39;9999-01-01&#39;\n    -&gt;   and s.emp_no  &#x3D; d.emp_no;\n+--------+--------+------------+------------+---------+\n| emp_no | salary | from_date  | to_date    | dept_no |\n+--------+--------+------------+------------+---------+\n|  10001 |  88958 | 2002-06-22 | 9999-01-01 | d001    |\n|  10003 |  43311 | 2001-12-01 | 9999-01-01 | d002    |\n+--------+--------+------------+------------+---------+\n2 rows in set (0.03 sec)\n","slug":"2021-04-09-SQL 练习 03 - 查找各个部门当前领导当前薪水详情以及其对应部门编号 dept_no","date":"2021-04-09T11:25:56.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"782353767ea9153a2dcb57bd8d017551","title":"SQL 练习 02 - 查找入职员工时间排名倒数第三的员工所有信息","content":"题目\n\n\n\n\n\n\n\n\n题目链接： 查找入职员工时间排名倒数第三的员工所有信息-牛客网\n有一个员工 employees 表简况如下：\nmysql&gt; select * from employees;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |\n|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n+--------+------------+------------+-----------+--------+------------+\n4 rows in set (0.05 sec)\n\n建表及插入数据语句如下：\n-- ----------------------------\n-- Table structure for employees\n-- ----------------------------\nDROP TABLE IF EXISTS &#96;employees&#96;;\nCREATE TABLE &#96;employees&#96;\n(\n    &#96;emp_no&#96;     int(11)     NOT NULL,\n    &#96;birth_date&#96; date        NOT NULL,\n    &#96;first_name&#96; varchar(14) NOT NULL,\n    &#96;last_name&#96;  varchar(16) NOT NULL,\n    &#96;gender&#96;     char(1)     NOT NULL,\n    &#96;hire_date&#96;  date        NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;)\n);\n\n-- ----------------------------\n-- Records of employees\n-- ----------------------------\nINSERT INTO &#96;employees&#96;\nVALUES (10001, &#39;1953-09-02&#39;, &#39;Georgi&#39;, &#39;Facello&#39;, &#39;M&#39;, &#39;1986-06-26&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10002, &#39;1964-06-02&#39;, &#39;Bezalel&#39;, &#39;Simmel&#39;, &#39;F&#39;, &#39;1985-11-21&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10003, &#39;1959-12-03&#39;, &#39;Parto&#39;, &#39;Bamford&#39;, &#39;M&#39;, &#39;1986-08-28&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10004, &#39;1954-05-01&#39;, &#39;Chirstian&#39;, &#39;Koblick&#39;, &#39;M&#39;, &#39;1986-12-01&#39;);\n\n请你查找 employees 里入职员工时间排名倒数第三的员工所有信息，以上例子输出如下：\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n+--------+------------+------------+-----------+--------+------------+\n2 rows in set (0.04 sec)\n\n代码方法一：\nselect *\nfrom employees\nwhere hire_date &#x3D; (select distinct hire_date from employees order by hire_date desc limit 2,1);\n\n方法二：\nselect *\nfrom employees\norder by hire_date desc\nlimit 2,1;\n\n入职员工时间排名倒数第三的当天未必就一个人。 如果 employees 里存在多条 hire_date 为 1986-06-26 的，那么第二种就会出错。\nmysql&gt; INSERT INTO &#96;employees&#96;\n    -&gt; VALUES (10007, &#39;1985-09-05&#39;, &#39;Brody&#39;, &#39;Berge&#39;, &#39;M&#39;, &#39;1986-06-26&#39;);\nQuery OK, 1 row affected (0.04 sec)\n\nmysql&gt; select *\n    -&gt; from employees\n    -&gt; order by hire_date desc;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n|  10005 | 1999-09-09 | Jaime      | Zeng      | M      | 1986-12-01 |\n|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10007 | 1985-09-05 | Brody      | Berge     | M      | 1986-06-26 |\n|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |\n+--------+------------+------------+-----------+--------+------------+\n6 rows in set (0.07 sec)\n\nmysql&gt; select *\n    -&gt; from employees\n    -&gt; where hire_date &#x3D; (select distinct hire_date from employees order by hire_date desc limit 2,1);\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10007 | 1985-09-05 | Brody      | Berge     | M      | 1986-06-26 |\n+--------+------------+------------+-----------+--------+------------+\n2 rows in set (0.04 sec)\n\nmysql&gt; select *\n    -&gt; from employees\n    -&gt; order by hire_date desc\n    -&gt; limit 2,1;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |\n+--------+------------+------------+-----------+--------+------------+\n1 row in set (0.04 sec)\n","slug":"2021-04-09-SQL 练习 02 - 查找入职员工时间排名倒数第三的员工所有信息","date":"2021-04-09T11:25:30.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"d0da3fc8ea123c08e8ebcabf8f0785a9","title":"SQL 练习 01 - 查找最晚入职员工的所有信息","content":"题目\n\n\n\n\n\n\n\n\n题目链接： 查找最晚入职员工的所有信息-牛客网\n有一个员工 employees 表简况如下：\nmysql&gt; select * from employees;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |\n|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n+--------+------------+------------+-----------+--------+------------+\n4 rows in set (0.05 sec)\n\n建表及插入数据语句如下：\n-- ----------------------------\n-- Table structure for employees\n-- ----------------------------\nDROP TABLE IF EXISTS &#96;employees&#96;;\nCREATE TABLE &#96;employees&#96;\n(\n    &#96;emp_no&#96;     int(11)     NOT NULL,\n    &#96;birth_date&#96; date        NOT NULL,\n    &#96;first_name&#96; varchar(14) NOT NULL,\n    &#96;last_name&#96;  varchar(16) NOT NULL,\n    &#96;gender&#96;     char(1)     NOT NULL,\n    &#96;hire_date&#96;  date        NOT NULL,\n    PRIMARY KEY (&#96;emp_no&#96;)\n);\n\n-- ----------------------------\n-- Records of employees\n-- ----------------------------\nINSERT INTO &#96;employees&#96;\nVALUES (10001, &#39;1953-09-02&#39;, &#39;Georgi&#39;, &#39;Facello&#39;, &#39;M&#39;, &#39;1986-06-26&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10002, &#39;1964-06-02&#39;, &#39;Bezalel&#39;, &#39;Simmel&#39;, &#39;F&#39;, &#39;1985-11-21&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10003, &#39;1959-12-03&#39;, &#39;Parto&#39;, &#39;Bamford&#39;, &#39;M&#39;, &#39;1986-08-28&#39;);\nINSERT INTO &#96;employees&#96;\nVALUES (10004, &#39;1954-05-01&#39;, &#39;Chirstian&#39;, &#39;Koblick&#39;, &#39;M&#39;, &#39;1986-12-01&#39;);\n\n请你查找 employees 里最晚入职员工的所有信息，以上例子输出如下：\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n+--------+------------+------------+-----------+--------+------------+\n1 row in set (0.03 sec)\n\n代码方法一：\nselect *\nfrom employees\nwhere hire_date &#x3D; (select max(hire_date) from employees);\n\n方法二：\nselect *\nfrom employees\norder by hire_date desc\nlimit 1;\n\n最晚入职的当天未必就一个人，也许有多人，使用排序并限制得只能取得指定数量的结果。 如果 employees 里存在多条 hire_date 为 1986-12-01 的，那么第二种就会出错。\nmysql&gt; INSERT INTO &#96;employees&#96;\n    -&gt; VALUES (10005, &#39;1999-09-09&#39;, &#39;Jaime&#39;, &#39;Zeng&#39;, &#39;M&#39;, &#39;1986-12-01&#39;);\nQuery OK, 1 row affected (0.08 sec)\n\nmysql&gt; select *\n    -&gt; from employees\n    -&gt; where hire_date &#x3D; (select max(hire_date) from employees);\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n|  10005 | 1999-09-09 | Jaime      | Zeng      | M      | 1986-12-01 |\n+--------+------------+------------+-----------+--------+------------+\n2 rows in set (0.05 sec)\n\nmysql&gt; select *\n    -&gt; from employees\n    -&gt; order by hire_date desc\n    -&gt; limit 1;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n+--------+------------+------------+-----------+--------+------------+\n1 row in set (0.04 sec)\n","slug":"2021-04-09-SQL 练习 01 - 查找最晚入职员工的所有信息","date":"2021-04-09T11:25:04.000Z","categories_index":"SQL","tags_index":"SQL","author_index":"JaimeZeng"},{"id":"1238394f397c282c8b01fc45805c9200","title":"访问数据库的N种武器和姿势","content":"使用命令行工具访问[root@Jaime ~]# mysql -uroot -proot -hlocalhost\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 9\nServer version: 8.0.24 MySQL Community Server - GPL\n\nCopyright (c) 2000, 2021, Oracle and&#x2F;or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and&#x2F;or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.\n\nmysql&gt; select user();\n+----------------+\n| user()         |\n+----------------+\n| root@localhost |\n+----------------+\n1 row in set (0.01 sec)\n\nmysql&gt; ^DBye\n\n或者直接在终端中执行，不进入mysql命令行：\n[root@Jaime ~]# mysql -uroot -proot -hlocalhost -e&quot;select user();&quot;\nmysql: [Warning] Using a password on the command line interface can be insecure.\n+----------------+\n| user()         |\n+----------------+\n| root@localhost |\n+----------------+\n\n使用图形化工具访问使用 Navicat 访问 MySQL【mysql】使用Navicat连接数据库 - 50% - 博客园\n使用 DBeaver 访问 MySQLDBeaver连接MySQL_wwagyun的博客-CSDN博客\n使用 DataGrip 访问 MySQL使用DataGrip连接MySQL 及问题解决_ruokeqx-CSDN博客\n使用 Java 操作 MySQL&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;8.0.11&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n\n&#x2F;&#x2F; Class.forName(&quot;com.mysql.jdbc.Driver&quot;);\nClass.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);\nConnection conn &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost&#x2F;test_demo?useSSL&#x3D;false&amp;serverTimezone&#x3D;UTC&quot;,&quot;root&quot;, &quot;root&quot;);\n\n常见故障解决方法1045 权限登录异常ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)\n\n\n确认密码是否正确。\n&#x2F;&#x2F; 临时密码查看方法\n[root@Jaime ~]# grep password &#x2F;var&#x2F;log&#x2F;mysqld.log\n2021-04-24T08:17:33.945529Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: fYu.-wet4ao6\n[root@Jaime ~]# mysql -uroot -pfYu.-wet4ao6\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.0.24\n\nCopyright (c) 2000, 2021, Oracle and&#x2F;or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and&#x2F;or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.\n\nmysql&gt; alter user user() identified by &#39;686868&#39;;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; ^DBye\n确认是否对 IP 的授权， % 不包括 localhost。\n\n通过 -h localhost登录数据库是使用UNIX socket进行登录。\n\n通过 –h 127.0.0.1命令进行登录是使用TCP/IP协议进行登录。\n\n\n修改 /etc/my.cnf数据库配置文件，在[mysqld]选项中添加：skip-grant-tables  \n使用安全模式登录mysql数据库： mysql –u root –p （输入密码直接按回车，登录成功）然后在 mysql.user 表中添加root@localhost登录权限。\n-- sudo systemctl stop mysqld\n-- update mysql.user set Grant_priv&#x3D;&#39;Y&#39;,Super_priv&#x3D;&#39;Y&#39; where user&#x3D;&#39;root&#39;;\n-- flush privileges;\ngrant all on *.* to &#39;root&#39;@&#39;localhost&#39;;\n-- update mysql.user set password&#x3D;password(&#39;root&#39;) where user&#x3D;&#39;root&#39;;\nupdate mysql.user set password&#x3D;password(&#39;root&#39;) where user&#x3D;&#39;root&#39; and host&#x3D;&#39;localhost&#39;;\nflush privileges;\n-- sudo systemctl start mysqld\n网络是否畅通。\n\n\n","slug":"2021-04-03-MySQL 学习 03 - 访问数据库的N种武器和姿势","date":"2021-04-03T06:02:10.000Z","categories_index":"SQL,MySQL","tags_index":"SQL,MySQL","author_index":"JaimeZeng"},{"id":"47bb9bb82bc12d18515960275e83a800","title":"MySQL 学习 02 - 关于数据库设计","content":"数据库结构设计\n业务分析\n逻辑设计\n数据类型\n对象命名\n建立库表\n\n业务分析\n课程属性：{主标题、副标题、方向、分类、难度、最新、最热、时长、简介、人数、需知、收获、讲师名、讲师职位、课程图片、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分}\n课程列表属性：{章节、小节名、说明、小节时长、章节 URL、视频格式}\n讲师属性：{讲师昵称、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数}\n问答评论属性：{类型、标题、内容、关联章节、浏览量、发布时间。用户昵称}\n笔记属性：{用户昵称、关联章节、笔记标题、笔记内容、发布时间}\n用户属性：{用户昵称、密码、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数}\n评价属性：{用户昵称、课程主标题、内容、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分、发布时间}\n\n逻辑设计宽表模式课程表\n\n\n\n主标题\n副标题\n方向\n分类\n难度\n讲师名\n讲师职位\n综合评分\n\n\n\nMySQL 面试指南\n中高级 IT 开发人员晋升加薪必备佳品！\n数据库\nMySQL\n中级\nsqlercn\n高级 DBA\n10\n\n\nMyCAT + MySQL\nMyCAT 高可用数据库架构\n数据库\nMySQL\n中级\nsqlercn\n高级 DBA\n10\n\n\nMySQL 架构设计\n高性能可扩展 MySQL 架构设计及优化\n数据库\nMySQL\n中级\nsqlercn\n高级 DBA\n9.15\n\n\n扛得住的 MySQL\nMySQL 提升课程全面讲解 MySQL 架构设计\n数据库\nMySQL\n中级\nsqlercn\n高级 DBA\n9.94\n\n\n宽表模式存在的问题\n数据冗余：相同的数据在一个表中出现了多次。\n\n数据更新异常：修改一行中某列的值时，同时修改了多行数据。\nupdate 课程表 set 讲师职位 &#x3D; &#39;MySQL架构师&#39; where 讲师名 &#x3D; &#39;sqlercn&#39;;\nupdate 课程表 set 讲师职位 &#x3D; &#39;MySQL架构师&#39; where 讲师名 &#x3D; &#39;sqlercn&#39; and 主标题 &#x3D; &#39;MySQL 面试指南&#39;;\n数据插入异常：部分数据由于缺失主键信息而无法写入表中。（匹配不到数据导致主键信息为空）\ninsert into 课程表(方向) values(&#39;后端开发&#39;);\n数据删除异常：删除某一数据时不得不删除另一数据。\ndelete from 课程表 where 方向 &#x3D; &#39;数据库&#39;;\n\n宽表模式的应用场景\n配合列存储的数据报表应用。\n\n数据库设计范式第一范式表中的所有字段都是不可再分的。\n用户表：\n\n    \n         姓名 \n         性别 \n         联系方式 \n    \n    \n         手机 \n         固话 \n         邮箱 \n    \n    \n         张三 \n         男 \n         13800000001 \n         88886666 \n         zhangsan@gmail.com \n    \n\n\n联系方式属于复合属性，拆分为手机、固话、邮箱。\n\n\n\n姓名\n性别\n手机\n固话\n邮箱\n\n\n\n张三\n男\n13800000001\n88886666\n&#x7a;&#x68;&#x61;&#x6e;&#x67;&#115;&#x61;&#x6e;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;\n\n\n第二范式表中必须存在业务主键，并且非业务主键依赖于全部业务主键。\n笔记表：\n\n\n\n用户\n章节\n标题\n内容\n用户积分\n时间\n\n\n\n张三\n1-1\n笔记 01\n测试笔记\n300\n2018-12-24\n\n\n业务主键：用户、章节和标题。用户积分只依赖于用户。\n笔记表\n\n\n\n用户（PK）\n章节（PK）\n标题（PK）\n内容\n时间\n\n\n\n张三\n1-1\n笔记 01\n测试笔记\n2018-12-14\n\n\n用户表\n\n\n\n用户\n用户积分\n\n\n\n张三\n300\n\n\n第三范式表中的非主键列之间不能相互依赖。\n课程表\n\n\n\n主标题（PK）\n副标题\n方向\n分类\n难度\n讲师名\n讲师职位\n综合评分\n\n\n\nMySQL 面试指南\n中高级 IT 开发人员晋升加薪必备佳品！\n数据库\nMySQL\n中级\nsqlercn\n高级 DBA\n10\n\n\nMyCAT + MySQL\nMyCAT 高可用数据库架构\n数据库\nMySQL\n中级\nsqlercn\n高级 DBA\n10\n\n\n讲师职位列与讲师名列存在依赖关系。\n课程表\n\n\n\n主标题（PK）\n副标题\n方向\n分类\n难度\n讲师名\n综合评分\n\n\n\nMySQL 面试指南\n中高级 IT 开发人员晋升加薪必备佳品！\n数据库\nMySQL\n中级\nsqlercn\n10\n\n\nMyCAT + MySQL\nMyCAT 高可用数据库架构\n数据库\nMySQL\n中级\nsqlercn\n10\n\n\n讲师表\n\n\n\n讲师名（PK）\n讲师职位\n\n\n\nSqlercn\n高级 DBA\n\n\n逻辑建模课程对象课程属性：{主标题、副标题、方向、分类、难度、最新、最热、时长、简介、人数、需知、收获、讲师名、讲师职位、课程图片、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分}\n\n课程表：{主标题（PK）、副标题、方向、分类、难度、上线时间、学习人数、时长、简介、需知、收获、讲师名、讲师职位、课程图片、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分}\n讲师表：{讲明名、讲师职位}\n课程方向表：{课程方向名称（PK）、添加时间}\n课程分类表：{课程分类名称（PK）、添加时间}\n课程难度表：{课程难度（PK）、添加时间}\n\n课程列表对象课程列表属性：{章节、小节名、说明、小节时长、章节 URL、视频格式}\n\n课程章节表：{课程章节名（PK）、说明、章节编号}\n课程同章节的联系表：{课程主标题（PK）、课程章节名（PK）}\n课程小节表：{小节名称（PK）、小节视频 url、视频格式、小节时长、小节编号}\n课程章同小节关系表：{课程主标题（PK）、课程章节名（PK）、小节名称（PK）}\n\n讲师对象讲师属性：{讲师昵称、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数}\n\n讲师表：{讲师昵称（PK）、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数}\n\n用户对象用户属性：{用户昵称、密码、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数}\n\n用户表：{用户昵称（PK）、密码、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数}\n\n将讲师表合并到用户表中：\n\n用户表：{用户昵称（PK）、密码、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数、讲师标识、注册时间、用户状态}\n\n问答评论对象问答评论属性：{类型、标题、内容、关联章节（课程主标题、课程章名、小节名称）、浏览量、发布时间。用户昵称}\n\n问答评论表：{标题 (PK)、课程主标题 (PK)、课程章名 (PK)、小节名称 (PK)、用户昵称 (PK)、父评论标题、内容、类型、浏览量、发布时间}\n\n笔记对象笔记属性：{用户昵称、关联章节（课程主标题、课程章名、小节名称）、笔记标题、笔记内容、发布时间}\n\n笔记表：{笔记标题 (PK)、课程主标题 (PK)、课程章名 (PK)、小节名称 (PK)、用户昵称 (PK)、笔记内容、发布时间}\n\n评价对象评价属性：{用户昵称、课程主标题、内容、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分、发布时间}\n\n评价表：{用户昵称 (PK)、课程主标题 (PK)、内容、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分、发布时间}\n用户选课表：{用户昵称 (PK)、课程主标题 (PK)、选课时间、累计听课时长}\n\n总结\n课程表：{主标题（PK）、副标题、方向、分类、难度、上线时间、学习人数、时长、简介、需知、收获、讲师名、讲师职位、课程图片、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分}\n课程章节表：{课程章节名（PK）、说明、章节编号}\n课程同章节的联系表：{课程主标题（PK）、课程章节名（PK）}\n课程小节表：{小节名称（PK）、小节视频 url、视频格式、小节时长、小节编号}\n课程章同小节关系表：{课程主标题（PK）、课程章节名（PK）、小节名称（PK）}\n课程方向表：{课程方向名称（PK）、添加时间}\n课程分类表：{课程分类名称（PK）、添加时间}\n课程难度表：{课程难度（PK）、添加时间}\n用户表：{用户昵称（PK）、密码、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数、讲师标识、注册时间、用户状态}\n问答评论表：{标题 (PK)、课程主标题 (PK)、课程章名 (PK)、小节名称 (PK)、用户昵称 (PK)、父评论标题、内容、类型、浏览量、发布时间}\n笔记表：{笔记标题 (PK)、课程主标题 (PK)、课程章名 (PK)、小节名称 (PK)、用户昵称 (PK)、笔记内容、发布时间}\n评价表：{用户昵称 (PK)、课程主标题 (PK)、内容、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分、发布时间}\n用户选课表：{用户昵称 (PK)、课程主标题 (PK)、选课时间、累计听课时长}\n\n反范式化设计范式化设计存在的问题例如：获取出一门课程包括的所有章节和小节的信息？\n过程：通过课程同章节的联系表关联课程表和章节表获取到课程的所有章节信息，然后通过课程章节同小节关系表关联章节表和小节表获取到所有小节信息。\n问题：查询过程中一共需要关联 5 张表，查询性能很差。\n课程章节表反范式化设计课程表与章节表之间存在一对多的关系。\n\n课程章节表：{课程章节名（PK）、说明、章节编号}\n课程同章节的联系表：{课程主标题（PK）、课程章节名（PK）}\n\n合并为课程章节表：{课程主标题 (PK)、课程章名 (PK)、章节说明、章节编号}\n课程小节表反范式化设计课程章节表与课程小节表之间存在一对多的关系。\n\n课程小节表：{小节名称（PK）、小节视频 url、视频格式、小节时长、小节编号}\n课程章同小节关系表：{课程主标题（PK）、课程章节名（PK）、小节名称（PK）}\n\n合并为课程小节表：{课程主标题 (PK)、课程章节名 (PK)、小节名称 (PK)、小节视频 url、视频格式、小节时长、小节编号}\n反范式化设计总结现在获取出一门课程包括的所有章节和小节的信息？\n过程：通过课程表、课程章节表、课程小节表即可查询课程包括的所有章节和小节的信息。\n反范式化设计优化后的项目表结构\n课程表：{主标题（PK）、副标题、方向、分类、难度、上线时间、学习人数、时长、简介、需知、收获、讲师名、讲师职位、课程图片、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分}\n课程章节表：{课程主标题 (PK)、课程章名 (PK)、章节说明、章节编号}\n课程小节表：{课程主标题 (PK)、课程章节名 (PK)、小节名称 (PK)、小节视频 url、视频格式、小节时长、小节编号}\n课程方向表：{课程方向名称（PK）、添加时间}\n课程分类表：{课程分类名称（PK）、添加时间}\n课程难度表：{课程难度（PK）、添加时间}\n用户表：{用户昵称（PK）、密码、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数、讲师标识、注册时间、用户状态}\n问答评论表：{标题 (PK)、课程主标题 (PK)、课程章名 (PK)、小节名称 (PK)、用户昵称 (PK)、父评论标题、内容、类型、浏览量、发布时间}\n笔记表：{笔记标题 (PK)、课程主标题 (PK)、课程章名 (PK)、小节名称 (PK)、用户昵称 (PK)、笔记内容、发布时间}\n评价表：{用户昵称 (PK)、课程主标题 (PK)、内容、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分、发布时间}\n用户选课表：{用户昵称 (PK)、课程主标题 (PK)、选课时间、累计听课时长}\n\n物理设计MySQL 常见的存储引擎\n\n\n引擎名称\n事务\n说明\n\n\n\nMYISAM\nN\nMySQL 5.6 之前的默认引擎，最常用的非事务性存储引擎\n\n\nCSV\nN\n以 CSV 格式存储的非事务型存储引擎\n\n\nArchive\nN\n只允许查询和新增数据而不允许修改的非事务型存储引擎\n\n\nMemory\nN\n是一种易失性非事务型存储引擎\n\n\nINNODB\nY\n最常用的事务型存储引擎\n\n\nInnoDB 存储引擎的特点\n事务型存储引擎支持 ACID\n数据按照主键聚集存储\n支持行级锁级 MVCC\n支持 Btree 和自适应 Hash 索引\n支持全文和空间索引\n\n根据 InnoDB 特性优化项目表结构原：\n\n课程表：{主标题（PK）、副标题、方向、分类、难度、上线时间、学习人数、时长、简介、需知、收获、讲师名、讲师职位、课程图片、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分}\n课程章节表：{课程主标题 (PK)、课程章名 (PK)、章节说明、章节编号}\n课程小节表：{课程主标题 (PK)、课程章节名 (PK)、小节名称 (PK)、小节视频 url、视频格式、小节时长、小节编号}\n课程方向表：{课程方向名称（PK）、添加时间}\n课程分类表：{课程分类名称（PK）、添加时间}\n课程难度表：{课程难度（PK）、添加时间}\n用户表：{用户昵称（PK）、密码、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数、讲师标识、注册时间、用户状态}\n问答评论表：{标题 (PK)、课程主标题 (PK)、课程章名 (PK)、小节名称 (PK)、用户昵称 (PK)、父评论标题、内容、类型、浏览量、发布时间}\n笔记表：{笔记标题 (PK)、课程主标题 (PK)、课程章名 (PK)、小节名称 (PK)、用户昵称 (PK)、笔记内容、发布时间}\n评价表：{用户昵称 (PK)、课程主标题 (PK)、内容、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分、发布时间}\n用户选课表：{用户昵称 (PK)、课程主标题 (PK)、选课时间、累计听课时长}\n\n优化后：\n\n课程表：{课程 ID(PK)、主标题、副标题、方向 ID、分类 ID、难度 ID、上线时间、学习人数、时长、简介、需知、收获、讲师名、讲师职位、课程图片、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分}\n课程章节表：{章节 ID(PK)、课程 ID、课程章节名、章节说明、章节编号}\n课程小节表：{小节 ID(PK)、课程 ID、章节 ID、小节名称、小节视频 url、视频格式、小节时长、小节编号}\n课程方向表：{课程方向 ID(PK)、课程方向名称、添加时间}\n课程分类表：{课程分类 ID(PK)、课程分类名称、添加时间}\n课程难度表：{课程难度 ID(PK)、课程难度、添加时间}\n用户表：{用户 ID(PK)、用户昵称、密码、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数、讲师标识、注册时间、用户状态}\n问答评论表：{评论 ID(PK)、父评论 ID、课程 ID、章节 ID、小节 ID、评论标题、用户 ID、内容、类型、浏览量、发布时间}\n笔记表：{笔记 ID(PK)、课程 ID、章节 ID、小节 ID、笔记标题、用户昵称、笔记内容、发布时间}\n评价表：{评价 ID(PK)、用户 ID、课程 ID、内容、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分、发布时间}\n用户选课表：{用户选课 ID(PK)、用户 ID、课程 ID、选课时间、累计听课时长}\n\n数据类型整数类型\n    \n        列类型\n        存储空间\n        属性\n        取值范围\n    \n    \n        tinyint\n        1 字节\n        SIGNED\n        -2^7 ~ 2^7-1\n    \n    \n        UNSIGNED\n        0 ~ 2^8-1\n    \n    \n        smallint\n        2 字节\n        SIGNED\n        -2^15 ~ 2^15-1\n    \n    \n        UNSIGNED\n        0 ~ 2^16-1\n    \n    \n        mediumint\n        3 字节\n        SIGNED\n        -2^23 ~ 2^23-1\n    \n    \n        UNSIGNED\n        0 ~ 2^24-1\n    \n    \n        int\n        4 字节\n        SIGNED\n        -2^31 ~ 2^31-1\n    \n    \n        UNSIGNED\n        0 ~ 2^32-1\n    \n    \n        bigint\n        8 字节\n        SIGNED\n        -2^63 ~ 2^63-1\n    \n    \n        UNSIGNED\n        0 ~ 2^64-1\n    \n\n\n实数（浮点数）类型\n\n\n列类型\n存储空间\n是否为精确类型\n\n\n\nFLOAT\n4 个字节\n否\n\n\nDOUBLE\n8 个字节\n否\n\n\nDECIMAL\n每 4 个字节存 9 个数字，小数点占一个字节\n是\n\n\nMySQLDECIMAL 数据类型用于在数据库中存储精确的数值。我们经常将DECIMAL数据类型用于保留准确精确度的列，例如会计系统中的货币数据。\n要定义数据类型为DECIMAL的列，请使用以下语法：\ncolumn_name DECIMAL (P,D);\n\n在上面的语法中：\n\nP是表示有效数字数的精度。 P范围为1〜65。\nD是表示小数点后的位数。 D的范围是0~`30。MySQL 要求D小于或等于 (&lt;=)P`。\n\nDECIMAL(P，D)表示列可以存储D位小数的P位数。十进制列的实际范围取决于精度和刻度。\n与 INT 数据类型一样，DECIMAL类型也具有UNSIGNED和ZEROFILL属性。 如果使用UNSIGNED属性，则DECIMAL UNSIGNED的列将不接受负值。\n如果使用ZEROFILL，MySQL 将把显示值填充到0以显示由列定义指定的宽度。 另外，如果我们对DECIMAL列使用ZERO FILL，MySQL 将自动将UNSIGNED属性添加到列。\n以下示例使用DECIMAL数据类型定义的一个叫作amount的列。\namount DECIMAL (6,2);\n\n在此示例中，amount列最多可以存储6位数字，小数位数为2位；因此，amount列的范围是从-9999.99到9999.99。\n例如：DECIMAL(18,9) 列（占用 9 个字节）最多可以存储 9 位小数（4 个字节），9 位数字（4 个字节），一个小数点（1 个字节）可以存储 123456789.987654321。\n时间类型\n\n\n类型\n存储空间\n格式\n范围\n\n\n\nDATE\n3 字节\nYYYY-MM-DD\n从 1000-01-01 到 9999-12-31\n\n\nTIME\n3-6 字节\nHH:MM:SS[. 微秒值】\n从 -838:59:59 到 838:59:59\n\n\nYEAR\n1 字节\nYYYY\n从 1901 到 2155\n\n\nDATETIME\n5-8 字节\nYYYY-MM-DD HH:MM:SS[. 微秒值】\n从 1000-01-01 00:00:00 到 9999-12-31 23:59:59\n\n\nTIMESTAMP\n4-7 字节\nYYYY-MM-DD HH:MM:SS[. 微秒值】\n从 1000-01-01 00:00:00 到 9999-12-31 23:59:59\n\n\n\n\n\n微秒\n存储空间\n\n\n\n0\n0 bytes\n\n\n1, 2\n1 byte\n\n\n3，4\n2 bytes\n\n\n5，6\n3 bytes\n\n\n\n\n\ndt0\ntime\n16:18:29\n\n\n\ndt2\ntime(2)\n16:18:29.72\n\n\ndt4\ntime(4)\n16:18:29.7182\n\n\ndt6\ntime(6)\n16:18:29.718216\n\n\n字符串类型\n\n\n类型\n范围\n说明\n\n\n\nChar(M)\nM = 1 ~ 2^8-1 个字符\n固定长度\n\n\nVarChar(M)\n一行中所有 varchar 类型的列所占用的字节数不能超过 2^16-1 个字节。UTF8mb4 varchar(10)=40 字节\n存储可变长度的 M 个字符\n\n\nTinyText\n最大长度为 2^8-1 个字节\n可变长度\n\n\nText\n最大长度为 2^16-1 (64K) 个字节\n可变长度\n\n\nMediumText\n最大长度为 2^24-1 (16M) 个字节\n可变长度\n\n\nLongText\n最大长度为 2^32-1 (4G) 个字节\n可变长度\n\n\nEnum\n集合最大数目为 2^16-1\n只能插入列表中的值\n\n\n数据类型实战实战实数类型create database test;\n\nuse test;\n\ncreate table t\n(\n    d1 double,\n    d2 decimal(10, 3)\n);\n\ninsert into t\nvalues (11.2, 11.2),\n       (9.01, 9.01),\n       (123.02, 123.02),\n       (1234.03, 1234.03);\n\nselect * from t;\n\nselect sum(d1), sum(d2) from t;\n\nmysql&gt; create database test;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql&gt; use test;\nDatabase changed\nmysql&gt; create table t\n    -&gt; (\n    -&gt;     d1 double,\n    -&gt;     d2 decimal(10, 3)\n    -&gt; );\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql&gt; insert into t\n    -&gt; values (11.2, 11.2),\n    -&gt;        (9.01, 9.01),\n    -&gt;        (123.02, 123.002),\n    -&gt;        (1234.03, 1234.003);\nQuery OK, 4 rows affected (0.04 sec)\nRecords: 4  Duplicates: 0  Warnings: 0\n\nmysql&gt; select *\n    -&gt; from t;\n+---------+----------+\n| d1      | d2       |\n+---------+----------+\n|    11.2 | 11.200   |\n|    9.01 | 9.010    |\n|  123.02 | 123.020  |\n| 1234.03 | 1234.030 |\n+---------+----------+\n4 rows in set (0.05 sec)\n\nmysql&gt; select sum(d1), sum(d2)\n    -&gt; from t;\n+---------+----------+\n| sum(d1) | sum(d2)  |\n+---------+----------+\n| 1377.26 | 1377.260 |\n+---------+----------+\n1 row in set (0.05 sec)\n\n实战时间类型create table t_timestamp\n(\n    dt timestamp\n);\n\ninsert into t_timestamp\nselect now();\n\nset time_zone &#x3D; &#39;+10:00&#39;;\n\nselect *\nfrom t_timestamp;\n\nset time_zone &#x3D; &#39;+8:00&#39;;\n\nmysql&gt; create table t_timestamp(dt timestamp);\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql&gt; insert into t_timestamp select now();\nQuery OK, 1 row affected (0.00 sec)\nRecords: 1  Duplicates: 0  Warnings: 0\n\nmysql&gt; select * from t_timestamp;\n+---------------------+\n| dt                  |\n+---------------------+\n| 2021-04-02 12:02:07 |\n+---------------------+\n1 row in set (0.03 sec)\n\nmysql&gt; set time_zone &#x3D; &#39;+10:00&#39;;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; select * from t_timestamp;\n+---------------------+\n| dt                  |\n+---------------------+\n| 2021-04-03 02:02:07 |\n+---------------------+\n1 row in set (0.03 sec)\n\nmysql&gt; set time_zone &#x3D; &#39;+8:00&#39;;\nQuery OK, 0 rows affected (0.00 sec)\n\n如何为数据选择合适的数据类型\n优先选择符合存储数据需求的最小数据类型。\n\n1234567890（Bigint， Unsigned int）\nINET_ATON(‘255.255.255.255’) = 4294967295\nINET_NTOA(4294967295) = ‘255.255.255.255’\n\n\n谨慎使用 ENUM，TEXT 字符串类型。TEXT 大小 16K，不能使用内存映射，需要使用磁盘映射。另外 MySQL 在读取数据时还需要二次查找，性能很差不能有默认值，不能进行全部的索引只能建立前缀索引。 ENUM 修改数据会产生风险。\n\n同财务相关的数值型数据，必需使用 decimal 类型。\n\n\n为数据选择合适的数据类型课程表课程表：{课程 ID(PK)、主标题（唯一约束）、副标题、方向 ID、分类 ID、难度 ID、上线时间、学习人数、时长、简介、需知、收获、讲师名、讲师职位、课程图片、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分}\n\n\n\n列名\n数据类型\n\n\n\n课程 ID(PK)\nint unsigned\n\n\n主标题 (UK)\nvarchar(20)\n\n\n副标题\nvarchar(50)\n\n\n课程方向 ID\nsmallint unsigned\n\n\n课程分类 ID\nsmallint unsigned\n\n\n课程难度 ID\nsmallint unsigned\n\n\n上线时间\ndatetime\n\n\n学习人数\nint unsigned\n\n\n课程时长\ntime\n\n\n课程简介\nvarchar(200)\n\n\n学习需知\nvarchar(200)\n\n\n课程收获\nvarchar(200)\n\n\n讲师 ID\nint unsigned\n\n\n课程主图片\nvarchar(200)\n\n\n综合评分\ndecimal(3,1)\n\n\n内容实用评分\ndecimal(3,1)\n\n\n简洁易懂评分\ndecimal(3,1)\n\n\n逻辑清晰评分\ndecimal(3,1)\n\n\n课程章节表课程章节表：{章节 ID(PK)、课程 ID、课程章节名、章节说明、章节编号}\n\n\n\n列名\n数据类型\n\n\n\n章节 ID(PK)\nint unsigned\n\n\n课程 ID(UK)\nint unsigned\n\n\n课程章节名称 (UK)\nvarchar(50)\n\n\n章节说明\nvarchar(200)\n\n\n章节编号\ntinyint(2) unsigned ZEROFILL\n\n\n课程小节表课程小节表：{小节 ID(PK)、课程 ID、章节 ID、小节名称、小节视频 url、视频格式、小节时长、小节编号}\n\n\n\n列名\n数据类型\n\n\n\n小节 ID(PK)\nint unsigned\n\n\n课程 ID(UK)\nint unsigned\n\n\n章节 ID(UK)\nint unsigned\n\n\n小节名称 (UK)\nvarchar(50)\n\n\n小节视频 url\nvarchar(200)\n\n\n视频格式\nenum(‘avi’,’mp4’,’mpeg’)\n\n\n小节时长\ntime\n\n\n小节编号\ntinyint(2) unsigned ZEROFILL\n\n\n课程方向表课程方向表：{课程方向 ID(PK)、课程方向名称、添加时间}\n\n\n\n列名\n数据类型\n\n\n\n课程方向 ID(PK)\nsmallint unsigned\n\n\n课程方向名称 (UK)\nvarchar(10)\n\n\n添加时间\ntimestamp\n\n\n课程分类表课程分类表：{课程分类 ID(PK)、课程分类名称、添加时间}\n\n\n\n列名\n数据类型\n\n\n\n课程分类 ID(PK)\nsmallint unsigned\n\n\n课程分类名称 (UK)\nvarchar(10)\n\n\n添加时间\ntimestamp\n\n\n课程难度表课程难度表：{课程难度 ID(PK)、课程难度、添加时间}\n\n\n\n列名\n数据类型\n\n\n\n课程分类 ID(PK)\nsmallint unsigned\n\n\n课程难度 (UK)\nvarchar(10)\n\n\n添加时间\ntimestamp\n\n\n用户表用户表：{用户 ID(PK)、用户昵称、密码、性别、省、市、职位、说明、经验、积分、关注人数、粉丝人数、讲师标识、注册时间、用户状态}\n\n\n\n列名\n数据类型\n\n\n\n用户 ID(PK)\nint unsigned\n\n\n用户昵称 (UK)\nvarchar(20)\n\n\n密码\nchar(32)\n\n\n性别\nchar(2)\n\n\n省\nvarchar(20)\n\n\n市\nvarchar(20)\n\n\n职位\nvarchar(10)\n\n\n说明\nvarchar(100)\n\n\n经验\nmediumint unsigned\n\n\n积分\nint unsigned\n\n\n关注人数\nint unsigned\n\n\n粉丝人数\nint unsigned\n\n\n讲师标识\ntinyint unsigned\n\n\n注册时间\ndatetime\n\n\n用户状态\ntinyint unsigned\n\n\n问答评论表问答评论表：{评论 ID(PK)、父评论 ID、课程 ID、章节 ID、小节 ID、评论标题、用户 ID、内容、类型、浏览量、发布时间}\n\n\n\n列名\n数据类型\n\n\n\n评论 ID(PK)\nint unsigned\n\n\n父评论 ID\nint unsigned\n\n\n课程 ID\nint unsigned\n\n\n章节 ID\nint unsigned\n\n\n小节 ID\nint unsigned\n\n\n评论标题\nvarchar(50)\n\n\n用户 ID\nint unsigned\n\n\n内容\ntext\n\n\n类型\nenum(‘问答’,’评论’)\n\n\n浏览量\nint unsigned\n\n\n发布时间\ndatetime\n\n\n笔记表笔记表：{笔记 ID(PK)、课程 ID、章节 ID、小节 ID、笔记标题、用户昵称、笔记内容、发布时间}\n\n\n\n列名\n数据类型\n\n\n\n笔记 ID(PK)\nint unsigned\n\n\n课程 ID\nint unsigned\n\n\n章节 ID\nint unsigned\n\n\n小节 ID\nint unsigned\n\n\n笔记标题\nvarchar(100)\n\n\n用户 ID\nint unsigned\n\n\n笔记内容\ntext\n\n\n发布时间\ndatetime\n\n\n评价表评价表：{评价 ID(PK)、用户 ID、课程 ID、内容、综合评分、内容实用评分、简洁易懂评分、逻辑清晰评分、发布时间}\n\n\n\n列名\n数据类型\n\n\n\n评价 ID(PK)\nint unsigned\n\n\n用户 ID\nint unsigned\n\n\n课程 ID\nint unsigned\n\n\n评价内容\ntext\n\n\n综合评分\ndecimal(3,1)\n\n\n内容实用评分\ndecimal(3,1)\n\n\n简洁易懂评分\ndecimal(3,1)\n\n\n逻辑清晰评分\ndecimal(3,1)\n\n\n发布时间\ntime\n\n\n用户选课表用户选课表：{用户选课 ID(PK)、用户 ID、课程 ID、选课时间、累计听课时长}\n\n\n\n列名\n数据类型\n\n\n\n用户选课 ID(PK)\nint unsigned\n\n\n用户 ID\nint unsigned\n\n\n课程 ID\nint unsigned\n\n\n选课时间\ndatetime\n\n\n累计听课时长\ntime\n\n\n对象命名如何为表和列选择合适的名字\n所有数据库对象名称必须使用小写字母，可选用下划线分割。大小写敏感。\n\n所有数据库对象名称禁止使用MySQL保留关键字。保留关键字文档：MySQL 5.7 Reference Manual Keywords and Reserved Words。\n\n数据库对象的命名要做到见名识义，并且最好不要超过 32 个字。\n\n建议表名中包含数据库名称。\n\n临时库表必须以 tmp 为前缀并以日期为后缀。\n\n用于备份的库，表必须以 bak 为前缀并以日期为后缀。\n\n所有存储相同数据的列名和列类型必须一致。\n\n\n最终数据库设计课程表 imc_course\n\n\n列名\n代码\n数据类型\n\n\n\n课程 ID(PK)\ncourse_id\nint unsigned\n\n\n主标题 (UK)\ntitle\nvarchar(20)\n\n\n副标题\ntitle_desc\nvarchar(50)\n\n\n课程方向 ID\ntype_id\nsmallint unsigned\n\n\n课程分类 ID\nclass_id\nsmallint unsigned\n\n\n课程难度 ID\nlevel_id\nsmallint unsigned\n\n\n上线时间\nonline_time\ndatetime\n\n\n学习人数\nstudy_cnt\nint unsigned\n\n\n课程时长\ncourse_time\ntime\n\n\n课程简介\nintro\nvarchar(200)\n\n\n学习需知\ninfo\nvarchar(200)\n\n\n课程收获\nharvest\nvarchar(200)\n\n\n讲师 ID\nuser_id\nint unsigned\n\n\n课程主图片\nmain_pic\nvarchar(200)\n\n\n综合评分\nscore\ndecimal(3,1)\n\n\n内容实用评分\ncontent_score\ndecimal(3,1)\n\n\n简洁易懂评分\nlevel_score\ndecimal(3,1)\n\n\n逻辑清晰评分\nlogic_score\ndecimal(3,1)\n\n\n课程章节表 imc_chapter\n\n\n列名\n代码\n数据类型\n\n\n\n章节 ID（PK）\nchapter_id\nint unsigned\n\n\n课程 ID (UK)\ncourse_id\nint unsigned\n\n\n章节名称（UK）\nchapter_name\nvarchar(50)\n\n\n章节说明\nchapter_info\nvarchar(200)\n\n\n章节编号\nchapter_no\ntinyint(2) unsigned ZEROFILL\n\n\n课程小节表 imc_subsection\n\n\n列名\n代码\n数据类型\n\n\n\n小节 ID（PK）\nsub_id\nint unsigned\n\n\n章节 ID（UK）\nchapter_id\nint unsigned\n\n\n课程 ID（UK）\ncourse_id\nint unsigned\n\n\n小节名称（UK）\nsub_name\nvarchar(50)\n\n\n小节 URL\nsub_url\nvarchar(200)\n\n\n视频格式\nvideo_type\nenum(‘avi’,’mp4’,’mpeg’)\n\n\n小节时长\nsub_time\ntime\n\n\n小节编号\nsub_no\ntinyint(2) unsigned ZEROFILL\n\n\n课程分类表 imc_class\n\n\n列名\n代码\n数据类型\n\n\n\n课程分类 ID（PK）\nclass_id\nsmallint unsigned\n\n\n分类名称（UK）\nclass_name\nvarchar(10)\n\n\n添加时间\nadd_time\ntimestamp\n\n\n课程难度表 imc_level\n\n\n列名\n代码\n数据类型\n\n\n\n课程难度 ID（PK）\nlevel_id\nsmallint unsigned\n\n\n难度名称（UK）\nlevel_name\nvarchar(10)\n\n\n添加时间\nadd_time\ntimestamp\n\n\n课程方向表 imc_type\n\n\n列名\n代码\n数据类型\n\n\n\n课程方向 ID（PK）\ntype_id\nsmallint unsigned\n\n\n方向名称\ntyoe_name\nvarchar(10)\n\n\n添加时间\nadd_time\ntimestamp\n\n\n用户表 imc_user\n\n\n列名\n代码\n数据类型\n\n\n\n用户 ID（PK）\nuser_id\nint unsigned\n\n\n用户昵称（UK）\nusr_nick\nvarchar(20)\n\n\n密码\nuser_pwd\nchar(32)\n\n\n性别\nsex\nchar(2)\n\n\n省\nprovince\nvarchar(20)\n\n\n市\ncity\nvarchar(20)\n\n\n职位\nposition\nvarchar(10)\n\n\n说明\nmem\nvarchar(100)\n\n\n经验值\nexp_cnt\nmediumint unsigned\n\n\n积分\nscore\nint unsigned\n\n\n关注人数\nfollow_cnt\nint unsigned\n\n\n粉丝人数\nfans_cnt\nint unsigned\n\n\n讲师标识\nis_teacher\ntinyint unsigned\n\n\n注册时间\nreg_time\ndatetime\n\n\n用户状态\nuser_status\ntinyint unsigned\n\n\n问答评论表 imc_question\n\n\n列名\n代码\n数据类型\n\n\n\n评论 ID（PK）\nquestion_id\nint unsigned\n\n\n用户 ID\nuser_id\nint unsigned\n\n\n课程 ID\ncourse_id\nint unsigned\n\n\n章节 ID\nchapter_id\nint unsigned\n\n\n小节 ID\nsub_id\nint unsigned\n\n\n父评论 ID\nreply_id\nint unsigned\n\n\n评论标题\nquest_title\nvarchar(50)\n\n\n评论内容\nquest_contenttext\ntext\n\n\n评论类型\nquest_type\nenum(‘问答’,’评论’)\n\n\n浏览量\nview_cnt\nint unsigned\n\n\n发布时间\nadd_time\ndatetime\n\n\n笔记表 imc_note\n\n\n列名\n代码\n数据类型\n\n\n\n笔记 ID（PK）\nnote_id\nint unsigned\n\n\n用户 ID\nuser_id\nint unsigned\n\n\n课程 ID\ncourse_id\nint unsigned\n\n\n章节 ID\nchapter_id\nint unsigned\n\n\n小节 ID\nsub_id\nint unsigned\n\n\n笔记标题\nnote_title\nvarchar(50)\n\n\n笔记内容\nnote_contenttext\ntext\n\n\n发布时间\nadd_time\ndatetime\n\n\n评价表 imc_classvalue\n\n\n列名\n代码\n数据类型\n\n\n\n评价 ID（PK）\nvalue_id\nint unsigned\n\n\n用户 ID\nuser_id\nint unsigned\n\n\n课程 ID\ncourse_id\nint unsigned\n\n\n内容评分\ncontent_score\ndecimal(3,1)\n\n\n简单易懂\nlevel_score\ndecimal(3,1)\n\n\n逻辑清晰\nlogic_score\ndecimal(3,1)\n\n\n综合评分\nscore\ndecimal(3,1)\n\n\n发布时间\nadd_time\ndatetime\n\n\n用户选课表 imc_selectcouese\n\n\n列名\n代码\n数据类型\n\n\n\n选课 ID（PK）\nselect_id\nint unsigned\n\n\n用户 ID\nuser_id\nint unsigned\n\n\n课程 ID\ncourse_id\nint unsigned\n\n\n选课时间\nselect_time\ndatetime\n\n\n累计听课时间\nstudy_time\ntime\n\n\n","slug":"2021-04-02-MySQL 学习 02 - 关于数据库设计","date":"2021-04-02T10:25:23.000Z","categories_index":"SQL,MySQL","tags_index":"SQL,MySQL","author_index":"JaimeZeng"},{"id":"8dfaf998f9013927b17dde97d5b3df05","title":"MySQL 学习 01 - 技术选型之数据库选型","content":"SQL VS NOSQLSQL\nMySQL\nOracle\nSQLServe\nPostGreSQL\n\nNOSQL\nHBase\nMongoDB\nRedis\nHadoop\n\n关系型数据库的特点和适用场景关系数据库的特点\n数据结构化存储在二维表中。\n\n\n\n姓名\n性别\n生日\n注册时间\n\n\n\n张三\n男\n1980-01-28\n2018-12-12\n\n\n李四\n男\n1991-02-03\n2018-11-01\n\n\n王五\n男\n1998-03-06\n2018-12-12\n\n\n\n支持事务的原子性 A、一致性 C、隔离性 I、持久性 D 特性。\n\n支持使用 SQL 语言对存储在其中的数据进行操作。\n\n\n关系型数据库的适用场景\n数据之间存在着一定关系，需要关联查询数据的场景。\n需要事务处理的业务场景。\n需要使用 SQL 语言灵活操作数据的场景。\n\n非关系型数据库的特点和适用场景非关系型数据库的特点\n存储结构灵活，没有固定的结构。\n&#123;&quot;姓名&quot;:&quot;张三&quot;,&quot;性别&quot;:&quot;男&quot;,&quot;出生日期&quot;:&quot;1980-01-28&quot;,&quot;注册时间&quot;:&quot;2018-12-12&quot;&#125;,\n&#123;&quot;姓名&quot;:&quot;李四&quot;,&quot;性别&quot;:&quot;男&quot;&#125;,\n&#123;&quot;姓名&quot;:&quot;王五&quot;,&quot;性别&quot;:&quot;男&quot;,&quot;电话&quot;:&quot;13800000001&quot;&#125;\n对事物的支持比较弱，但对数据的并发处理性能高。\n\n大多不使用 SQL 语言操作数据。\n\n\n非关系型数据库的适用场景\n数据结构不固定的场景。\n对事物要求不高，但读写并发比较大的场景。\n对数据的处理操作比较简单的场景。\n\n关系数据库选型原则\n数据库使用的广泛性\n数据库的可扩展性\n数据库的安全性和稳定性\n数据库所支持的系统\n数据库的使用成本\n\n数据库使用的广泛性数据库使用排名：DB-Engines Ranking - popularity ranking of database management systems\nMySQL 数据库的可扩展性\n支持基于二进制日志的逻辑复制\n存在多种第三方数据库中间层，支持读写分离及分库分表。\n\nMySQL 的安全性和稳定性\nMySQL 主从复制集群可高达 99% 的可用性。\n配合主从复制高可用架构可以高达 99.99% 的可用性。\n支持对存储在 MySQL 的数据进行分级安全控制。\n\nMySQL 所支持的操作系统\n支持 Linux 操作系统。\n支持 Windows 操作系统。\n\nMySQL 的使用成本\n社区版本免费。\n使用人数众多，可以方便的获取技术支持。\n\n实战环境部署安装虚拟机基于 VirtualBox 或者 VMware Workstation。\n\nVirtualBox 下载地址\nIndex of virtualbox\nDownloads – Oracle VM VirtualBox\n\n\nVMware Workstation 下载地址\nVMware Workstation Pro 16.1.1 Build 17801498 官方版 [2021/04/01] for Win10+\nVMware Workstation Player 16.1.1 Build 17801498 官方版 [2021/04/01] for Win10+\nVMware Workstation Pro 15.5.7 Build 17171714 官方版 for Windows 7 或更高版64位\nVMware Workstation Pro 12.5.9 Build 7535481 官方版 for Windows 7 或更高版64位\nVMware Workstation 10.0.7 Build 2844087 官方版 for Windows XP 或更高版32位和64位\n\n\n\n部署虚拟服务器安装 CentOS 系统\nCentOS 7系统下载地址：CentOS-7-x86_64-Minimal-2009.iso\n\nVmware Workstation Pro 15安装CentOS7 - Holy_Shit\n\nVirtualBox下安装CentOS7系统 - 代码ok\n\n\n配置 CentOS7 系统配置网卡Windows 下查看网关 gateway：\nJaime@Jaime$ ipconfig\n\nEthernet adapter 以太网:\n\n   Connection-specific DNS Suffix  . :\n   IPv6 Address. . . . . . . . . . . : 2409:8a74:bxxx:bxxx:bxxx:bxxx:bxxx:fb0\n   Temporary IPv6 Address. . . . . . : 2409:8a74:bxxx:bxxx:bxxx:bxxx:bxxx:6ff6\n   Link-local IPv6 Address . . . . . : fe80::bxxx:bxxx:b238:fb0%2\n   IPv4 Address. . . . . . . . . . . : 192.168.1.7\n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Default Gateway . . . . . . . . . : fe80::1%2\n                                       192.168.1.1\n\n虚拟机：\n[root@loacalhost ~]# ip addr\n1: lo: &lt;LOOPBACK, UP, LOWER_UP&gt; mtu 65536 disc noqueue state UNKNOWN group default glen 1000\n\tlink&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\tinet 127.0.0.1&#x2F;8 scope host lo\n\t\tvalid_lft forever preferred_lft forever\n    inet6 ::1&#x2F;128 scope host\n    \tvalid lft forever preferred_lft forever\n2: ens33: &lt;BROADCAST, MULTICAST, UP, LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default glen 1000\n\tlink&#x2F;ether 00:0c:29:c7:43:ec brd ff:ff:ff:ff:ff:ff\n[root@loacalhost ~]# vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33\nTYPE&#x3D;Ethernet\nPROXY_METHOD&#x3D;none\nBROWSER_ONLY&#x3D;no\nBOOTPROTO&#x3D;none\nDEFROUTE&#x3D;yes\nIPV4_FAILURE_FATAL&#x3D;no\nIPV6INIT&#x3D;no\nNAME&#x3D;ens33\nUUID&#x3D;79252400-3f93-4eef-9c3f-a8ddb83f627e\nDEVICE&#x3D;ens33\nONBOOT&#x3D;yes\nIPADDR&#x3D;192.168.1.10\nNETMASK&#x3D;255.255.255.0\nGATEWAY&#x3D;192.168.1.1\nDNS1&#x3D;119.29.29.29\n[root@localhost ~]# reboot\n\n[root@localhost ~]# ip addr\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group defaul                       t qlen 1000\n    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1&#x2F;8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1&#x2F;128 scope host\n       valid_lft forever preferred_lft forever\n2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP g                       roup default qlen 1000\n    link&#x2F;ether 00:0c:29:c7:43:ec brd ff:ff:ff:ff:ff:ff\n    inet 192.168.1.10&#x2F;24 brd 192.168.1.255 scope global noprefixroute ens33\n       valid_lft forever preferred_lft forever\n    inet6 2409:8a74:1e8a:bxxx:20c:29ff:fec7:43ec&#x2F;64 scope global mngtmpaddr dyna                       mic\n       valid_lft 214657sec preferred_lft 128257sec\n    inet6 fe80::20c:29ff:fec7:43ec&#x2F;64 scope link\n       valid_lft forever preferred_lft forever\n\n\nHWADDR = 00:0C:29:D3:40:89 // 网卡 MAC 地址\nTYPE = Ethernet // Ethernet 以太网 onboard 内置\nBOOTPROTO = dhcp // 启动协议：dhcp 动态地址协议 static 静态地址协议\nDEFROUTE = yes // 默认路由\nPEERDNS = no // 使用 DNS 选项的值替代 /etc/resolv.conf 中的配置。如果使用 DHCP, yes 则为的默认\nPEERROUTES = yes // 使用 路由选项的值替代 /etc/resolv.conf 中的配置。\nIPV4_FAILURE_FATAL = no // 如果 IPv4 配置失败，此接口不会被禁用\nIPV6INIT = yes // 是否支持 IPV6 初始化\nIPV6_AUTOCONF = yes // 是否 IPV6 自动配置\nIPV6_DEFROUTE = yes // IPV6 默认路由\nIPV6_PEERDNS = no // 与 IPV4 PEERDNS 同理\nIPV6_PEERROUTES = yes // 与 IPV4 PEERROUTES 同理\nIPV6_FAILURE_FATAL = no // 如果 IPV6 配置失败，此接口不会被禁用的\nNAME = eno16777736 // 网卡名称\nUUID = 1ca24e02-2c2e-4a41-b496-6d02147aeb2b // 通用唯一标识码\nONBOOT = yes // 配置是否随网络服务启动设备生效\nIPADDR = 192.168.10.10 // IP 地址\nNETMASK = 255.255.255.0 // 子网掩码\nGATEWAY = 192.168.10.1 // 网关地址\nDNS1 = 180.76.76.76 // DNS 地址 1\nDNS2 = 101.6.6.6 // DNS 地址 2\nDNS3 = 117.50.11.11 // DNS 地址 3\n\n更改主机名[root@localhost ~]# vi &#x2F;etc&#x2F;hostname\nJaime\n\n配置国内镜像源\n\n\n\n\n\n\n\n\ncentos 镜像站使用帮助 | 清华大学开源软件镜像站\n建议先备份 /etc/yum.repos.d/ 内的文件（CentOS 7 及之前为 CentOS-Base.repo，CentOS 8 为CentOS-Linux-*.repo）\n然后编辑 /etc/yum.repos.d/ 中的相应文件，在 mirrorlist= 开头行前面加 # 注释掉；并将 baseurl= 开头行取消注释（如果被注释的话），把该行内的域名（例如mirror.centos.org）替换为 mirrors.tuna.tsinghua.edu.cn。\n以上步骤可以被下方的命令一步完成\nsudo sed -e &#39;s|^mirrorlist&#x3D;|#mirrorlist&#x3D;|g&#39; \\\n         -e &#39;s|^#baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org|baseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn|g&#39; \\\n         -i.bak \\\n         &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-*.repo\n\n注意其中的*通配符，如果只需要替换一些文件中的源，请自行增删。\n注意，如果需要启用其中一些 repo，需要将其中的 enabled=0 改为 enabled=1。\n最后，更新软件包缓存\nsudo yum makecache\n\n部署 MySQL8推荐使用国内 yum 镜像源安装 MySQL。\n\n安装 MySQL 官方 Yum 源：MySQL :: Download MySQL Yum Repository。下载地址：mysql80-community-release-el7-3.noarch.rpm。\n[root@Jaime ~]# yum install -y curl\n[root@Jaime ~]# curl -O https:&#x2F;&#x2F;repo.mysql.com&#x2F;&#x2F;mysql80-community-release-el7-3.noarch.rpm\n[root@Jaime ~]# yum install -y mysql80-community-release-el7-3.noarch.rpm\n\n（推荐） 安装 MySQL 镜像 Yum 源。\n[root@Jaime ~]# vi &#x2F;etc&#x2F;yum.repos.d&#x2F;mysql-community.repo\n[mysql-connectors-community]\nname&#x3D;MySQL Connectors Community\nbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;mysql&#x2F;yum&#x2F;mysql-connectors-community-el7-$basearch&#x2F;\nenabled&#x3D;1\ngpgcheck&#x3D;1\ngpgkey&#x3D;https:&#x2F;&#x2F;repo.mysql.com&#x2F;RPM-GPG-KEY-mysql\n\n[mysql-tools-community]\nname&#x3D;MySQL Tools Community\nbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;mysql&#x2F;yum&#x2F;mysql-tools-community-el7-$basearch&#x2F;\nenabled&#x3D;1\ngpgcheck&#x3D;1\ngpgkey&#x3D;https:&#x2F;&#x2F;repo.mysql.com&#x2F;RPM-GPG-KEY-mysql\n\n[mysql-5.6-community]\nname&#x3D;MySQL 5.6 Community Server\nbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;mysql&#x2F;yum&#x2F;mysql-5.6-community-el7-$basearch&#x2F;\nenabled&#x3D;0\ngpgcheck&#x3D;1\ngpgkey&#x3D;https:&#x2F;&#x2F;repo.mysql.com&#x2F;RPM-GPG-KEY-mysql\n\n[mysql-5.7-community]\nname&#x3D;MySQL 5.7 Community Server\nbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;mysql&#x2F;yum&#x2F;mysql-5.7-community-el7-$basearch&#x2F;\nenabled&#x3D;1\ngpgcheck&#x3D;1\ngpgkey&#x3D;https:&#x2F;&#x2F;repo.mysql.com&#x2F;RPM-GPG-KEY-mysql\n\n[mysql-8.0-community]\nname&#x3D;MySQL 8.0 Community Server\nbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;mysql&#x2F;yum&#x2F;mysql-8.0-community-el7-$basearch&#x2F;\nenabled&#x3D;1\ngpgcheck&#x3D;1\ngpgkey&#x3D;https:&#x2F;&#x2F;repo.mysql.com&#x2F;RPM-GPG-KEY-mysql\n安装 mysql-community-server。\n[root@Jaime ~]# yum install -y mysql-community-server\n\n配置 MySQL\n新建 mysql 用户。\n[root@Jaime ~]# adduser mysql\nadduser: user &#39;mysql&#39; already exists\n查看 mysql 配置文件。\n[root@Jaime ~]# cat &#x2F;etc&#x2F;my.cnf\n# default-authentication-plugin&#x3D;mysql_native_password\n\ndatadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql\nsocket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock\n\nlog-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.log\npid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid\n[root@Jaime ~]# ls &#x2F;var&#x2F;lib&#x2F;mysql\nauto.cnf       client-cert.pem    ibdata1       mysql               private_key.pem  undo_001\nbinlog.000001  client-key.pem     ib_logfile0   mysql.ibd           public_key.pem   undo_002\nbinlog.index   #ib_16384_0.dblwr  ib_logfile1   mysql.sock          server-cert.pem\nca-key.pem     #ib_16384_1.dblwr  ibtmp1        mysql.sock.lock     server-key.pem\nca.pem         ib_buffer_pool     #innodb_temp  performance_schema  sys\n启动 mysql 服务。\n[root@Jaime ~]# systemctl start mysqld\n# 查看 mysql 进程\n[root@Jaime ~]# ps -ef | grep mysql | grep -v grep\nmysql      1360      1  0 04:17 ?        00:00:02 &#x2F;usr&#x2F;sbin&#x2F;mysqld\n查看修改 mysql 密码。\n\n\n\n\n\n\n\n\n\n为了加强安全性，MySQL8.0 为 root 用户随机生成了一个密码，在 error log 中，关于 error log 的位置，如果安装的是 RPM 包，则默认是 /var/log/mysqld.log。只有启动过一次 mysql 才可以查看临时密码。\n[root@Jaime ~]# grep password &#x2F;var&#x2F;log&#x2F;mysqld.log\n2021-04-24T08:17:33.945529Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: fYu.-wet4ao6\n[root@Jaime ~]# mysql -uroot -pfYu.-wet4ao6\nmysql: [Warning] Using a password on the command line interface can be insecure.\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.0.24\n\nCopyright (c) 2000, 2021, Oracle and&#x2F;or its affiliates.\n\nOracle is a registered trademark of Oracle Corporation and&#x2F;or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.\n\nmysql&gt; alter user user() identified by &#39;686868&#39;;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql&gt; ^DBye\n\n如果在修改密码过程中提示密码策略问题：ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。解决方法：\nmysql&gt; SHOW VARIABLES LIKE &#39;validate_password%&#39;;\n+--------------------------------------+-------+\n| Variable_name                        | Value |\n+--------------------------------------+-------+\n| validate_password.check_user_name    | ON    |\n| validate_password.dictionary_file    |       |\n| validate_password.length             | 4     |\n| validate_password.mixed_case_count   | 1     |\n| validate_password.number_count       | 1     |\n| validate_password.policy             | LOW   |\n| validate_password.special_char_count | 1     |\n+--------------------------------------+-------+\n7 rows in set (0.01 sec)\n\nmysql&gt; UNINSTALL COMPONENT &quot;file:&#x2F;&#x2F;component_validate_password&quot;;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; alter user user() identified by &#39;root&#39;;\nQuery OK, 0 rows affected (0.00 sec)\n\n\n\n使用 UNINSTALL COMPONENT &quot;file://component_validate_password&quot;; 关闭密码验证组件；\n使用 INSTALL COMPONENT &quot;file://component_validate_password&quot;; 开启密码验证组件。\n\n\n\n","slug":"2021-04-01-MySQL 学习 01 - 技术选型之数据库选型","date":"2021-04-01T06:20:10.000Z","categories_index":"SQL,MySQL","tags_index":"SQL,MySQL","author_index":"JaimeZeng"},{"id":"8593604eac01d0bc8cdc94bb6cc70155","title":"jQuery 与 Ajax 入门 - 0306 播放列表查看","content":"题目通过 Ajax 可以根据用户的点击，显示相关内容。\n参考分析思路：页面接受 Servlet 返回给 Ajax 的内容，使用 JS 相关代码完成。\n运行效果参见下图：\n\n代码&#x2F;&#x2F; MusicListServlet.java\npackage pub.zxj.ajax.practice;\n\nimport com.alibaba.fastjson.JSON;\n\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\n&#x2F;**\n * @author Jaime\n *&#x2F;\n@WebServlet(name &#x3D; &quot;MusicListServlet&quot;,value &#x3D; &quot;&#x2F;music_list&quot;)\npublic class MusicListServlet extends HttpServlet &#123;\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123;\n        ArrayList&lt;String&gt; musicArrayList &#x3D; new ArrayList&lt;&gt;();\n        musicArrayList.add(&quot;稻香&lt;br&gt;晴天&lt;br&gt;告白气球&quot;);\n        musicArrayList.add(&quot;千千阙歌&lt;br&gt;傻女&lt;br&gt;七友&quot;);\n        musicArrayList.add(&quot;一块红布&lt;br&gt;假行僧&lt;br&gt;新长征路上的摇滚&quot;);\n        resp.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);\n        resp.getWriter().println(JSON.toJSONString(musicArrayList));\n    &#125;\n&#125;\n\n\n&lt;!-- musicArrayList.jsp --&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;播放列表查看&lt;&#x2F;title&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;\n\n        * &#123;\n\n            margin: 0;\n            padding: 0;\n        &#125;\n\n        #list &#123;\n            width: 522px;\n            height: 30px;\n            margin: 10px auto;\n            display: flex;\n            justify-content: space-between;\n            line-height: 26px;\n            vertical-align: middle;\n        &#125;\n\n        #info-panel &#123;\n            width: 522px;\n            height: 80px;\n            margin: 10px auto;\n            text-align: center;\n        &#125;\n\n        input &#123;\n            width: 171px;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n    &lt;div id&#x3D;&quot;list&quot;&gt;\n        &lt;input name&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; value&#x3D;&quot;流行歌曲&quot; &#x2F;&gt;\n        &lt;input name&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; value&#x3D;&quot;经典歌曲&quot; &#x2F;&gt;\n        &lt;input name&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; value&#x3D;&quot;摇滚歌曲&quot; &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div id&#x3D;&quot;info-panel&quot;&gt;&lt;&#x2F;div&gt;\n\n    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;s3.pstatp.com&#x2F;cdn&#x2F;expire-1-M&#x2F;jquery&#x2F;3.5.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n        let btn &#x3D; document.getElementsByName(&quot;btn&quot;);\n        console.log(btn);\n        for (let i &#x3D; 0; i &lt; btn.length; i++) &#123;\n            &#x2F;&#x2F; console.log(btn[i]);\n            btn[i].setAttribute(&quot;btnIndex&quot;, i.toString());\n            btn[i].onclick &#x3D; function() &#123;\n                $.ajax(&#123;\n                    &quot;url&quot;: &quot;&#x2F;ajax_war_exploded&#x2F;music_list&quot;,\n                    &quot;type&quot;: &quot;GET&quot;,\n                    &quot;dataType&quot;: &quot;json&quot;,\n                    &quot;success&quot;: function(json) &#123;\n                        console.log(json[i]);\n                        document.getElementById(&quot;info-panel&quot;).innerHTML &#x3D; json[i];\n                    &#125;\n                &#125;)\n            &#125;\n        &#125;\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;\n","slug":"2021-03-14-jQuery 与 Ajax 入门 - 0306 播放列表查看","date":"2021-03-14T13:30:39.000Z","categories_index":"JavaWeb","tags_index":"JavaWeb,Imooc","author_index":"JaimeZeng"},{"id":"3c905823c4b4d82511897e99d6f01a84","title":"jQuery 与 Ajax 入门 - 0208 职员列表","content":"题目通过 Ajax 可以根据用户的点击，显示相关内容。\n参考分析思路：页面接受 Servlet 返回给 Ajax 的内容，使用 jQuery 相关代码完成。\n运行效果参见下图：\n\n代码&#x2F;&#x2F; EmployeeListServlet.java\npackage pub.zxj.ajax.practice;\n\nimport com.alibaba.fastjson.JSON;\n\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.ArrayList;\n\n&#x2F;**\n * @author Jaime\n *&#x2F;\n@WebServlet(name &#x3D; &quot;EmployeeListServlet&quot;,value &#x3D; &quot;&#x2F;employee_list&quot;)\npublic class EmployeeListServlet extends HttpServlet &#123;\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException &#123;\n        ArrayList&lt;String&gt; employeeArrayList &#x3D; new ArrayList&lt;&gt;();\n        employeeArrayList.add(&quot;小红&lt;br&gt;小明&lt;br&gt;小白&quot;);\n        employeeArrayList.add(&quot;职员&lt;br&gt;经理&quot;);\n        employeeArrayList.add(&quot;人事部&lt;br&gt;技术部&lt;br&gt;无线事业部&quot;);\n        resp.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);\n        resp.getWriter().println(JSON.toJSONString(employeeArrayList));\n    &#125;\n&#125;\n\n\n&lt;!-- employeeArrayList.jsp --&gt;\n&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; %&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;职员列表&lt;&#x2F;title&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;\n\n        * &#123;\n\n            margin: 0;\n            padding: 0;\n        &#125;\n\n        #list &#123;\n            width: 522px;\n            height: 30px;\n            margin: 10px auto;\n            display: flex;\n            justify-content: space-between;\n            line-height: 26px;\n            vertical-align: middle;\n        &#125;\n\n        #info-panel &#123;\n            width: 522px;\n            height: 80px;\n            margin: 10px auto;\n            text-align: center;\n        &#125;\n\n        input &#123;\n            width: 171px;\n        &#125;\n    &lt;&#x2F;style&gt;\n&lt;&#x2F;head&gt;\n\n&lt;body&gt;\n    &lt;div id&#x3D;&quot;list&quot;&gt;\n        &lt;input name&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; value&#x3D;&quot;员工列表&quot; &#x2F;&gt;\n        &lt;input name&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; value&#x3D;&quot;职位列表&quot; &#x2F;&gt;\n        &lt;input name&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; value&#x3D;&quot;部门列表&quot; &#x2F;&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div id&#x3D;&quot;info-panel&quot;&gt;&lt;&#x2F;div&gt;\n\n    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;\n        let btn &#x3D; document.getElementsByName(&quot;btn&quot;);\n        console.log(btn);\n        for (let i &#x3D; 0; i &lt; btn.length; i++) &#123;\n            &#x2F;&#x2F; console.log(btn[i]);\n            btn[i].onclick &#x3D; function() &#123;\n                let xmlhttp &#x3D; window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);\n                xmlhttp.open(&quot;GET&quot;, &quot;&#x2F;ajax_war_exploded&#x2F;employee_list&quot;, true);\n                xmlhttp.send();\n                xmlhttp.onreadystatechange &#x3D; function() &#123;\n                    document.getElementById(&quot;info-panel&quot;).innerHTML &#x3D; &quot;&quot;;\n                    if (xmlhttp.readyState &#x3D;&#x3D; 4 &amp;&amp; xmlhttp.status &#x3D;&#x3D; 200) &#123;\n                        &#x2F;&#x2F; console.log(xmlhttp.responseText);\n                        let json &#x3D; JSON.parse(xmlhttp.responseText);\n                        console.log(json[i]);\n                        document.getElementById(&quot;info-panel&quot;).innerHTML &#x3D; json[i];\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n    &lt;&#x2F;script&gt;\n&lt;&#x2F;body&gt;\n\n&lt;&#x2F;html&gt;\n","slug":"2021-03-14-jQuery 与 Ajax 入门 - 0208 职员列表","date":"2021-03-14T13:29:50.000Z","categories_index":"JavaWeb","tags_index":"JavaWeb,Imooc","author_index":"JaimeZeng"},{"id":"5b7b1423f186d73d52c3b59f1ae283ec","title":"jQuery 与 Ajax 入门 - 0119 使用 jQuery 改变 div 背景色","content":"题目已知如下静态页面，完成如下效果：\n\n当加载页面时，弹出提示框：欢迎来到设置颜色的页面。\n当点击名为蓝色的 div，下面的 div 背景色变为蓝色，并设置文字内容为「蓝色背景」；当点击名为绿色的 div 时，下面的 div 背景色变为绿色，并将文字设置成「绿色背景」，并设置字体为加粗斜体。\n当在文本框中输入大写的字母 B 时，背景颜色变为蓝色，并清空 div 的内容；当输入大写字母 G 时，背景颜色变为绿色，并清空 div 的内容。\n\n提示：B 的 keyCode 值是 66, G 的 keyCode 值是 71。\n代码&lt;!-- change_color.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;title&gt;Practice&lt;&#x2F;title&gt;\n\n    &lt;style&gt;\n      #blue,\n      #green &#123;\n        float: left;\n        width: 50px;\n        background-color: #a9a9a9;\n        margin: 5px 10px;\n        text-align: center;\n        line-height: 30px;\n        vertical-align: middle;\n      &#125;\n\n      #bg_text &#123;\n        width: 300px;\n        height: 300px;\n        margin-top: 66px;\n        color: red;\n        border: 1px solid black;\n      &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n\n  &lt;body&gt;\n    &lt;h2&gt;请选择背景颜色&lt;&#x2F;h2&gt;\n    &lt;div id&#x3D;&quot;selected_color&quot;&gt;\n      &lt;div id&#x3D;&quot;blue&quot;&gt;蓝色&lt;&#x2F;div&gt;\n      &lt;div id&#x3D;&quot;green&quot;&gt;绿色&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n    &lt;div id&#x3D;&quot;bg_text&quot;&gt;&lt;&#x2F;div&gt;\n    &lt;div id&#x3D;&quot;text_color&quot;&gt;\n      &lt;label&gt;输入颜色首字母：\n        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;active_color&quot; &#x2F;&gt;\n      &lt;&#x2F;label&gt;\n    &lt;&#x2F;div&gt;\n    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;\n    &lt;script&gt;\n      &#x2F;&#x2F; $(document).ready(function()&#123;\n      $(function () &#123;\n        alert(&quot;欢迎来到设置颜色的页面~&quot;);\n      &#125;);\n\n      $(&quot;#blue&quot;).click(function () &#123;\n        $(&quot;#bg_text&quot;).css(&quot;background-color&quot;, &quot;blue&quot;);\n        $(&quot;#bg_text&quot;).text(&quot;蓝色背景&quot;);\n      &#125;);\n\n      $(&quot;#green&quot;).click(function () &#123;\n        $(&quot;#bg_text&quot;).css(&#123;\n          &quot;background-color&quot;: &quot;green&quot;,\n          &quot;font-weight&quot;: &quot;bold&quot;,\n          &quot;font-style&quot;: &quot;italic&quot;,\n        &#125;);\n        $(&quot;#bg_text&quot;).text(&quot;蓝色背景&quot;);\n      &#125;);\n\n      $(&quot;input[name &#x3D; &#39;active_color&#39;]&quot;).keypress(function (event) &#123;\n        if (event.keyCode &#x3D;&#x3D;&#x3D; 66) &#123;\n          $(&quot;#bg_text&quot;).css(&quot;background-color&quot;, &quot;blue&quot;);\n          $(&quot;#bg_text&quot;).html(&quot;&quot;);\n        &#125;\n        if (event.keyCode &#x3D;&#x3D;&#x3D; 71) &#123;\n          $(&quot;#bg_text&quot;).css(&quot;background-color&quot;, &quot;green&quot;);\n          $(&quot;#bg_text&quot;).html(&quot;&quot;);\n        &#125;\n      &#125;);\n    &lt;&#x2F;script&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n","slug":"2021-03-14-jQuery 与 Ajax 入门 - 0119 使用 jQuery 改变 div 背景色","date":"2021-03-14T13:29:39.000Z","categories_index":"JavaWeb","tags_index":"JavaWeb,Imooc","author_index":"JaimeZeng"},{"id":"7e76364a95d9d6b0907d3e06a0925559","title":"Python 在安装包时提示存储库不是受信任的或安全的主机","content":"今天在折腾博客时使用 Python 在安装包时提示存储库不是受信任的或安全的主机，终端显示 Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by &#39;ProxyError(&#39;Cannot connect to proxy.&#39;, OSError(0, &#39;Error&#39;))&#39;: /simple/python-xmlrpc-wordpress/。\n$ pip3 install python-xmlrpc-wordpress\nLooking in indexes: https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple\nWARNING: Retrying (Retry(total&#x3D;4, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ProxyError(&#39;Cannot connect to proxy.&#39;, OSError(0, &#39;Error&#39;))&#39;: &#x2F;simple&#x2F;python-xmlrpc-wordpress&#x2F;\nWARNING: Retrying (Retry(total&#x3D;3, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ProxyError(&#39;Cannot connect to proxy.&#39;, OSError(0, &#39;Error&#39;))&#39;: &#x2F;simple&#x2F;python-xmlrpc-wordpress&#x2F;\nWARNING: Retrying (Retry(total&#x3D;2, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ProxyError(&#39;Cannot connect to proxy.&#39;, OSError(0, &#39;Error&#39;))&#39;: &#x2F;simple&#x2F;python-xmlrpc-wordpress&#x2F;\nWARNING: Retrying (Retry(total&#x3D;1, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ProxyError(&#39;Cannot connect to proxy.&#39;, OSError(0, &#39;Error&#39;))&#39;: &#x2F;simple&#x2F;python-xmlrpc-wordpress&#x2F;\nWARNING: Retrying (Retry(total&#x3D;0, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ProxyError(&#39;Cannot connect to proxy.&#39;, OSError(0, &#39;Error&#39;))&#39;: &#x2F;simple&#x2F;python-xmlrpc-wordpress&#x2F;\n\n在网上查找到解决方法：在 python 中安装包出现 Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None))_lsf_007 的博客-CSDN 博客 。但是文中的解决方式是使用 pip install &lt;some-package&gt; -i http://pypi.douban.com/simple --trusted-host pypi.douban.com 命令解决。\n个人认为这种方式只适合临时使用，如果每次安装都要在安装包后添加信任当前存储库，这样会很麻烦。我们可以将相关信息添加进 pip 的配置文件中。Pip 的配置文件为用户根目录下的：**~/.pip/pip.conf（Windows 路径为：C:\\Users\\&lt;UserName&gt;\\pip\\pip.ini**）, 可以配置如下任意一条内容：\n; TUNA\n[global]\nindex-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple\n\n[install]\ntrusted-host&#x3D;pypi.tuna.tsinghua.edu.cn\ntimeout &#x3D; 120\n\n; 阿里\n[global]\nindex-url &#x3D; https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple\n\n[install]\ntrusted-host&#x3D;mirrors.aliyun.com\ntimeout &#x3D; 120\n\n; USTC\n[global]\nindex-url &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;pypi&#x2F;web&#x2F;simple\n\n[install]\ntrusted-host&#x3D;mirrors.ustc.edu.cn\ntimeout &#x3D; 120\n\n; 豆瓣\n[global]\nindex-url &#x3D; http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple\n\n[install]\ntrusted-host&#x3D;pypi.douban.com\ntimeout &#x3D; 120","slug":"2021-01-10-Python-安装包提示存储库不是受信任的或安全的主机","date":"2021-01-10T15:46:32.000Z","categories_index":"Python","tags_index":"Python,WARNING","author_index":"JaimeZeng"},{"id":"f1e69ca9b60dbe07c2a3003d1cda5a96","title":"1CPU/2G内存/2M带宽/上海/快杰云服务器测评","content":"\n   目录\n\n\n系统配置\n磁盘 IO 测试\nDD 测试\nIOPing 测试\nFIO 测试\n\n\n网络带宽测试\n网络延迟测试\n网络丢包测试\nBenchmarks 性能测试\nSysBench 压力测试\nCPU 压力测试\n内存压力测试\n\n\nGeekbench 处理器内存测试\n\n\n\n\n云服务器配置：\n型号 : 快杰型 O\nCPU  : 1核 （Intel(R) Xeon(R) Gold 6148 CPU @ 2.40GHz  2.39 GHz）\n内存 : 2G\n带宽 : 2M\n磁盘 : 40G （SSD）\n虚拟 : KVM\nIP  : IPv4 x 1 （BGP）\n内网 : 支持内网互通\n数据中心 : 上海二区\n\n系统配置CPU Model            : Intel Xeon Processor (Cascadelake)\nCPU Cores            : 1 Cores 2494.140 MHz x86_64\nCPU Cache            : 16384 KB\nOS                   : CentOS 7.6.1810 (64 Bit) KVM\nAES-NI               : Enabled\nVM-x&#x2F;AMD-V           : Disabled\nKernel               : 4.19.0-9.el7.ucloud.x86_64\nTotal Space          : 1.9 GB &#x2F; 40.0 GB\nTotal RAM            : 67 MB &#x2F; 1917 MB (126 MB Buff)\nTotal SWAP           : 0 MB &#x2F; 0 MB\nUptime               : 0 days 20 hour 22 min\nLoad Average         : 0.00, 0.00, 0.00\nTCP CC               : cubic\nASN &amp; ISP            : AS4812, UCLOUD\nOrganization         : Shanghai UCloud Information Technology Company Limited\nLocation             : Beijing, China &#x2F; CN\nRegion               : Beijing\n\n\n磁盘 IO 测试DD 测试#dd 1Mx1k fdatasync\n1024+0 records in\n1024+0 records out\n1073741824 bytes (1.1 GB) copied, 13.7801 s, 77.9 MB&#x2F;s\n\n#dd 64kx16k fdatasync\n16384+0 records in\n16384+0 records out\n1073741824 bytes (1.1 GB) copied, 13.7582 s, 78.0 MB&#x2F;s\n\n#dd 1Mx1k dsync\n1024+0 records in\n1024+0 records out\n1073741824 bytes (1.1 GB) copied, 13.7411 s, 78.1 MB&#x2F;s\n\n#dd 64kx16k dsync\n16384+0 records in\n16384+0 records out\n1073741824 bytes (1.1 GB) copied, 13.9099 s, 77.2 MB&#x2F;s\n\nIOPing 测试4 KiB &lt;&lt;&lt; &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1): request&#x3D;1 time&#x3D;90.6 us (warmup)\n4 KiB &lt;&lt;&lt; &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1): request&#x3D;2 time&#x3D;130.8 us\n4 KiB &lt;&lt;&lt; &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1): request&#x3D;3 time&#x3D;180.3 us\n4 KiB &lt;&lt;&lt; &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1): request&#x3D;4 time&#x3D;206.4 us\n4 KiB &lt;&lt;&lt; &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1): request&#x3D;5 time&#x3D;192.3 us\n4 KiB &lt;&lt;&lt; &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1): request&#x3D;6 time&#x3D;177.7 us\n4 KiB &lt;&lt;&lt; &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1): request&#x3D;7 time&#x3D;196.3 us\n4 KiB &lt;&lt;&lt; &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1): request&#x3D;8 time&#x3D;234.3 us (slow)\n4 KiB &lt;&lt;&lt; &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1): request&#x3D;9 time&#x3D;195.1 us\n4 KiB &lt;&lt;&lt; &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1): request&#x3D;10 time&#x3D;204.8 us\n\n--- &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1) ioping statistics ---\n9 requests completed in 1.72 ms, 36 KiB read, 5.24 k iops, 20.5 MiB&#x2F;s\ngenerated 10 requests in 9.00 s, 40 KiB, 1 iops, 4.44 KiB&#x2F;s\nmin&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 130.8 us &#x2F; 190.9 us &#x2F; 234.3 us &#x2F; 26.4 us\n\n#IOPing seek rate\n--- &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1) ioping statistics ---\n11.3 k requests completed in 2.99 s, 44.1 MiB read, 3.78 k iops, 14.8 MiB&#x2F;s\ngenerated 11.3 k requests in 3.00 s, 44.1 MiB, 3.76 k iops, 14.7 MiB&#x2F;s\nmin&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 57.6 us &#x2F; 264.8 us &#x2F; 3.43 ms &#x2F; 204.4 us\n\n#IOPing sequential\n--- &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1) ioping statistics ---\n898 requests completed in 2.98 s, 224.5 MiB read, 301 iops, 75.3 MiB&#x2F;s\ngenerated 899 requests in 3.00 s, 224.8 MiB, 299 iops, 74.9 MiB&#x2F;s\nmin&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 1.86 ms &#x2F; 3.32 ms &#x2F; 4.19 ms &#x2F; 502.4 us\n\n#IOPing cached\n--- &#x2F;root&#x2F;benchmark&#x2F; (xfs &#x2F;dev&#x2F;vda1) ioping statistics ---\n2.45 M requests completed in 2.86 s, 9.34 GiB read, 854.8 k iops, 3.26 GiB&#x2F;s\ngenerated 2.45 M requests in 3.00 s, 9.34 GiB, 816.0 k iops, 3.11 GiB&#x2F;s\nmin&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 460 ns &#x2F; 1.17 us &#x2F; 137.8 us &#x2F; 472 ns\n\nFIO 测试fio Disk Speed Tests (Mixed R&#x2F;W 50&#x2F;50):\n---------------------------------\nBlock Size | 4k            (IOPS) | 64k           (IOPS)\n  ------   | ---            ----  | ----           ----\nRead       | 7.56 MB&#x2F;s     (1.8k) | 38.16 MB&#x2F;s     (596)\nWrite      | 7.59 MB&#x2F;s     (1.8k) | 38.46 MB&#x2F;s     (600)\nTotal      | 15.16 MB&#x2F;s    (3.7k) | 76.62 MB&#x2F;s    (1.1k)\n           |                      |\nBlock Size | 512k          (IOPS) | 1m            (IOPS)\n  ------   | ---            ----  | ----           ----\nRead       | 37.31 MB&#x2F;s      (72) | 37.00 MB&#x2F;s      (36)\nWrite      | 39.31 MB&#x2F;s      (76) | 39.65 MB&#x2F;s      (38)\nTotal      | 76.63 MB&#x2F;s     (148) | 76.66 MB&#x2F;s      (74)\n\n\n#FIO full write pass\nwritefile: (g&#x3D;0): rw&#x3D;write, bs&#x3D;(R) 1024KiB-1024KiB, (W) 1024KiB-1024KiB, (T) 1024KiB-1024KiB, ioengine&#x3D;libaio, iodepth&#x3D;200\nfio-3.7\nStarting 1 process\nwritefile: Laying out IO file (1 file &#x2F; 10240MiB)\n\nwritefile: (groupid&#x3D;0, jobs&#x3D;1): err&#x3D; 0: pid&#x3D;30854: Tue Jan  5 16:35:54 2021\n  write: IOPS&#x3D;74, BW&#x3D;74.8MiB&#x2F;s (78.5MB&#x2F;s)(10.0GiB&#x2F;136867msec)\n    slat (usec): min&#x3D;8, max&#x3D;401431, avg&#x3D;13009.29, stdev&#x3D;35003.85\n    clat (msec): min&#x3D;976, max&#x3D;4315, avg&#x3D;2655.81, stdev&#x3D;201.12\n     lat (msec): min&#x3D;976, max&#x3D;4315, avg&#x3D;2668.83, stdev&#x3D;204.07\n    clat percentiles (msec):\n     |  1.00th&#x3D;[ 1737],  5.00th&#x3D;[ 2635], 10.00th&#x3D;[ 2635], 20.00th&#x3D;[ 2635],\n     | 30.00th&#x3D;[ 2668], 40.00th&#x3D;[ 2668], 50.00th&#x3D;[ 2668], 60.00th&#x3D;[ 2668],\n     | 70.00th&#x3D;[ 2668], 80.00th&#x3D;[ 2668], 90.00th&#x3D;[ 2668], 95.00th&#x3D;[ 2769],\n     | 99.00th&#x3D;[ 3540], 99.50th&#x3D;[ 3675], 99.90th&#x3D;[ 4212], 99.95th&#x3D;[ 4212],\n     | 99.99th&#x3D;[ 4329]\n   bw (  KiB&#x2F;s): min&#x3D; 2048, max&#x3D;212992, per&#x3D;99.40%, avg&#x3D;76155.04, stdev&#x3D;13951.54, samples&#x3D;270\n   iops        : min&#x3D;    2, max&#x3D;  208, avg&#x3D;74.33, stdev&#x3D;13.63, samples&#x3D;270\n  lat (msec)   : 1000&#x3D;0.02%\n  cpu          : usr&#x3D;1.44%, sys&#x3D;0.13%, ctx&#x3D;1405, majf&#x3D;0, minf&#x3D;10\n  IO depths    : 1&#x3D;0.1%, 2&#x3D;0.1%, 4&#x3D;0.1%, 8&#x3D;0.1%, 16&#x3D;0.2%, 32&#x3D;0.3%, &gt;&#x3D;64&#x3D;99.4%\n     submit    : 0&#x3D;0.0%, 4&#x3D;100.0%, 8&#x3D;0.0%, 16&#x3D;0.0%, 32&#x3D;0.0%, 64&#x3D;0.0%, &gt;&#x3D;64&#x3D;0.0%\n     complete  : 0&#x3D;0.0%, 4&#x3D;100.0%, 8&#x3D;0.0%, 16&#x3D;0.0%, 32&#x3D;0.0%, 64&#x3D;0.0%, &gt;&#x3D;64&#x3D;0.1%\n     issued rwts: total&#x3D;0,10240,0,1 short&#x3D;0,0,0,0 dropped&#x3D;0,0,0,0\n     latency   : target&#x3D;0, window&#x3D;0, percentile&#x3D;100.00%, depth&#x3D;200\n\nRun status group 0 (all jobs):\n  WRITE: bw&#x3D;74.8MiB&#x2F;s (78.5MB&#x2F;s), 74.8MiB&#x2F;s-74.8MiB&#x2F;s (78.5MB&#x2F;s-78.5MB&#x2F;s), io&#x3D;10.0GiB (10.7GB), run&#x3D;136867-136867msec\n\nDisk stats (read&#x2F;write):\n  vda: ios&#x3D;4&#x2F;10414, merge&#x3D;0&#x2F;4, ticks&#x3D;6527&#x2F;16922060, in_queue&#x3D;16923349, util&#x3D;9.00%\n\n\n#FIO rand read\nbenchmark: (g&#x3D;0): rw&#x3D;randread, bs&#x3D;(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine&#x3D;libaio, iodepth&#x3D;128\n...\nfio-3.7\nStarting 4 processes\n\nbenchmark: (groupid&#x3D;0, jobs&#x3D;4): err&#x3D; 0: pid&#x3D;30858: Tue Jan  5 16:36:25 2021\n   read: IOPS&#x3D;3791, BW&#x3D;14.8MiB&#x2F;s (15.5MB&#x2F;s)(445MiB&#x2F;30033msec)\n    slat (nsec): min&#x3D;1832, max&#x3D;21089k, avg&#x3D;1050410.92, stdev&#x3D;2778297.58\n    clat (usec): min&#x3D;705, max&#x3D;171180, avg&#x3D;133773.08, stdev&#x3D;6267.82\n     lat (usec): min&#x3D;711, max&#x3D;171183, avg&#x3D;134824.10, stdev&#x3D;6187.07\n    clat percentiles (msec):\n     |  1.00th&#x3D;[  126],  5.00th&#x3D;[  126], 10.00th&#x3D;[  127], 20.00th&#x3D;[  128],\n     | 30.00th&#x3D;[  134], 40.00th&#x3D;[  136], 50.00th&#x3D;[  136], 60.00th&#x3D;[  136],\n     | 70.00th&#x3D;[  136], 80.00th&#x3D;[  136], 90.00th&#x3D;[  136], 95.00th&#x3D;[  144],\n     | 99.00th&#x3D;[  146], 99.50th&#x3D;[  146], 99.90th&#x3D;[  148], 99.95th&#x3D;[  155],\n     | 99.99th&#x3D;[  165]\n   bw (  KiB&#x2F;s): min&#x3D; 2746, max&#x3D; 3952, per&#x3D;24.91%, avg&#x3D;3778.01, stdev&#x3D;118.80, samples&#x3D;240\n   iops        : min&#x3D;  686, max&#x3D;  988, avg&#x3D;944.50, stdev&#x3D;29.72, samples&#x3D;240\n  lat (usec)   : 750&#x3D;0.01%\n  lat (msec)   : 2&#x3D;0.01%, 10&#x3D;0.01%, 20&#x3D;0.01%, 50&#x3D;0.08%, 100&#x3D;0.21%\n  lat (msec)   : 250&#x3D;99.69%\n  cpu          : usr&#x3D;0.31%, sys&#x3D;0.43%, ctx&#x3D;14280, majf&#x3D;0, minf&#x3D;548\n  IO depths    : 1&#x3D;0.1%, 2&#x3D;0.1%, 4&#x3D;0.1%, 8&#x3D;0.1%, 16&#x3D;0.1%, 32&#x3D;0.1%, &gt;&#x3D;64&#x3D;99.8%\n     submit    : 0&#x3D;0.0%, 4&#x3D;100.0%, 8&#x3D;0.0%, 16&#x3D;0.0%, 32&#x3D;0.0%, 64&#x3D;0.0%, &gt;&#x3D;64&#x3D;0.0%\n     complete  : 0&#x3D;0.0%, 4&#x3D;100.0%, 8&#x3D;0.0%, 16&#x3D;0.0%, 32&#x3D;0.0%, 64&#x3D;0.0%, &gt;&#x3D;64&#x3D;0.1%\n     issued rwts: total&#x3D;113861,0,0,0 short&#x3D;0,0,0,0 dropped&#x3D;0,0,0,0\n     latency   : target&#x3D;0, window&#x3D;0, percentile&#x3D;100.00%, depth&#x3D;128\n\nRun status group 0 (all jobs):\n   READ: bw&#x3D;14.8MiB&#x2F;s (15.5MB&#x2F;s), 14.8MiB&#x2F;s-14.8MiB&#x2F;s (15.5MB&#x2F;s-15.5MB&#x2F;s), io&#x3D;445MiB (466MB), run&#x3D;30033-30033msec\n\nDisk stats (read&#x2F;write):\n  vda: ios&#x3D;113352&#x2F;2, merge&#x3D;0&#x2F;0, ticks&#x3D;3754819&#x2F;126, in_queue&#x3D;3736875, util&#x3D;99.61%\n\n\n#FIO rand write\nbenchmark: (g&#x3D;0): rw&#x3D;randwrite, bs&#x3D;(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine&#x3D;libaio, iodepth&#x3D;128\n...\nfio-3.7\nStarting 4 processes\n\nbenchmark: (groupid&#x3D;0, jobs&#x3D;4): err&#x3D; 0: pid&#x3D;30864: Tue Jan  5 16:36:56 2021\n  write: IOPS&#x3D;3791, BW&#x3D;14.8MiB&#x2F;s (15.5MB&#x2F;s)(445MiB&#x2F;30034msec)\n    slat (nsec): min&#x3D;1972, max&#x3D;19064k, avg&#x3D;1050205.92, stdev&#x3D;2776178.64\n    clat (msec): min&#x3D;3, max&#x3D;171, avg&#x3D;133.78, stdev&#x3D; 6.20\n     lat (msec): min&#x3D;3, max&#x3D;171, avg&#x3D;134.83, stdev&#x3D; 6.08\n    clat percentiles (msec):\n     |  1.00th&#x3D;[  126],  5.00th&#x3D;[  126], 10.00th&#x3D;[  127], 20.00th&#x3D;[  128],\n     | 30.00th&#x3D;[  136], 40.00th&#x3D;[  136], 50.00th&#x3D;[  136], 60.00th&#x3D;[  136],\n     | 70.00th&#x3D;[  136], 80.00th&#x3D;[  136], 90.00th&#x3D;[  136], 95.00th&#x3D;[  144],\n     | 99.00th&#x3D;[  146], 99.50th&#x3D;[  146], 99.90th&#x3D;[  153], 99.95th&#x3D;[  155],\n     | 99.99th&#x3D;[  165]\n   bw (  KiB&#x2F;s): min&#x3D; 2792, max&#x3D; 4023, per&#x3D;24.91%, avg&#x3D;3777.96, stdev&#x3D;114.04, samples&#x3D;240\n   iops        : min&#x3D;  698, max&#x3D; 1005, avg&#x3D;944.49, stdev&#x3D;28.50, samples&#x3D;240\n  lat (msec)   : 4&#x3D;0.01%, 20&#x3D;0.01%, 50&#x3D;0.08%, 100&#x3D;0.23%, 250&#x3D;99.68%\n  cpu          : usr&#x3D;0.36%, sys&#x3D;0.47%, ctx&#x3D;14266, majf&#x3D;0, minf&#x3D;36\n  IO depths    : 1&#x3D;0.1%, 2&#x3D;0.1%, 4&#x3D;0.1%, 8&#x3D;0.1%, 16&#x3D;0.1%, 32&#x3D;0.1%, &gt;&#x3D;64&#x3D;99.8%\n     submit    : 0&#x3D;0.0%, 4&#x3D;100.0%, 8&#x3D;0.0%, 16&#x3D;0.0%, 32&#x3D;0.0%, 64&#x3D;0.0%, &gt;&#x3D;64&#x3D;0.0%\n     complete  : 0&#x3D;0.0%, 4&#x3D;100.0%, 8&#x3D;0.0%, 16&#x3D;0.0%, 32&#x3D;0.0%, 64&#x3D;0.0%, &gt;&#x3D;64&#x3D;0.1%\n     issued rwts: total&#x3D;0,113868,0,0 short&#x3D;0,0,0,0 dropped&#x3D;0,0,0,0\n     latency   : target&#x3D;0, window&#x3D;0, percentile&#x3D;100.00%, depth&#x3D;128\n\nRun status group 0 (all jobs):\n  WRITE: bw&#x3D;14.8MiB&#x2F;s (15.5MB&#x2F;s), 14.8MiB&#x2F;s-14.8MiB&#x2F;s (15.5MB&#x2F;s-15.5MB&#x2F;s), io&#x3D;445MiB (466MB), run&#x3D;30034-30034msec\n\nDisk stats (read&#x2F;write):\n  vda: ios&#x3D;0&#x2F;113351, merge&#x3D;0&#x2F;0, ticks&#x3D;0&#x2F;3754735, in_queue&#x3D;3737870, util&#x3D;99.37%\n\n网络带宽测试上行带宽：2Mbps，下行带宽：50Mbps。\n使用 Superbench脚本测试。\n----------------------------------------------------------------------\n Node Name        Upload Speed      Download Speed      Latency\n Speedtest.net    1.92 Mbit&#x2F;s       50.54 Mbit&#x2F;s        16.19 ms\n Fast.com         0.00 Mbit&#x2F;s       0 Mbit&#x2F;s            -\n Nanjing 5G   CT  1.91 Mbit&#x2F;s       47.90 Mbit&#x2F;s        7.55 ms\n Hefei 5G     CT  1.92 Mbit&#x2F;s       47.84 Mbit&#x2F;s        10.57 ms\n Guangzhou 5G CT  1.97 Mbit&#x2F;s       49.69 Mbit&#x2F;s        31.17 ms\n TianJin 5G   CU  1.93 Mbit&#x2F;s       50.44 Mbit&#x2F;s        19.65 ms\n Shanghai 5G  CU  1.90 Mbit&#x2F;s       47.98 Mbit&#x2F;s        1.24 ms\n Tianjin 5G   CM  1.92 Mbit&#x2F;s       48.66 Mbit&#x2F;s        27.28 ms\n Wuxi 5G      CM  1.92 Mbit&#x2F;s       48.63 Mbit&#x2F;s        10.41 ms\n Nanjing 5G   CM  1.91 Mbit&#x2F;s       47.39 Mbit&#x2F;s        10.81 ms\n Hefei 5G     CM  1.94 Mbit&#x2F;s       47.98 Mbit&#x2F;s        15.42 ms\n----------------------------------------------------------------------\n\n使用 LemonBench 脚本测试。\n----------------------------------------------------------------------------------\n Node Name                      Upload Speed      Download Speed   Ping Latency\n Speedtest Default                0.23 MB&#x2F;s        6.00 MB&#x2F;s        18.18 ms\n China, Jilin CU                0.23 MB&#x2F;s        6.07 MB&#x2F;s        41.26 ms\n China, Shandong CU                0.22 MB&#x2F;s        5.77 MB&#x2F;s        28.26 ms\n China, Nanjing CU                0.24 MB&#x2F;s        5.82 MB&#x2F;s        7.49 ms\n China, Shanghai CU                0.24 MB&#x2F;s        5.75 MB&#x2F;s        1.24 ms\n China, Lanzhou CU                Fail: Unknown Error\n China, Beijing CT                Fail: Unknown Error\n China, Hangzhou CT                0.23 MB&#x2F;s        5.79 MB&#x2F;s        5.50 ms\n China, Nanjing CT                0.22 MB&#x2F;s        5.70 MB&#x2F;s        8.94 ms\n China, Guangzhou CT            0.23 MB&#x2F;s        6.86 MB&#x2F;s        30.02 ms\n China, Wuhan CT                0.23 MB&#x2F;s        5.74 MB&#x2F;s        18.40 ms\n China, Shenyang CM                0.23 MB&#x2F;s        5.82 MB&#x2F;s        39.42 ms\n China, Hangzhou CM                0.24 MB&#x2F;s        5.77 MB&#x2F;s        17.65 ms\n China, Nanning CM                0.23 MB&#x2F;s        5.86 MB&#x2F;s        50.64 ms\n China, Lanzhou CM                0.23 MB&#x2F;s        5.88 MB&#x2F;s        46.02 ms\n Hong Kong, HGC                    0.15 MB&#x2F;s        5.79 MB&#x2F;s        52.86 ms\n Hong Kong, CSL                    0.23 MB&#x2F;s        0.70 MB&#x2F;s        44.04 ms\n Hong Kong, PCCW                Fail: Unknown Error\n Korea, SK [Kdatacenter]        0.23 MB&#x2F;s        0.27 MB&#x2F;s        41.41 ms\n Japan, NTT [fdcservers]        0.24 MB&#x2F;s        0.30 MB&#x2F;s        63.57 ms\n Japan, NTT [i3d]                Fail: Unknown Error\n Japan GLBB                        0.24 MB&#x2F;s        0.11 MB&#x2F;s        275.13 ms\n Japan Rakuten                    0.23 MB&#x2F;s        1.71 MB&#x2F;s        58.26 ms\n Taiwan, Seednet                0.13 MB&#x2F;s        5.87 MB&#x2F;s        59.95 ms\n Taiwan, HiNet                    0.24 MB&#x2F;s        6.00 MB&#x2F;s        50.90 ms\n Taiwan, TFN                    0.16 MB&#x2F;s        5.85 MB&#x2F;s        53.42 ms\n Singapore, Singtel                0.24 MB&#x2F;s        6.77 MB&#x2F;s        306.33 ms\n Singapore, M1                    0.26 MB&#x2F;s        0.17 MB&#x2F;s        307.53 ms\n Singapore, NME                    0.21 MB&#x2F;s        7.15 MB&#x2F;s        66.76 ms\n United States, Century Link    0.25 MB&#x2F;s        0.11 MB&#x2F;s        182.87 ms\n United States, Verizon            Fail: Unknown Error\n----------------------------------------------------------------------------------\n\n网络延迟测试\n\n\n区域\n最快/最慢\n平均\n\n\n\n全网\n上海(bgp) 2.8ms/新西兰奥克兰(globicom.co.nz) 3603.0ms\n176.7ms\n\n\n移动\n江苏常州(移动) 5.9ms/湖南益阳(移动) 530.4ms\n56.1ms\n\n\n联通\n江苏连云港(联通) 9.8ms/吉林延边(联通) 46.4ms\n26.4ms\n\n\n电信\n上海(电信) 3.9ms/云南昆明(电信) 45.9ms\n23.6ms\n\n\n华南\n广东广州(腾讯云) 28.6ms / 广东深圳(天威-bgp) 45.2ms\n34.4ms\n\n\n华北\n天津(腾讯云) 20.4ms / 北京(移动云) 38.5ms\n27.6ms\n\n\n华东\n上海(bgp) 2.8ms / 江苏南通(移动) 119.7ms\n15.0ms\n\n\n华中\n河南洛阳(bgp) 19.3ms / 湖南益阳(移动) 530.4ms\n85.7ms\n\n\n东北\n辽宁沈阳(联通-云端 2) 36.3ms / 辽宁沈阳(移动) 55.2ms\n44.6ms\n\n\n西北\n陕西西安(移动云) 28.8ms / 陕西西安(移动云) 28.8ms\n28.8ms\n\n\n西南\n山东济南(移动云) 18.3ms / 云南昆明(移动) 55.7ms\n40.0ms\n\n\n港澳台\n香港(腾讯云-轻量) 29.3ms / 香港(stacksnet.com) 330.9ms\n86.0ms\n\n\n亚洲\n韩国首尔(4090.cn) 27.3ms/日本东京 711.7ms\n185.6ms\n\n\n欧洲\n俄罗斯伯力 92.8ms/芬兰哈米纳(GCP) 380.4ms\n249.9ms\n\n\n非洲\n南非约翰内斯堡(runidc.com) 191.4ms/南非约翰内斯堡(华为云) 423.8ms\n320.6ms\n\n\n北美洲\n美国圣何塞(腾讯云) 129.9ms/墨西哥普埃布拉 326.9ms\n203.7ms\n\n\n南美洲\n巴西里约热内卢 299.4ms/智利瓦尔迪维亚 483.2ms\n378.4ms\n\n\n大洋洲\n澳大利亚悉尼(AMAZON-LIGHTSAIL) 164.9ms/新西兰奥克兰(globicom.co.nz) 3603.0ms\n504.5ms\n\n\n网络丢包测试\nBenchmarks 性能测试&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n   BYTE UNIX Benchmarks (Version 5.1.3)\n\n   System: 10-23-107-24: GNU&#x2F;Linux\n   OS: GNU&#x2F;Linux -- 4.19.0-9.el7.ucloud.x86_64 -- #1 SMP Mon Sep 28 10:29:09 UTC 2020\n   Machine: x86_64 (x86_64)\n   Language: en_US.utf8 (charmap&#x3D;&quot;UTF-8&quot;, collate&#x3D;&quot;UTF-8&quot;)\n   CPU 0: Intel Xeon Processor (Cascadelake) (4988.3 bogomips)\n          x86-64, MMX, Physical Address Ext, SYSENTER&#x2F;SYSEXIT, SYSCALL&#x2F;SYSRET\n   16:37:26 up 1 day, 49 min,  2 users,  load average: 2.17, 1.26, 0.54; runlevel 3\n\n------------------------------------------------------------------------\nBenchmark Run: Tue Jan 05 2021 16:37:26 - 17:05:28\n1 CPU in system; running 1 parallel copy of tests\n\nDhrystone 2 using register variables       39250964.9 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                     4683.3 MWIPS (9.8 s, 7 samples)\nExecl Throughput                               4915.4 lps   (30.0 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks        718302.5 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          217004.9 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       1408054.4 KBps  (30.0 s, 2 samples)\nPipe Throughput                             1302544.1 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                 263283.5 lps   (10.0 s, 7 samples)\nProcess Creation                              11682.1 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                   5726.1 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                    739.2 lpm   (60.1 s, 2 samples)\nSystem Call Overhead                        1003677.4 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0   39250964.9   3363.4\nDouble-Precision Whetstone                       55.0       4683.3    851.5\nExecl Throughput                                 43.0       4915.4   1143.1\nFile Copy 1024 bufsize 2000 maxblocks          3960.0     718302.5   1813.9\nFile Copy 256 bufsize 500 maxblocks            1655.0     217004.9   1311.2\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    1408054.4   2427.7\nPipe Throughput                               12440.0    1302544.1   1047.1\nPipe-based Context Switching                   4000.0     263283.5    658.2\nProcess Creation                                126.0      11682.1    927.2\nShell Scripts (1 concurrent)                     42.4       5726.1   1350.5\nShell Scripts (8 concurrent)                      6.0        739.2   1231.9\nSystem Call Overhead                          15000.0    1003677.4    669.1\n                                                                   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nSystem Benchmarks Index Score                                        1241.8\n\n------------------------------------------------------------------------\nBenchmark Run: Tue Jan 05 2021 17:05:28 - 17:33:30\n1 CPU in system; running 1 parallel copy of tests\n\nDhrystone 2 using register variables       38893710.4 lps   (10.0 s, 7 samples)\nDouble-Precision Whetstone                     4670.4 MWIPS (9.8 s, 7 samples)\nExecl Throughput                               4792.1 lps   (29.7 s, 2 samples)\nFile Copy 1024 bufsize 2000 maxblocks        654580.1 KBps  (30.0 s, 2 samples)\nFile Copy 256 bufsize 500 maxblocks          217516.6 KBps  (30.0 s, 2 samples)\nFile Copy 4096 bufsize 8000 maxblocks       1391127.2 KBps  (30.0 s, 2 samples)\nPipe Throughput                             1310590.0 lps   (10.0 s, 7 samples)\nPipe-based Context Switching                 264926.3 lps   (10.0 s, 7 samples)\nProcess Creation                              11501.0 lps   (30.0 s, 2 samples)\nShell Scripts (1 concurrent)                   5763.9 lpm   (60.0 s, 2 samples)\nShell Scripts (8 concurrent)                    747.8 lpm   (60.0 s, 2 samples)\nSystem Call Overhead                        1003968.7 lps   (10.0 s, 7 samples)\n\nSystem Benchmarks Index Values               BASELINE       RESULT    INDEX\nDhrystone 2 using register variables         116700.0   38893710.4   3332.8\nDouble-Precision Whetstone                       55.0       4670.4    849.2\nExecl Throughput                                 43.0       4792.1   1114.4\nFile Copy 1024 bufsize 2000 maxblocks          3960.0     654580.1   1653.0\nFile Copy 256 bufsize 500 maxblocks            1655.0     217516.6   1314.3\nFile Copy 4096 bufsize 8000 maxblocks          5800.0    1391127.2   2398.5\nPipe Throughput                               12440.0    1310590.0   1053.5\nPipe-based Context Switching                   4000.0     264926.3    662.3\nProcess Creation                                126.0      11501.0    912.8\nShell Scripts (1 concurrent)                     42.4       5763.9   1359.4\nShell Scripts (8 concurrent)                      6.0        747.8   1246.3\nSystem Call Overhead                          15000.0    1003968.7    669.3\n                                                                   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nSystem Benchmarks Index Score                                        1229.0\n\nSysBench 压力测试CPU 压力测试sysbench 1.0.17 (using system LuaJIT 2.0.4)\n\nRunning the test with following options:\nNumber of threads: 1\nInitializing random number generator from current time\n\n\nPrime numbers limit: 20000\n\nInitializing worker threads...\n\nThreads started!\n\nCPU speed:\n    events per second:   407.89\n\nGeneral statistics:\n    total time:                          10.0010s\n    total number of events:              4080\n\nLatency (ms):\n         min:                                    2.38\n         avg:                                    2.45\n         max:                                    3.24\n         95th percentile:                        2.86\n         sum:                                 9993.97\n\nThreads fairness:\n    events (avg&#x2F;stddev):           4080.0000&#x2F;0.00\n    execution time (avg&#x2F;stddev):   9.9940&#x2F;0.00\n\n内存压力测试sysbench 1.0.17 (using system LuaJIT 2.0.4)\n\nRunning the test with following options:\nNumber of threads: 1\nInitializing random number generator from current time\n\n\nRunning memory speed test with the following options:\n  block size: 1KiB\n  total size: 102400MiB\n  operation: write\n  scope: global\n\nInitializing worker threads...\n\nThreads started!\n\nTotal operations: 44316973 (4430902.78 per second)\n\n43278.29 MiB transferred (4327.05 MiB&#x2F;sec)\n\n\nGeneral statistics:\n    total time:                          10.0001s\n    total number of events:              44316973\n\nLatency (ms):\n         min:                                    0.00\n         avg:                                    0.00\n         max:                                    0.18\n         95th percentile:                        0.00\n         sum:                                 4305.55\n\nThreads fairness:\n    events (avg&#x2F;stddev):           44316973.0000&#x2F;0.00\n    execution time (avg&#x2F;stddev):   4.3056&#x2F;0.00\n\nGeekbench 处理器内存测试Running Gathering system information\nSystem Information\n  Operating System              Linux 4.19.0-9.el7.ucloud.x86_64 x86_64\n  Model                         Red Hat KVM\n  Motherboard                   N&#x2F;A\n  BIOS                          SeaBIOS 1.10.2-3.el7_4.1\n\nProcessor Information\n  Name                          Intel Xeon Processor (Cascadelake)\n  Topology                      1 Processor, 1 Core\n  Identifier                    GenuineIntel Family 6 Model 85 Stepping 6\n  Base Frequency                2.49 GHz\n  L1 Instruction Cache          32.0 KB\n  L1 Data Cache                 32.0 KB\n  L2 Cache                      4.00 MB\n  L3 Cache                      16.0 MB\n\nMemory Information\n  Size                          1.87 GB\n\nUpload succeeded. Visit the following link and view your results online:\n\n  https:&#x2F;&#x2F;browser.geekbench.com&#x2F;v5&#x2F;cpu&#x2F;5713421\n","slug":"2021-01-05-1CPU2G内存2M带宽上海快杰云服务器测评","date":"2021-01-05T11:25:26.000Z","categories_index":"主机测评","tags_index":"UCloud,主机测评","author_index":"JaimeZeng"},{"id":"cea1a94a50542f103362df752d09b04e","title":"CentOS 7 使用 Docker 快速搭建 LNMP 环境","content":"Docker 安装安装 Dockercurl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun\n\n配置国内镜像mkdir -p &#x2F;etc&#x2F;docker\ncat &gt;&#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt; EOF\n&#123;\n  &quot;registry-mirrors&quot;: [\n      &quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,\n      &quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;\n  ]\n&#125;\nEOF\n\n修改 Docker 持久化目录test -d &#x2F;var&#x2F;lib&#x2F;docker &amp;&amp; \\\n    mv &#x2F;var&#x2F;lib&#x2F;docker &#x2F;var&#x2F;lib&#x2F;docker_backup &amp;&amp; \\\n    mkdir -p &#x2F;data&#x2F;docker &amp;&amp; \\\n    ln -sf &#x2F;data&#x2F;docker &#x2F;var&#x2F;lib&#x2F;docker\n\n创建 Docker 工作组groupadd docker\n\n添加用户到 Docker 工作组Docker 默认只能通过 root 权限执行操作， 但通过将用户添加到 docker 用户组可以规避这一点：\ngpasswd -a $&#123;USER&#125; docker\n## or\nusermod -aG docker $&#123;USER&#125;\n\n启动 Docker 并加入开机启动项systemctl daemon-reload\nsystemctl start docker\nsystemctl enable docker\n\n安装校验docker version\n\n安装 LNMP搜索镜像docker search lnmp\n\n拉取镜像$ docker pull 2233466866&#x2F;lnmp:latest\n\n创建相关目录mkdir -p &#x2F;app&#x2F;lnmp&#x2F;default &#x2F;docker&#x2F;lnmp&#x2F;\ncd &#x2F;docker&#x2F;lnmp&#x2F;\nmkdir -p data&#x2F;mysql conf&#x2F;vhost\nmkdir logs backup temp\n\n创建相关文件Nginx/MySQL/PHP 配置文件根据自己情况修改。\nNginx 配置文件cat &gt;&#x2F;docker&#x2F;lnmp&#x2F;conf&#x2F;nginx.conf &lt;&lt;EOF\nuser                    www;\nworker_processes        auto;\nworker_cpu_affinity     auto;\npid                     logs&#x2F;nginx.pid;\n\nevents &#123;\n    worker_connections  102400;\n&#125;\n\nhttp &#123;\n    charset             utf-8;\n    server_tokens       off;\n\n    log_format  main    &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                        &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                        &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\n    include             mime.types;\n    default_type        application&#x2F;octet-stream;\n\n    client_max_body_size 20M;\n\n    sendfile            on;\n    keepalive_timeout   20;\n\n    gzip                on;\n    gzip_vary           on;\n    gzip_comp_level     1;\n    gzip_types          text&#x2F;css application&#x2F;javascript application&#x2F;json image&#x2F;png image&#x2F;webp image&#x2F;apng image&#x2F;jpeg image&#x2F;x-icon;\n\n    error_log           &#x2F;www&#x2F;z_error.log;\n    access_log          &#x2F;www&#x2F;z_$host.log main;\n\n    server &#123;\n        listen 443 ssl http2;\n        server_name www.test.com;\n        root        &#x2F;www;\n\n        # SSL 配置......\n\n        # Allow large attachments\n        client_max_body_size 128M;\n\n        location &#x2F; &#123;\n            index   index.php index.html index.htm;\n            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        &#125;\n\n        location ~* \\.php &#123;\n            include                 fastcgi_params;\n            fastcgi_index           index.php;\n            fastcgi_pass            127.0.0.1:9000;\n            fastcgi_split_path_info ^(.+\\.php)(.*)$;\n            fastcgi_param           PATH_INFO       $fastcgi_path_info;\n            fastcgi_param           SCRIPT_NAME     $fastcgi_script_name;\n            fastcgi_param           SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        &#125;\n    &#125;\n&#125;\nEOF\n\nMySQL 配置文件cat &gt;&#x2F;docker&#x2F;lnmp&#x2F;conf&#x2F;my.cnf &lt;&lt;EOF\n[mysqld]\ndatadir&#x3D;&#x2F;data&#x2F;mysql\nsocket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock\nsymbolic-links&#x3D;0\nlog-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.log\npid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid\nEOF\n\nPHP 配置文件配置文件太大就不贴了，直接下载然后本地修改吧。不会使用 vim 的使用 sed 命令进行替换。\nwget -N https:&#x2F;&#x2F;pic.ryanjie.cn&#x2F;docker&#x2F;lnmp&#x2F;php.ini -O &#x2F;docker&#x2F;lnmp&#x2F;conf&#x2F;php.ini\nwget -N https:&#x2F;&#x2F;pic.ryanjie.cn&#x2F;docker&#x2F;lnmp&#x2F;php-fpm.conf -O &#x2F;docker&#x2F;lnmp&#x2F;conf&#x2F;php-fpm.conf\n## 上面两个文件也可以\nwget -N https:&#x2F;&#x2F;pic.ryanjie.cn&#x2F;docker&#x2F;lnmp&#x2F;nginx.conf -O &#x2F;docker&#x2F;lnmp&#x2F;conf&#x2F;nginx.conf\nwget -N https:&#x2F;&#x2F;pic.ryanjie.cn&#x2F;docker&#x2F;lnmp&#x2F;my.cnf -O &#x2F;docker&#x2F;lnmp&#x2F;conf&#x2F;my.cnf\n\n备份配置文件cp conf&#x2F;* backup&#x2F;\n\n创建自定义网络 lnmp$ docker network create lnmp\n9d4d47ee3b875cdadf7300182f5de43523efdd0aaecbe37a79ed2cdc75feb777\n$ docker network  ls\nNETWORK ID     NAME      DRIVER    SCOPE\n545f4bdc894a   bridge    bridge    local\n753524bb4716   host      host      local\n9d4d47ee3b87   lnmp      bridge    local\n8623643804ac   none      null      local\n\n启动容器docker run -dit \\\n-p 8080:80 \\\n-p 443:443 \\\n-p 3306:3306 \\\n-p 9000:9000 \\\n-e TC&#x3D;&quot;Asia&#x2F;Shanghai&quot; \\\n-v &#x2F;sys&#x2F;fs&#x2F;cgroup:&#x2F;sys&#x2F;fs&#x2F;cgroup:ro \\\n-v &#x2F;app&#x2F;lnmp:&#x2F;www \\\n-v &#x2F;docker&#x2F;lnmp&#x2F;conf&#x2F;nginx.conf:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf \\\n-v &#x2F;docker&#x2F;lnmp&#x2F;conf&#x2F;vhost:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;vhost \\\n-v &#x2F;docker&#x2F;lnmp&#x2F;data&#x2F;mysql:&#x2F;data&#x2F;mysql \\\n-v &#x2F;docker&#x2F;lnmp&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf \\\n-v &#x2F;docker&#x2F;lnmp&#x2F;conf&#x2F;php.ini:&#x2F;usr&#x2F;local&#x2F;php7&#x2F;lib&#x2F;php.ini \\\n-v &#x2F;docker&#x2F;lnmp&#x2F;conf&#x2F;php-fpm.conf:&#x2F;usr&#x2F;local&#x2F;php7&#x2F;etc&#x2F;php-fpm.conf \\\n-v &#x2F;docker&#x2F;lnmp&#x2F;logs:&#x2F;logs \\\n--restart&#x3D;always \\\n--net lnmp \\\n--privileged&#x3D;true \\\n--name&#x3D;mylnmp \\\n2233466866&#x2F;lnmp:latest\n\n连接容器# 容器名称与上一步保持一致\ndocker exec -it lnmp &#x2F;bin&#x2F;bash\n\n配置 LNMP检查 Nginx/MySQL/PHP 状态ps aux|grep nginx\nps aux|grep mysql\nps aux|grep php-fpm\n# 或者(Or)\nsystemctl status nginx\nsystemctl status mysqld\nsystemctl status php7\n\n初始密码(Default password)cat &#x2F;var&#x2F;log&#x2F;mysqld.log|grep &#39;A temporary password&#39;\n# 或\npassword&#x3D;&#96;cat &#x2F;var&#x2F;log&#x2F;mysqld.log|grep &#39;A temporary password&#39;&#96;;password&#x3D;$&#123;password:91&#125;;echo $password\n\n初始化(initialize)# 请及时修改Mysql的密码(默认并未重置密码和初始化)\npassword&#x3D;&#96;cat &#x2F;var&#x2F;log&#x2F;mysqld.log|grep &#39;A temporary password&#39;&#96;\npassword&#x3D;$&#123;password:91&#125;\necho -e &quot;$&#123;password&#125;\\n$&#123;password&#125;\\n$&#123;password&#125;\\nn\\ny\\ny\\ny\\ny\\n&quot;\n# 以上三条命令的输出为以下命令的输入\nmysql_secure_installation\n\nPHP 扩展(PHP extension)# 默认已安装部分扩展在目录：&#x2F;usr&#x2F;local&#x2F;php7&#x2F;lib&#x2F;php&#x2F;extensions&#x2F;no-debug-non-zts-20170718&#x2F;\n# 如果要启用指定扩展，则需要修改php.ini，加上\nextension&#x3D;xxx.so\n# xxx为PHP扩展的文件名，然后重启php\nsystemctl restart php7\n\n版本(Version)# 各版本详细信息请参考\nhttps:&#x2F;&#x2F;github.com&#x2F;2233466866&#x2F;lnmp&#x2F;wiki\n\n推送镜像这里使用 Ucloud 的 公共镜像库 UHub。UHub 是一种 UCloud 推出的免费的公共镜像库服务。\n\n登录镜像仓库。\n$ docker login uhub.service.ucloud.cn -u ryan@gmail.com\n本地对镜像打 tag:\n$ docker tag 2233466866&#x2F;lnmp:latest uhub.service.ucloud.cn&#x2F;kongren&#x2F;2233466866&#x2F;lnmp:0.0.1\n提交镜像到仓库:\n$ docker push uhub.service.ucloud.cn&#x2F;kongren&#x2F;2233466866&#x2F;lnmp:0.0.1\n\n参考\n2233466866/lnmp Wiki\n\n","slug":"2021-01-03-CentOS-7-使用-Docker-快速搭建-LNMP-环境","date":"2021-01-03T15:34:50.000Z","categories_index":"CentOS","tags_index":"CentOS,Docker,LNMP","author_index":"JaimeZeng"},{"id":"410e5617732351033c2107ab8a0a20b0","title":"使用 GitHub Action 每天自动签到领取 UCloud 社区积分","content":"\n   目录\n\n\n特点\n已实现\nTODO\n\n\n使用方法\n参数配置\n运行签到\nAction 定时任务\n签到信息推送\n\n\n\n\n常见问题\n关于定时任务不执行\nTGBot 推送相关参数获取\nFork 之后如何同步原作者的更新内容\n方式一： 保留自己内容\n方式二： 源作者内容直接覆盖自己内容\n\n\n\n\n感谢\nLicense\n\n\n\n\n\n\n\n\n\n\n\n\n\nUClub 社区签到积分规则：每天签到奖励 1 积分，连续签到 30 天后，每天签到奖励 2 积分。\nUClub 是前段时间 UCloud 效仿阿里云和腾讯云进行社区积累社群及资源创建的用户社区。目前还属于推广阶段，正在进行的就是通过邀请会员参与社区，提问、发文、回复和评论获取积分，积分可兑换代金券和礼品。\n每天手动登录网站签到，结果昨天因为事情太多忙的忘记登录签到，之前连续登录的 20 多天……于是开始寻找每天自动签到的方法。无意间在 Github 上发现已经有大佬 @CokeMine 提供。使用 GitHub Actions，可以实现每天线上自动运行，只要部署一次，即可实现每天自动登录签到。缺点是没有签到结果推送。于是本人在大佬在大佬的代码上稍作修改使其支持签到结果推送。\n\n\n\n\n\n\n\n\n\n\n原项目：CokeMine/Auto_uclub_signin\n修改后项目：Ryanjiena/Auto_uclub_signin\n\n\n特点已实现\n支持使用配置文件读取账户信息\n支持一日二次签到（7 点，19 点）\n支持多用户（暂只支持手机号密码登录方式）\n支持推送签到信息到 QQ、微信和 Telegram（需配置 TelegramBot、Server 酱和 Qmsg 酱）\n自动同步上游代码\n\nTODO\n 分析签到信息和推送结果\n 支持登录验证码\n 账号脱敏处理\n 多线程签到\n\n使用方法参数配置Fork 该仓库，进入仓库后点击 Settings，右侧栏点击 Secrets，点击 New secret。按需添加以下值：\n\n\n\nSecret Name\nSecret Value\n参数说明\n是否可选\n\n\n\nUSERS\n18888888888----abc123456;\n用户组，格式为 手机号----密码，多个站点或用户使用 ; 分隔\n必填，至少存在一组\n\n\nPUSH_KEY\nSCxxxxxxxxxxxxx\n微信推送 ，填写自己申请Server 酱的SC KEY\n可选\n\n\nQMSG_KEY\ne6fxxxxxxxxxxxx\nQQ 推送 ，填写自己申请Qmsg 酱的 QMSG_KEY\n可选\n\n\nTELEGRAMBOT_TOKEN\n123456:ABC-DEF1234xxx-xxx123ew11\nTGBot 推送，填写自己向@BotFather 申请的 Bot Token\n可选，和下面的一起使用\n\n\nTELEGRAMBOT_CHATID\n11xxxxxx03\nTGBot 推送，填写@getuseridbot私聊获取到的纯数字 CHAT_ID\n可选，和上面一起使用\n\n\n\n\n\n\n\n\n\n\n\nTGBot 推送相关参数获取步骤可以点击 [TGBot 推送相关参数获取](#TGBot 推送相关参数获取) 查看。\n运行签到定时任务将于每天早上 7:00 分和晚上 19:00 执行，如果需要修改请编辑 .github/workflows/action.yaml 中 on.schedule.cron 的值（注意，该时间时区为国际标准时区，国内时间需要 -8 Hours）。\n\n\n\n\n\n\n\n\n\nFork 后的项目 Github Actions 默认处于关闭状态，需要手动开启 Actions，执行一次工作流。后续定时任务(cron)才会自动执行。具体操作信息看：关于定时任务不执行。\nAction 定时任务2020-12-30 09:00:06\n## 正在签到第 1 个用户:\n账号:密码:\n登陆成功!\n今天已签到,请明天再来!\n签到完成!\n检测到 TGBot 配置信息，正在尝试 TGBot 推送\n检测到 Qmsg 配置信息，正在尝试 Qmsg 酱推送\n检测到 Server 配置信息，正在尝试 Server 酱推送\n\n签到信息推送\n\n\nTelegramBot 推送\nQmsg 酱推送\nServer 酱推送\n\n\n\n\n\n待上传\n\n\n常见问题关于定时任务不执行因为 Github 默认 Fork 后的项目 Github Actions 处于关闭状态，定时任务执行需要手动开启 Actions，执行一次工作流。解决方法有三种：\n\n修改项目相关文件，比如这个 README.md，新增一个空格也算，然后提交。\n\n进入 Actions，手动执行一次工作流。\n\n\n进入 Fork 后的项目，点击右上角的 star 按钮。\n\n\n\nTGBot 推送相关参数获取\n\n\n\n\n\n\n\n\n需要TELEGRAMBOT_TOKEN和TELEGRAMBOT_CHATID一起使用，前者用于调用 bot，后者用于指定推送目标。\n\n\n\nTELEGRAMBOT_CHATID获取\nTELEGRAMBOT_TOKEN获取\n\n\n\n\n\n\n\nFork 之后如何同步原作者的更新内容用户可选手动 PR 同步或者使用插件 Pull App 自动同步原作者的更新内容。手动 PR 同步可以参考 手动 PR 同步教程。自动同步需要安装  Pull app 插件。使用插件 Pull App 自动同步步骤如下。\n\n安装  Pull app 插件。\n\n安装过程中会让你选择要选择那一种方式;\n\nAll repositories表示同步已经 frok 的仓库以及未来 fork 的仓库；\nOnly select repositories表示仅选择要自己需要同步的仓库，其他 fork 的仓库不会被同步。\n\n根据自己需求选择，实在不知道怎么选择，就选 All repositories。\n点击 install，完成安装。\n\nPull App 可以指定是否保留自己已经修改的内容，分为下面两种方式，如果你不知道他们的区别，就请选择方式二；如果你知道他们的区别，并且懂得如何解决 git 冲突，可根据需求自由选择任一方式。\n\n\n方式一： 保留自己内容\n\n\n\n\n\n\n\n\n该方式会在上游代码更新后，判断上游更新内容和自己分支代码是否存在冲突，如果有冲突则需要自己手动合并解决（也就是不会直接强制直接覆盖）。如果上游代码更新涉及 workflow 里的文件内容改动，这时也需要自己手动合并解决。\n步骤如下：\n\n确认已安装  Pull app 插件。\n\n编辑 pull.yml (在 .github 目录下) 文件，将第 5 行内容修改为 mergeMethod: merge，然后保存提交。 （默认就是 merge，如果未修改过，可以不用再次提交）\n\n\n完成后，上游代码更新后 pull 插件就会自动发起 PR 更新自己分支代码！只是如果存在冲突，需要自己手动去合并解决冲突。\n当然也可以立即手动触发同步：https://pull.git.ci/process/$&#123;owner&#125;/$&#123;repo&#125;\n方式二： 源作者内容直接覆盖自己内容\n\n\n\n\n\n\n\n\n该方式会将源作者的内容直接强制覆盖到自己的仓库中，也就是不会保留自己已经修改过的内容。\n步骤如下：\n\n确认已安装  Pull app 插件。\n\n编辑 pull.yml (在 .github 目录下)文件，将第 5 行内容修改为 mergeMethod: hardreset，然后保存提交。\n\n\n完成后，上游代码更新后 pull 插件会自动发起 PR 更新覆盖自己仓库的代码！\n当然也可以立即手动触发同步：https://pull.git.ci/process/$&#123;owner&#125;/$&#123;repo&#125;\n感谢\nCokeMine/Auto_uclub_signin\n\nLicenseLicensed under the MIT license.\n","slug":"2020-12-27-使用-GitHub-Action-每天自动签到领取-UCloud-社区积分","date":"2020-12-27T14:06:38.000Z","categories_index":"GitHub Action","tags_index":"UCloud,GitHub Action","author_index":"JaimeZeng"},{"id":"3fa42550f46070f8699a32769bdd3786","title":"WordPress 外链转内链避免权重流失","content":"WordPress 外链转为内链，这样可以减少权重的流失或者隐藏某些推荐链接。实现方法有两种：安装插件实现或者直接使用代码实现。\n\n重写外链安装插件在后台插件安装界面搜索 Anylink 即可在线安装。插件配置时需注意：\n\n跳转目录名称：go 。应该与网站根目录下跳转页面文件夹名相同。\n\n\n代码实现替换文章内容中的外链在主题目录下的 functions.php 新增如下函数，即可将文章中的外链替换为 go 跳转的形式：\n&#x2F;&#x2F;给外部链接加上跳转 https:&#x2F;&#x2F;zhang.ge&#x2F;4683.html\nadd_filter(&#39;the_content&#39;,&#39;the_content_nofollow&#39;,999);\nfunction the_content_nofollow($content)\n&#123;\n    preg_match_all(&#39;&#x2F;&lt;a(.*?)href&#x3D;&quot;(.*?)&quot;(.*?)&gt;&#x2F;&#39;,$content,$matches);\n    if($matches)&#123;\n        foreach($matches[2] as $val)&#123;\n            if(strpos($val,&#39;:&#x2F;&#x2F;&#39;)!&#x3D;&#x3D;false &amp;&amp; strpos($val,home_url())&#x3D;&#x3D;&#x3D;false &amp;&amp; !preg_match(&#39;&#x2F;\\.(jpg|jepg|png|ico|bmp|gif|tiff)&#x2F;i&#39;,$val))&#123;\n                $content&#x3D;str_replace(&quot;href&#x3D;\\&quot;$val\\&quot;&quot;, &quot;href&#x3D;\\&quot;&quot;.home_url().&quot;&#x2F;go&#x2F;?url&#x3D;$val\\&quot; &quot;,$content);\n            &#125;\n        &#125;\n    &#125;\n    return $content;\n&#125;\n\n替换评论者的链接在主题目录下的 functions.php 查找是否存在修改评论链接为新窗口 commentauthor 函数，如果存在则如下修改第 8 行，将 $url 修改为 /go/?url=$url，其实就是在前面新增一个 go 跳转。\n&#x2F;&#x2F;评论链接新窗口\nfunction commentauthor($comment_ID &#x3D; 0) &#123;\n    $url    &#x3D; get_comment_author_url( $comment_ID );\n    $author &#x3D; get_comment_author( $comment_ID );\n    if ( empty( $url ) || &#39;http:&#x2F;&#x2F;&#39; &#x3D;&#x3D; $url )\n        echo $author;\n    else\n        echo &quot;&lt;a href&#x3D;&#39;&quot;.home_url().&quot;&#x2F;go&#x2F;?url&#x3D;$url&#39; rel&#x3D;&#39;external nofollow&#39; target&#x3D;&#39;_blank&#39; class&#x3D;&#39;url&#39;&gt;$author&lt;&#x2F;a&gt;&quot;;\n&#125;\n\n新增跳转页面在网站根目录新增一个文件夹，命名为 go，并在 go 文件夹下新增一个 index.php，内容如下：(一共 6 个模板，可以在 https://files.ryanjie.vercel.app/go 页面预览)\n模板 1预览页面：预览\n&lt;!-- https:&#x2F;&#x2F;zhang.ge&#x2F;5086.html --&gt;\n&lt;?php\nif (\n    strlen($_SERVER[&#39;REQUEST_URI&#39;]) &gt; 384 ||\n    strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;eval(&quot;) ||\n    strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;base64&quot;)\n) &#123;\n    @header(&quot;HTTP&#x2F;1.1 414 Request-URI Too Long&quot;);\n    @header(&quot;Status: 414 Request-URI Too Long&quot;);\n    @header(&quot;Connection: Close&quot;);\n    @exit;\n&#125;\n&#x2F;&#x2F;通过QUERY_STRING取得完整的传入数据，然后取得url&#x3D;之后的所有值，兼容性更好\n$t_url &#x3D; preg_replace(&#39;&#x2F;^url&#x3D;(.*)$&#x2F;i&#39;, &#39;$1&#39;, $_SERVER[&quot;QUERY_STRING&quot;]);\n\n&#x2F;&#x2F;数据处理\nif (!empty($t_url)) &#123;\n    &#x2F;&#x2F;判断取值是否加密\n    if ($t_url &#x3D;&#x3D; base64_encode(base64_decode($t_url))) &#123;\n        $t_url &#x3D;  base64_decode($t_url);\n    &#125;\n    &#x2F;&#x2F;对取值进行网址校验和判断\n    preg_match(&#39;&#x2F;^(http|https|thunder|qqdl|ed2k|Flashget|qbrowser):\\&#x2F;\\&#x2F;&#x2F;i&#39;, $t_url, $matches);\n    if ($matches) &#123;\n        $url &#x3D; $t_url;\n        $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n    &#125; else &#123;\n        preg_match(&#39;&#x2F;\\.&#x2F;i&#39;, $t_url, $matche);\n        if ($matche) &#123;\n            $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $t_url;\n            $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n        &#125; else &#123;\n            $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n            $title &#x3D; &#39;参数错误，正在返回首页...&#39;;\n        &#125;\n    &#125;\n&#125; else &#123;\n    $title &#x3D; &#39;参数缺失，正在返回首页...&#39;;\n    $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n&#125;\n?&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;noindex, nofollow&quot; &#x2F;&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;link rel&#x3D;&quot;shortcut icon&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;favicon.ico&quot;&gt;\n    &lt;noscript&gt;\n        &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;1;url&#x3D;&#39;&lt;?php echo $url; ?&gt;&#39;;&quot;&gt;&lt;&#x2F;noscript&gt;\n    &lt;script&gt;\n        function link_jump() &#123;\n            &#x2F;&#x2F;禁止其他网站使用我们的跳转页面\n            var MyHOST &#x3D; new RegExp(&quot;&lt;?php echo $_SERVER[&#39;HTTP_HOST&#39;]; ?&gt;&quot;);\n            if (!MyHOST.test(document.referrer)) &#123;\n                location.href &#x3D; &quot;http:&#x2F;&#x2F;&quot; + MyHOST;\n            &#125;\n            location.href &#x3D; &quot;&lt;?php echo $url; ?&gt;&quot;;\n        &#125;\n        &#x2F;&#x2F;延时0.5S跳转，可自行修改延时时间\n        setTimeout(link_jump, 500);\n        &#x2F;&#x2F;延时50S关闭跳转页面，用于文件下载后不会关闭跳转页的问题\n        setTimeout(function() &#123;\n            window.opener &#x3D; null;\n            window.close();\n        &#125;, 50000);\n    &lt;&#x2F;script&gt;\n    &lt;title&gt;&lt;?php echo $title; ?&gt;&lt;&#x2F;title&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;a, abbr, acronym, address, applet, article, aside, audio, b, big, blockquote, body, canvas, caption, center, cite, code, dd, del, details, dfn, div, dl, dt, em, embed, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hgroup, html, i, iframe, img, ins, kbd, label, legend, li, mark, menu, nav, object, ol, output, p, pre, q, ruby, s, samp, section, small, span, strike, strong, sub, summary, sup, table, tbody, td, tfoot, th, thead, time, tr, tt, u, ul, var, video &#123; margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline &#125; body &#123; background: #3498db &#125; #loader-container &#123; width: 188px; height: 188px; color: #fff; margin: 0 auto; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%); border: 5px solid #3498db; border-radius: 50%; -webkit-animation: borderScale 1s infinite ease-in-out; animation: borderScale 1s infinite ease-in-out &#125; #loadingText &#123; font-family: &quot;Microsoft YaHei&quot;, Helvetica, Arial, Lucida Grande, Tahoma, sans-serif, Raleway, sans-serif; font-size: 1.4em; position: absolute; top: 50%; left: 50%; margin-right: -50%; transform: translate(-50%, -50%) &#125; @-webkit-keyframes borderScale &#123; 0% &#123; border: 5px solid #fff &#125; 50% &#123; border: 25px solid #3498db &#125; 100% &#123; border: 5px solid #fff &#125; &#125; @keyframes borderScale &#123; 0% &#123; border: 5px solid #fff &#125; 50% &#123; border: 25px solid #3498db &#125; 100% &#123; border: 5px solid #fff &#125; &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n\n  &lt;body&gt;\n    &lt;div id&#x3D;&quot;loader-container&quot;&gt;\n      &lt;p id&#x3D;&quot;loadingText&quot;&gt;页面加载中...&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n模板 2预览页面：预览\n&lt;?php\nif (\n    strlen($_SERVER[&#39;REQUEST_URI&#39;]) &gt; 384 ||\n    strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;eval(&quot;) ||\n    strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;base64&quot;)\n) &#123;\n    @header(&quot;HTTP&#x2F;1.1 414 Request-URI Too Long&quot;);\n    @header(&quot;Status: 414 Request-URI Too Long&quot;);\n    @header(&quot;Connection: Close&quot;);\n    @exit;\n&#125;\n&#x2F;&#x2F;通过QUERY_STRING取得完整的传入数据，然后取得url&#x3D;之后的所有值，兼容性更好\n$t_url &#x3D; preg_replace(&#39;&#x2F;^url&#x3D;(.*)$&#x2F;i&#39;, &#39;$1&#39;, $_SERVER[&quot;QUERY_STRING&quot;]);\n\n&#x2F;&#x2F;数据处理\nif (!empty($t_url)) &#123;\n    &#x2F;&#x2F;判断取值是否加密\n    if ($t_url &#x3D;&#x3D; base64_encode(base64_decode($t_url))) &#123;\n        $t_url &#x3D;  base64_decode($t_url);\n    &#125;\n    &#x2F;&#x2F;对取值进行网址校验和判断\n    preg_match(&#39;&#x2F;^(http|https|thunder|qqdl|ed2k|Flashget|qbrowser):\\&#x2F;\\&#x2F;&#x2F;i&#39;, $t_url, $matches);\n    if ($matches) &#123;\n        $url &#x3D; $t_url;\n        $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n    &#125; else &#123;\n        preg_match(&#39;&#x2F;\\.&#x2F;i&#39;, $t_url, $matche);\n        if ($matche) &#123;\n            $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $t_url;\n            $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n        &#125; else &#123;\n            $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n            $title &#x3D; &#39;参数错误，正在返回首页...&#39;;\n        &#125;\n    &#125;\n&#125; else &#123;\n    $title &#x3D; &#39;参数缺失，正在返回首页...&#39;;\n    $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n&#125;\n?&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;noindex, nofollow&quot; &#x2F;&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;link rel&#x3D;&quot;shortcut icon&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;favicon.ico&quot;&gt;\n    &lt;noscript&gt;\n        &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;1;url&#x3D;&#39;&lt;?php echo $url; ?&gt;&#39;;&quot;&gt;&lt;&#x2F;noscript&gt;\n    &lt;script&gt;\n        function link_jump() &#123;\n            &#x2F;&#x2F;禁止其他网站使用我们的跳转页面\n            var MyHOST &#x3D; new RegExp(&quot;&lt;?php echo $_SERVER[&#39;HTTP_HOST&#39;]; ?&gt;&quot;);\n            if (!MyHOST.test(document.referrer)) &#123;\n                location.href &#x3D; &quot;http:&#x2F;&#x2F;&quot; + MyHOST;\n            &#125;\n            location.href &#x3D; &quot;&lt;?php echo $url; ?&gt;&quot;;\n        &#125;\n        &#x2F;&#x2F;延时0.5S跳转，可自行修改延时时间\n        setTimeout(link_jump, 500);\n        &#x2F;&#x2F;延时50S关闭跳转页面，用于文件下载后不会关闭跳转页的问题\n        setTimeout(function() &#123;\n            window.opener &#x3D; null;\n            window.close();\n        &#125;, 50000);\n    &lt;&#x2F;script&gt;\n    &lt;title&gt;&lt;?php echo $title; ?&gt;&lt;&#x2F;title&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;body &#123; background: #555 &#125; .loading &#123; -webkit-animation: fadein 2s; -moz-animation: fadein 2s; -o-animation: fadein 2s; animation: fadein 2s &#125; @-moz-keyframes fadein &#123; from &#123; opacity: 0 &#125; to &#123; opacity: 1 &#125; &#125; @-webkit-keyframes fadein &#123; from &#123; opacity: 0 &#125; to &#123; opacity: 1 &#125; &#125; @-o-keyframes fadein &#123; from &#123; opacity: 0 &#125; to &#123; opacity: 1 &#125; &#125; @keyframes fadein &#123; from &#123; opacity: 0 &#125; to &#123; opacity: 1 &#125; &#125; .spinner-wrapper &#123; position: absolute; top: 0; left: 0; z-index: 300; height: 100%; min-width: 100%; min-height: 100%; background: rgba(255, 255, 255, 0.93) &#125; .spinner-text &#123; position: absolute; top: 45%; left: 50%; margin-left: -100px; margin-top: 2px; color: #000; letter-spacing: 1px; font-size: 20px; font-family: Arial &#125; .spinner &#123; position: absolute; top: 45%; left: 50%; display: block; margin-left: -160px; width: 1px; height: 1px; border: 20px solid rgba(255, 0, 0, 1); -webkit-border-radius: 50px; -moz-border-radius: 50px; border-radius: 50px; border-left-color: transparent; border-right-color: transparent; -webkit-animation: spin 1.5s infinite; -moz-animation: spin 1.5s infinite; animation: spin 1.5s infinite &#125; @-webkit-keyframes spin &#123; 0%, 100% &#123; -webkit-transform: rotate(0deg) scale(1) &#125; 50% &#123; -webkit-transform: rotate(720deg) scale(0.6) &#125; &#125; @-moz-keyframes spin &#123; 0%, 100% &#123; -moz-transform: rotate(0deg) scale(1) &#125; 50% &#123; -moz-transform: rotate(720deg) scale(0.6) &#125; &#125; @-o-keyframes spin &#123; 0%, 100% &#123; -o-transform: rotate(0deg) scale(1) &#125; 50% &#123; -o-transform: rotate(720deg) scale(0.6) &#125; &#125; @keyframes spin &#123; 0%, 100% &#123; transform: rotate(0deg) scale(1) &#125; 50% &#123; transform: rotate(720deg) scale(0.6) &#125; &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;loading&quot;&gt;\n      &lt;div class&#x3D;&quot;spinner-wrapper&quot;&gt;\n        &lt;span class&#x3D;&quot;spinner-text&quot;&gt;页面加载中，请稍候...&lt;&#x2F;span&gt;\n        &lt;span class&#x3D;&quot;spinner&quot;&gt;&lt;&#x2F;span&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n模板 3预览页面：预览\n    &lt;?php\n    if (\n        strlen($_SERVER[&#39;REQUEST_URI&#39;]) &gt; 384 ||\n        strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;eval(&quot;) ||\n        strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;base64&quot;)\n    ) &#123;\n        @header(&quot;HTTP&#x2F;1.1 414 Request-URI Too Long&quot;);\n        @header(&quot;Status: 414 Request-URI Too Long&quot;);\n        @header(&quot;Connection: Close&quot;);\n        @exit;\n    &#125;\n    &#x2F;&#x2F;通过QUERY_STRING取得完整的传入数据，然后取得url&#x3D;之后的所有值，兼容性更好\n    $t_url &#x3D; preg_replace(&#39;&#x2F;^url&#x3D;(.*)$&#x2F;i&#39;, &#39;$1&#39;, $_SERVER[&quot;QUERY_STRING&quot;]);\n\n    &#x2F;&#x2F;数据处理\n    if (!empty($t_url)) &#123;\n        &#x2F;&#x2F;判断取值是否加密\n        if ($t_url &#x3D;&#x3D; base64_encode(base64_decode($t_url))) &#123;\n            $t_url &#x3D;  base64_decode($t_url);\n        &#125;\n        &#x2F;&#x2F;对取值进行网址校验和判断\n        preg_match(&#39;&#x2F;^(http|https|thunder|qqdl|ed2k|Flashget|qbrowser):\\&#x2F;\\&#x2F;&#x2F;i&#39;, $t_url, $matches);\n        if ($matches) &#123;\n            $url &#x3D; $t_url;\n            $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n        &#125; else &#123;\n            preg_match(&#39;&#x2F;\\.&#x2F;i&#39;, $t_url, $matche);\n            if ($matche) &#123;\n                $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $t_url;\n                $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n            &#125; else &#123;\n                $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n                $title &#x3D; &#39;参数错误，正在返回首页...&#39;;\n            &#125;\n        &#125;\n    &#125; else &#123;\n        $title &#x3D; &#39;参数缺失，正在返回首页...&#39;;\n        $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n    &#125;\n    ?&gt;\n    &lt;html&gt;\n\n    &lt;head&gt;\n        &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;\n        &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;noindex, nofollow&quot; &#x2F;&gt;\n        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n        &lt;link rel&#x3D;&quot;shortcut icon&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;favicon.ico&quot;&gt;\n        &lt;noscript&gt;\n            &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;1;url&#x3D;&#39;&lt;?php echo $url; ?&gt;&#39;;&quot;&gt;&lt;&#x2F;noscript&gt;\n        &lt;script&gt;\n            function link_jump() &#123;\n                &#x2F;&#x2F;禁止其他网站使用我们的跳转页面\n                var MyHOST &#x3D; new RegExp(&quot;&lt;?php echo $_SERVER[&#39;HTTP_HOST&#39;]; ?&gt;&quot;);\n                if (!MyHOST.test(document.referrer)) &#123;\n                    location.href &#x3D; &quot;http:&#x2F;&#x2F;&quot; + MyHOST;\n                &#125;\n                location.href &#x3D; &quot;&lt;?php echo $url; ?&gt;&quot;;\n            &#125;\n            &#x2F;&#x2F;延时0.5S跳转，可自行修改延时时间\n            setTimeout(link_jump, 500);\n            &#x2F;&#x2F;延时50S关闭跳转页面，用于文件下载后不会关闭跳转页的问题\n            setTimeout(function() &#123;\n                window.opener &#x3D; null;\n                window.close();\n            &#125;, 50000);\n        &lt;&#x2F;script&gt;\n        &lt;title&gt;&lt;?php echo $title; ?&gt;&lt;&#x2F;title&gt;\n        &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;a &#123; background: #13a3a5; padding: 5px; margin: 10px; display: block; cursor: pointer; font-size: 1.5em; float: left; text-decoration: none; font-size: 18px; color: #fff &#125; a, body &#123; font-weight: 100 &#125; body &#123; -webkit-tap-highlight-color: transparent; background-color: #222428; font-size: 100%; font-family: Open Sans; height: 100% &#125; .loader &#123; top: 50%; left: 50%; -webkit-transform: translate(-50%, -50%); -mos-transform: translate(-50%, -50%); transform: translate(-50%, -50%); text-align: center; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; cursor: default; width: 80%; overflow: visible &#125; .loader, .loader div &#123; position: absolute; height: 36px &#125; .loader div &#123; width: 30px; margin: 0 10px; opacity: 0; animation: move 2s linear infinite; -o-animation: move 2s linear infinite; -moz-animation: move 2s linear infinite; -webkit-animation: move 2s linear infinite; transform: rotate(180deg); -o-transform: rotate(180deg); -moz-transform: rotate(180deg); -webkit-transform: rotate(180deg); color: #fff; font-size: 3em &#125; .loader div:nth-child(8):before &#123; background: #db2f00 &#125; .loader div:nth-child(8):before, .loader div:nth-child(9):before &#123; content: &#39;&#39;; position: absolute; bottom: -15px; left: 0; width: 30px; height: 30px; border-radius: 100% &#125; .loader div:nth-child(9):before &#123; background: #f2f2f2 &#125; .loader div:nth-child(10):before &#123; bottom: -15px; height: 30px; background: #13a3a5 &#125; .loader div:after, .loader div:nth-child(10):before &#123; content: &#39;&#39;; position: absolute; left: 0; width: 30px; border-radius: 100% &#125; .loader div:after &#123; bottom: -40px; height: 5px; background: #39312d &#125; .loader div:nth-child(2) &#123; animation-delay: .2s; -o-animation-delay: .2s; -moz-animation-delay: .2s; -webkit-animation-delay: .2s &#125; .loader div:nth-child(3) &#123; animation-delay: .4s; -o-animation-delay: .4s; -webkit-animation-delay: .4s &#125; .loader div:nth-child(4) &#123; animation-delay: .6s; -o-animation-delay: .6s; -moz-animation-delay: .6s; -webkit-animation-delay: .6s &#125; .loader div:nth-child(5) &#123; animation-delay: .8s; -o-animation-delay: .8s; -moz-animation-delay: .8s; -webkit-animation-delay: .8s &#125; .loader div:nth-child(6) &#123; animation-delay: 1s; -o-animation-delay: 1s; -moz-animation-delay: 1s; -webkit-animation-delay: 1s &#125; .loader div:nth-child(7) &#123; animation-delay: 1.2s; -o-animation-delay: 1.2s; -moz-animation-delay: 1.2s; -webkit-animation-delay: 1.2s &#125; .loader div:nth-child(8) &#123; animation-delay: 1.4s; -o-animation-delay: 1.4s; -moz-animation-delay: 1.4s; -webkit-animation-delay: 1.4s &#125; .loader div:nth-child(9) &#123; animation-delay: 1.6s; -o-animation-delay: 1.6s; -moz-animation-delay: 1.6s; -webkit-animation-delay: 1.6s &#125; .loader div:nth-child(10) &#123; animation-delay: 1.8s; -o-animation-delay: 1.8s; -moz-animation-delay: 1.8s; -webkit-animation-delay: 1.8s &#125; @keyframes move &#123; 0% &#123; right: 0; opacity: 0 &#125; 35% &#123; right: 41% &#125; 35%, 65% &#123; -webkit-transform: rotate(0); transform: rotate(0); opacity: 1 &#125; 65% &#123; right: 59% &#125; to &#123; right: 100%; -webkit-transform: rotate(-180deg); transform: rotate(-180deg) &#125; &#125; @-webkit-keyframes move &#123; 0%, to &#123; opacity: 0 &#125; 0% &#123; right: 0 &#125; 35% &#123; right: 41% &#125; 35%, 75% &#123; -webkit-transform: rotate(0); transform: rotate(0); opacity: 1 &#125; 75% &#123; right: 59% &#125; to &#123; right: 100%; -webkit-transform: rotate(-180deg); transform: rotate(-180deg); opacity: 0 &#125; &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n\n  &lt;body class&#x3D;&quot;ie8&quot; style&#x3D;&quot;&quot;&gt;\n    &lt;div class&#x3D;&quot;loader&quot;&gt;\n      &lt;div&gt;L&lt;&#x2F;div&gt;\n      &lt;div&gt;O&lt;&#x2F;div&gt;\n      &lt;div&gt;A&lt;&#x2F;div&gt;\n      &lt;div&gt;D&lt;&#x2F;div&gt;\n      &lt;div&gt;I&lt;&#x2F;div&gt;\n      &lt;div&gt;N&lt;&#x2F;div&gt;\n      &lt;div&gt;G&lt;&#x2F;div&gt;\n      &lt;div&gt;&lt;&#x2F;div&gt;\n      &lt;div&gt;&lt;&#x2F;div&gt;\n      &lt;div&gt;&lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n模板 4预览页面：预览\n    &lt;?php\n    if (\n        strlen($_SERVER[&#39;REQUEST_URI&#39;]) &gt; 384 ||\n        strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;eval(&quot;) ||\n        strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;base64&quot;)\n    ) &#123;\n        @header(&quot;HTTP&#x2F;1.1 414 Request-URI Too Long&quot;);\n        @header(&quot;Status: 414 Request-URI Too Long&quot;);\n        @header(&quot;Connection: Close&quot;);\n        @exit;\n    &#125;\n    &#x2F;&#x2F;通过QUERY_STRING取得完整的传入数据，然后取得url&#x3D;之后的所有值，兼容性更好\n    $t_url &#x3D; preg_replace(&#39;&#x2F;^url&#x3D;(.*)$&#x2F;i&#39;, &#39;$1&#39;, $_SERVER[&quot;QUERY_STRING&quot;]);\n\n    &#x2F;&#x2F;数据处理\n    if (!empty($t_url)) &#123;\n        &#x2F;&#x2F;判断取值是否加密\n        if ($t_url &#x3D;&#x3D; base64_encode(base64_decode($t_url))) &#123;\n            $t_url &#x3D;  base64_decode($t_url);\n        &#125;\n        &#x2F;&#x2F;对取值进行网址校验和判断\n        preg_match(&#39;&#x2F;^(http|https|thunder|qqdl|ed2k|Flashget|qbrowser):\\&#x2F;\\&#x2F;&#x2F;i&#39;, $t_url, $matches);\n        if ($matches) &#123;\n            $url &#x3D; $t_url;\n            $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n        &#125; else &#123;\n            preg_match(&#39;&#x2F;\\.&#x2F;i&#39;, $t_url, $matche);\n            if ($matche) &#123;\n                $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $t_url;\n                $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n            &#125; else &#123;\n                $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n                $title &#x3D; &#39;参数错误，正在返回首页...&#39;;\n            &#125;\n        &#125;\n    &#125; else &#123;\n        $title &#x3D; &#39;参数缺失，正在返回首页...&#39;;\n        $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n    &#125;\n    ?&gt;\n    &lt;html&gt;\n\n    &lt;head&gt;\n        &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;\n        &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;noindex, nofollow&quot; &#x2F;&gt;\n        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n        &lt;link rel&#x3D;&quot;shortcut icon&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;favicon.ico&quot;&gt;\n        &lt;noscript&gt;\n            &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;1;url&#x3D;&#39;&lt;?php echo $url; ?&gt;&#39;;&quot;&gt;&lt;&#x2F;noscript&gt;\n        &lt;script&gt;\n            function link_jump() &#123;\n                &#x2F;&#x2F;禁止其他网站使用我们的跳转页面\n                var MyHOST &#x3D; new RegExp(&quot;&lt;?php echo $_SERVER[&#39;HTTP_HOST&#39;]; ?&gt;&quot;);\n                if (!MyHOST.test(document.referrer)) &#123;\n                    location.href &#x3D; &quot;http:&#x2F;&#x2F;&quot; + MyHOST;\n                &#125;\n                location.href &#x3D; &quot;&lt;?php echo $url; ?&gt;&quot;;\n            &#125;\n            &#x2F;&#x2F;延时0.5S跳转，可自行修改延时时间\n            setTimeout(link_jump, 500);\n            &#x2F;&#x2F;延时50S关闭跳转页面，用于文件下载后不会关闭跳转页的问题\n            setTimeout(function() &#123;\n                window.opener &#x3D; null;\n                window.close();\n            &#125;, 50000);\n        &lt;&#x2F;script&gt;\n        &lt;title&gt;&lt;?php echo $title; ?&gt;&lt;&#x2F;title&gt;\n        &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;* &#123; margin: 0; padding: 0; border: 0 &#125; body, html &#123; min-height: 100% &#125; body &#123; background: radial-gradient(#eee, #444) &#125; .loader &#123; position: absolute; top: 0; bottom: 0; left: 0; right: 0; margin: auto; width: 175px; height: 100px &#125; .loader span &#123; display: block; background: #ccc; width: 7px; height: 10%; border-radius: 14px; margin-right: 5px; float: left; margin-top: 25% &#125; .loader span:last-child &#123; margin-right: 0 &#125; .loader span:nth-child(1) &#123; animation: load 2.5s 1.4s infinite linear &#125; .loader span:nth-child(2) &#123; animation: load 2.5s 1.2s infinite linear &#125; .loader span:nth-child(3) &#123; animation: load 2.5s 1s infinite linear &#125; .loader span:nth-child(4) &#123; animation: load 2.5s .8s infinite linear &#125; .loader span:nth-child(5) &#123; animation: load 2.5s .6s infinite linear &#125; .loader span:nth-child(6) &#123; animation: load 2.5s .4s infinite linear &#125; .loader span:nth-child(7) &#123; animation: load 2.5s .2s infinite linear &#125; .loader span:nth-child(8) &#123; animation: load 2.5s 0s infinite linear &#125; .loader span:nth-child(9) &#123; animation: load 2.5s .2s infinite linear &#125; .loader span:nth-child(10) &#123; animation: load 2.5s .4s infinite linear &#125; .loader span:nth-child(11) &#123; animation: load 2.5s .6s infinite linear &#125; .loader span:nth-child(12) &#123; animation: load 2.5s .8s infinite linear &#125; .loader span:nth-child(13) &#123; animation: load 2.5s 1s infinite linear &#125; .loader span:nth-child(14) &#123; animation: load 2.5s 1.2s infinite linear &#125; .loader span:nth-child(15) &#123; animation: load 2.5s 1.4s infinite linear &#125; @keyframes load &#123; 0% &#123; background: #ccc; margin-top: 25%; height: 10% &#125; 50% &#123; background: #444; height: 100%; margin-top: 0 &#125; 100% &#123; background: #ccc; height: 10%; margin-top: 25% &#125; &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;loader&quot;&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;span&gt;&lt;&#x2F;span&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n模板 5预览页面：预览\n&lt;?php\nif (\n    strlen($_SERVER[&#39;REQUEST_URI&#39;]) &gt; 384 ||\n    strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;eval(&quot;) ||\n    strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;base64&quot;)\n) &#123;\n    @header(&quot;HTTP&#x2F;1.1 414 Request-URI Too Long&quot;);\n    @header(&quot;Status: 414 Request-URI Too Long&quot;);\n    @header(&quot;Connection: Close&quot;);\n    @exit;\n&#125;\n&#x2F;&#x2F;通过QUERY_STRING取得完整的传入数据，然后取得url&#x3D;之后的所有值，兼容性更好\n$t_url &#x3D; preg_replace(&#39;&#x2F;^url&#x3D;(.*)$&#x2F;i&#39;, &#39;$1&#39;, $_SERVER[&quot;QUERY_STRING&quot;]);\n\n&#x2F;&#x2F;数据处理\nif (!empty($t_url)) &#123;\n    &#x2F;&#x2F;判断取值是否加密\n    if ($t_url &#x3D;&#x3D; base64_encode(base64_decode($t_url))) &#123;\n        $t_url &#x3D;  base64_decode($t_url);\n    &#125;\n    &#x2F;&#x2F;对取值进行网址校验和判断\n    preg_match(&#39;&#x2F;^(http|https|thunder|qqdl|ed2k|Flashget|qbrowser):\\&#x2F;\\&#x2F;&#x2F;i&#39;, $t_url, $matches);\n    if ($matches) &#123;\n        $url &#x3D; $t_url;\n        $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n    &#125; else &#123;\n        preg_match(&#39;&#x2F;\\.&#x2F;i&#39;, $t_url, $matche);\n        if ($matche) &#123;\n            $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $t_url;\n            $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n        &#125; else &#123;\n            $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n            $title &#x3D; &#39;参数错误，正在返回首页...&#39;;\n        &#125;\n    &#125;\n&#125; else &#123;\n    $title &#x3D; &#39;参数缺失，正在返回首页...&#39;;\n    $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n&#125;\n?&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;noindex, nofollow&quot; &#x2F;&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;link rel&#x3D;&quot;shortcut icon&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;favicon.ico&quot;&gt;\n    &lt;noscript&gt;\n        &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;1;url&#x3D;&#39;&lt;?php echo $url; ?&gt;&#39;;&quot;&gt;&lt;&#x2F;noscript&gt;\n    &lt;script&gt;\n        function link_jump() &#123;\n            &#x2F;&#x2F;禁止其他网站使用我们的跳转页面\n            var MyHOST &#x3D; new RegExp(&quot;&lt;?php echo $_SERVER[&#39;HTTP_HOST&#39;]; ?&gt;&quot;);\n            if (!MyHOST.test(document.referrer)) &#123;\n                location.href &#x3D; &quot;http:&#x2F;&#x2F;&quot; + MyHOST;\n            &#125;\n            location.href &#x3D; &quot;&lt;?php echo $url; ?&gt;&quot;;\n        &#125;\n        &#x2F;&#x2F;延时0.5S跳转，可自行修改延时时间\n        setTimeout(link_jump, 500);\n        &#x2F;&#x2F;延时50S关闭跳转页面，用于文件下载后不会关闭跳转页的问题\n        setTimeout(function() &#123;\n            window.opener &#x3D; null;\n            window.close();\n        &#125;, 50000);\n    &lt;&#x2F;script&gt;\n    &lt;title&gt;&lt;?php echo $title; ?&gt;&lt;&#x2F;title&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;html &#123; overflow: hidden &#125; html, html body &#123; height: 100%; min-height: 100% &#125; html body &#123; background: #222428; background-size: 163px; font: 14px&#x2F;21px Monaco, sans-serif; color: #999; font-smoothing: antialiased; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; text-size-adjust: 100% &#125; html body a, html body a:visited &#123; text-decoration: none; color: #ff805f &#125; html body h4 &#123; margin: 0; color: #666 &#125; .scene &#123; width: 100%; height: 100%; -webkit-perspective: 600; perspective: 600; display: flex; align-items: center; justify-content: center &#125; .scene svg &#123; width: 15pc; height: 15pc &#125; .dc-logo &#123; position: fixed; right: 10px; bottom: 10px &#125; .dc-logo:hover svg &#123; -webkit-transform-origin: 50% 50%; transform-origin: 50% 50%; -webkit-animation: arrow-spin 2.5s 0s cubic-bezier(0.165, 0.84, 0.44, 1) infinite; animation: arrow-spin 2.5s 0s cubic-bezier(0.165, 0.84, 0.44, 1) infinite &#125; .dc-logo:hover:hover:before &#123; content: &#39;\\2764&#39;; color: #00fffe; left: -70px &#125; .dc-logo:hover:hover:after, .dc-logo:hover:hover:before &#123; padding: 6px; font: 10px&#x2F;1 Monaco, sans-serif; font-size: 10px; text-transform: uppercase; position: absolute; top: -30px; white-space: nowrap; z-index: 20px; box-shadow: 0 0 4px #222; background: rgba(0, 0, 0, .4) &#125; .dc-logo:hover:hover:after &#123; content: &#39;Digital Craft&#39;; color: #6e6f71; right: 0; background-image: none &#125; @keyframes arrow-spin &#123; 50% &#123; -webkit-transform: rotateY(360deg); transform: rotateY(360deg) &#125; &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;scene&quot;&gt;\n      &lt;svg version&#x3D;&quot;1.1&quot; id&#x3D;&quot;dc-spinner&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; x&#x3D;&quot;0px&quot; y&#x3D;&quot;0px&quot; width: &quot;38&quot; height: &quot;38&quot; viewbox&#x3D;&quot;0 0 38 38&quot; preserveaspectratio&#x3D;&quot;xMinYMin meet&quot;&gt;\n        &lt;text x&#x3D;&quot;14&quot; y&#x3D;&quot;21&quot; font-family&#x3D;&quot;Monaco&quot; font-size&#x3D;&quot;2px&quot; style&#x3D;&quot;letter-spacing:0.6&quot; fill&#x3D;&quot;grey&quot;&gt;LOADING\n          &lt;animate attributename&#x3D;&quot;opacity&quot; values&#x3D;&quot;0;1;0&quot; dur&#x3D;&quot;1.8s&quot; repeatcount&#x3D;&quot;indefinite&quot; &#x2F;&gt;&lt;&#x2F;text&gt;\n        &lt;path fill&#x3D;&quot;#373a42&quot; d&#x3D;&quot;M20,35c-8.271,0-15-6.729-15-15S11.729,5,20,5s15,6.729,15,15S28.271,35,20,35z M20,5.203 C11.841,5.203,5.203,11.841,5.203,20c0,8.159,6.638,14.797,14.797,14.797S34.797,28.159,34.797,20 C34.797,11.841,28.159,5.203,20,5.203z&quot;&gt;&lt;&#x2F;path&gt;\n        &lt;path fill&#x3D;&quot;#373a42&quot; d&#x3D;&quot;M20,33.125c-7.237,0-13.125-5.888-13.125-13.125S12.763,6.875,20,6.875S33.125,12.763,33.125,20 S27.237,33.125,20,33.125z M20,7.078C12.875,7.078,7.078,12.875,7.078,20c0,7.125,5.797,12.922,12.922,12.922 S32.922,27.125,32.922,20C32.922,12.875,27.125,7.078,20,7.078z&quot;&gt;&lt;&#x2F;path&gt;\n        &lt;path fill&#x3D;&quot;#2AA198&quot; stroke&#x3D;&quot;#2AA198&quot; stroke-width&#x3D;&quot;0.6027&quot; stroke-miterlimit&#x3D;&quot;10&quot; d&#x3D;&quot;M5.203,20 c0-8.159,6.638-14.797,14.797-14.797V5C11.729,5,5,11.729,5,20s6.729,15,15,15v-0.203C11.841,34.797,5.203,28.159,5.203,20z&quot;&gt;\n          &lt;animatetransform attributename&#x3D;&quot;transform&quot; type&#x3D;&quot;rotate&quot; from&#x3D;&quot;0 20 20&quot; to&#x3D;&quot;360 20 20&quot; calcmode&#x3D;&quot;spline&quot; keysplines&#x3D;&quot;0.4, 0, 0.2, 1&quot; keytimes&#x3D;&quot;0;1&quot; dur&#x3D;&quot;2s&quot; repeatcount&#x3D;&quot;indefinite&quot; &#x2F;&gt;&lt;&#x2F;path&gt;\n        &lt;path fill&#x3D;&quot;#859900&quot; stroke&#x3D;&quot;#859900&quot; stroke-width&#x3D;&quot;0.2027&quot; stroke-miterlimit&#x3D;&quot;10&quot; d&#x3D;&quot;M7.078,20 c0-7.125,5.797-12.922,12.922-12.922V6.875C12.763,6.875,6.875,12.763,6.875,20S12.763,33.125,20,33.125v-0.203 C12.875,32.922,7.078,27.125,7.078,20z&quot;&gt;\n          &lt;animatetransform attributename&#x3D;&quot;transform&quot; type&#x3D;&quot;rotate&quot; from&#x3D;&quot;0 20 20&quot; to&#x3D;&quot;360 20 20&quot; dur&#x3D;&quot;1.8s&quot; repeatcount&#x3D;&quot;indefinite&quot; &#x2F;&gt;&lt;&#x2F;path&gt;\n      &lt;&#x2F;svg&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n模板 6预览页面：预览\n&lt;?php\nif (\n    strlen($_SERVER[&#39;REQUEST_URI&#39;]) &gt; 384 ||\n    strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;eval(&quot;) ||\n    strpos($_SERVER[&#39;REQUEST_URI&#39;], &quot;base64&quot;)\n) &#123;\n    @header(&quot;HTTP&#x2F;1.1 414 Request-URI Too Long&quot;);\n    @header(&quot;Status: 414 Request-URI Too Long&quot;);\n    @header(&quot;Connection: Close&quot;);\n    @exit;\n&#125;\n&#x2F;&#x2F;通过QUERY_STRING取得完整的传入数据，然后取得url&#x3D;之后的所有值，兼容性更好\n$t_url &#x3D; preg_replace(&#39;&#x2F;^url&#x3D;(.*)$&#x2F;i&#39;, &#39;$1&#39;, $_SERVER[&quot;QUERY_STRING&quot;]);\n\n&#x2F;&#x2F;数据处理\nif (!empty($t_url)) &#123;\n    &#x2F;&#x2F;判断取值是否加密\n    if ($t_url &#x3D;&#x3D; base64_encode(base64_decode($t_url))) &#123;\n        $t_url &#x3D;  base64_decode($t_url);\n    &#125;\n    &#x2F;&#x2F;对取值进行网址校验和判断\n    preg_match(&#39;&#x2F;^(http|https|thunder|qqdl|ed2k|Flashget|qbrowser):\\&#x2F;\\&#x2F;&#x2F;i&#39;, $t_url, $matches);\n    if ($matches) &#123;\n        $url &#x3D; $t_url;\n        $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n    &#125; else &#123;\n        preg_match(&#39;&#x2F;\\.&#x2F;i&#39;, $t_url, $matche);\n        if ($matche) &#123;\n            $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $t_url;\n            $title &#x3D; &#39;页面加载中,请稍候...&#39;;\n        &#125; else &#123;\n            $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n            $title &#x3D; &#39;参数错误，正在返回首页...&#39;;\n        &#125;\n    &#125;\n&#125; else &#123;\n    $title &#x3D; &#39;参数缺失，正在返回首页...&#39;;\n    $url &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $_SERVER[&#39;HTTP_HOST&#39;];\n&#125;\n?&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;\n    &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;noindex, nofollow&quot; &#x2F;&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;link rel&#x3D;&quot;shortcut icon&quot; href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;favicon.ico&quot;&gt;\n    &lt;noscript&gt;\n        &lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;1;url&#x3D;&#39;&lt;?php echo $url; ?&gt;&#39;;&quot;&gt;&lt;&#x2F;noscript&gt;\n    &lt;script&gt;\n        function link_jump() &#123;\n            &#x2F;&#x2F;禁止其他网站使用我们的跳转页面\n            var MyHOST &#x3D; new RegExp(&quot;&lt;?php echo $_SERVER[&#39;HTTP_HOST&#39;]; ?&gt;&quot;);\n            if (!MyHOST.test(document.referrer)) &#123;\n                location.href &#x3D; &quot;http:&#x2F;&#x2F;&quot; + MyHOST;\n            &#125;\n            location.href &#x3D; &quot;&lt;?php echo $url; ?&gt;&quot;;\n        &#125;\n        &#x2F;&#x2F;延时0.5S跳转，可自行修改延时时间\n        setTimeout(link_jump, 500);\n        &#x2F;&#x2F;延时50S关闭跳转页面，用于文件下载后不会关闭跳转页的问题\n        setTimeout(function() &#123;\n            window.opener &#x3D; null;\n            window.close();\n        &#125;, 50000);\n    &lt;&#x2F;script&gt;\n    &lt;title&gt;&lt;?php echo $title; ?&gt;&lt;&#x2F;title&gt;\n    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;body &#123; margin: 0; height: 100vh; display: flex; align-items: center; justify-content: center; background: #222428 &#125; .container &#123; width: 8em; height: 1em; font-size: 35px; display: flex; justify-content: space-between &#125; .container span &#123; width: 1em; height: 1em; --duration: 1.5s &#125; .girl &#123; animation: slide var(--duration) ease-in-out infinite alternate &#125; @keyframes slide &#123; 0% &#123; transform: translateX(0); filter: brightness(1) &#125; to &#123; transform: translatex(6.75em); filter: brightness(1.45) &#125; &#125; .boys &#123; width: 6em; display: flex; justify-content: space-between &#125; .boys span &#123; animation: var(--duration) ease-in-out infinite alternate &#125; .boys span:nth-child(1) &#123; animation-name: jump-off-1 &#125; .boys span:nth-child(2) &#123; animation-name: jump-off-2 &#125; .boys span:nth-child(3) &#123; animation-name: jump-off-3 &#125; .boys span:nth-child(4) &#123; animation-name: jump-off-4 &#125; @keyframes jump-off-1 &#123; 0%, 15% &#123; transform: rotate(0deg) &#125; 35%, to &#123; transform-origin: -50% center; transform: rotate(-180deg) &#125; &#125; @keyframes jump-off-2 &#123; 0%, 30% &#123; transform: rotate(0deg) &#125; 50%, to &#123; transform-origin: -50% center; transform: rotate(-180deg) &#125; &#125; @keyframes jump-off-3 &#123; 0%, 45% &#123; transform: rotate(0deg) &#125; 65%, to &#123; transform-origin: -50% center; transform: rotate(-180deg) &#125; &#125; @keyframes jump-off-4 &#123; 0%, 60% &#123; transform: rotate(0deg) &#125; 80%, to &#123; transform-origin: -50% center; transform: rotate(-180deg) &#125; &#125; .container span:before &#123; content: &#39;&#39;; position: absolute; width: inherit; height: inherit; border-radius: 15%; box-shadow: 0 0 .1em rgba(0, 0, 0, .3) &#125; .girl:before &#123; background-color: hotpink &#125; .boys span:before &#123; background-color: #1e90ff; animation: var(--duration) ease-in-out infinite alternate &#125; .boys span:nth-child(1):before &#123; filter: brightness(1); animation-name: jump-down-1 &#125; .boys span:nth-child(2):before &#123; filter: brightness(1.15); animation-name: jump-down-2 &#125; .boys span:nth-child(3):before &#123; filter: brightness(1.3); animation-name: jump-down-3 &#125; .boys span:nth-child(4):before &#123; filter: brightness(1.45); animation-name: jump-down-4 &#125; @keyframes jump-down-1 &#123; 5% &#123; transform: scale(1, 1) &#125; 15% &#123; transform-origin: center bottom; transform: scale(1.3, 0.7) &#125; 20%, 25% &#123; transform-origin: center bottom; transform: scale(0.8, 1.4) &#125; 40% &#123; transform-origin: center top; transform: scale(1.3, 0.7) &#125; 55%, to &#123; transform: scale(1, 1) &#125; &#125; @keyframes jump-down-2 &#123; 20% &#123; transform: scale(1, 1) &#125; 30% &#123; transform-origin: center bottom; transform: scale(1.3, 0.7) &#125; 35%, 40% &#123; transform-origin: center bottom; transform: scale(0.8, 1.4) &#125; 55% &#123; transform-origin: center top; transform: scale(1.3, 0.7) &#125; 70%, to &#123; transform: scale(1, 1) &#125; &#125; @keyframes jump-down-3 &#123; 35% &#123; transform: scale(1, 1) &#125; 45% &#123; transform-origin: center bottom; transform: scale(1.3, 0.7) &#125; 50%, 55% &#123; transform-origin: center bottom; transform: scale(0.8, 1.4) &#125; 70% &#123; transform-origin: center top; transform: scale(1.3, 0.7) &#125; 85%, to &#123; transform: scale(1, 1) &#125; &#125; @keyframes jump-down-4 &#123; 50% &#123; transform: scale(1, 1) &#125; 60% &#123; transform-origin: center bottom; transform: scale(1.3, 0.7) &#125; 65%, 70% &#123; transform-origin: center bottom; transform: scale(0.8, 1.4) &#125; 85% &#123; transform-origin: center top; transform: scale(1.3, 0.7) &#125; to &#123; transform: scale(1, 1) &#125; &#125;\n    &lt;&#x2F;style&gt;\n  &lt;&#x2F;head&gt;\n\n  &lt;body&gt;\n    &lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;span class&#x3D;&quot;girl&quot;&gt;&lt;&#x2F;span&gt;\n      &lt;div class&#x3D;&quot;boys&quot;&gt;\n        &lt;span&gt;&lt;&#x2F;span&gt;\n        &lt;span&gt;&lt;&#x2F;span&gt;\n        &lt;span&gt;&lt;&#x2F;span&gt;\n        &lt;span&gt;&lt;&#x2F;span&gt;\n      &lt;&#x2F;div&gt;\n    &lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;\n\n新增 robots 规则为了防止搜索引擎抓取这种跳转链接，我们可以在 robots.txt 里面新增禁止抓取 /go 的规则：\nUser-agent: \\*\nDisallow:\nDisallow: &#x2F;wp-admin&#x2F;\nDisallow: &#x2F;go&#x2F;\nSitemap: https:&#x2F;&#x2F;www.baidu.com&#x2F;sitemap.xml\n\n设置伪静态Nginx伪静态规则：\n# 外链跳转伪静态 php版本\nrewrite ^&#x2F;go&#x2F;(.*)$ &#x2F;go.php?url&#x3D;$1 last; #注意go.php的实际路径，默认为网站根目录\n\n参考文章\n分享两种外链跳转方法，可避免权重流失\n分享一个 WordPress 外链跳转教程，兼容知更鸟暗箱下载和文章索引\n\n","slug":"2020-12-20-WordPress-外链转内链避免权重流失","date":"2020-12-19T18:08:26.000Z","categories_index":"WordPress","tags_index":"WordPress","author_index":"JaimeZeng"},{"id":"9d7117cb9623769990b3cb6113e1cf49","title":"免费组队领取堡塔企业级备份插件","content":"免费组队领取堡塔企业级备份插件，队伍人数需要满 5 人，满员后组队关闭且立即发放插件抵扣券。插件抵扣券查看地址\n\n插件介绍官方介绍：堡塔企业级备份\n活动地址\n活动地址：https://www.bt.cn/freegroup1\n队伍地址：https://www.bt.cn/freegroup1?group_id=ce146431\n\n\n\n\n\n\n\n\n\n\n队长送 3 年，队员送 1 年。如果你能在 24 小时之内找到 5 个人组队成功，那么可以单独组队，队长送 3 年插件抵扣券。插件抵扣券查看地址\n活动规则\n0 元组队，每个账号只允许成功组队 1 次，组队成功，立即发券，关闭队伍。\n组队成功，发放 Linux 面板堡塔企业级备份插件抵扣券，队长送 3 年，队员送 1 年，无论使用与否，到期自动失效。堡塔企业级备份仅限宝塔 Linux 面板最新版使用。\n队员或者队长身份一经确认，不允许更改。\n本活动旨在推广宝塔，分享给更多的人，所以分享链接不能在宝塔官方群及官方论坛宣传。\n严禁通过软件作弊组队，我们会监控注册 IP 等，作弊随时会被回收券及取消往后此类活动资格。\n活动有效期至 2021 年 1 月 30 日。\n活动最终解释权在法律范围内归堡塔所有。\n\n","slug":"2020-12-18-免费组队领取堡塔企业级备份插件","date":"2020-12-18T15:03:56.000Z","categories_index":"活动","tags_index":"活动,宝塔面板","author_index":"JaimeZeng"},{"id":"085ca9a0a7e76461327fa4a16d8a5f3f","title":"WordPress 启用 memcached 动态缓存","content":"\nWordPress 动态缓存加速方案：一种是基于 memcached 缓存动态内容，将数据库的数据缓存在内存中，下次需要的时候直接从内存中取数据，减少 MySQL 的访问次数，也加速了 WordPress 对网页的处理。这种方式直接从内存中存取数据，理论上比静态缓存的 IO 开销更小，但是由于 memcached 需要占用一定 php 资源，因此会对 CPU 带来一些额外的压力。\n另一种是基于 nginx 的 fastcgi 纯静态缓存，这是将所有的动态 HTML 页面都缓存到硬盘文件，nginx 针对 http 请求只处理静态内容，因此对服务器的开销很小，速度快。对于动态内容不多的站点，用这个方法能极大缓解 cpu 的负担，由 nginx 来高效地处理并发。\n安装 memcached 服务Memcached 是一个高性能的分布式内存对象缓存系统，用于动态 Web 应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态、数据库驱动网站的速度。\nmemcache or memcached\n\n\n\n\n\n\n\n\n\nphp memcache 拓展：http://cn2.php.net/manual/zh/book.memcache.php\nphp memcached 拓展：http://cn2.php.net/manual/zh/book.memcached.php\n\n对于 php 而言就是两个不同的客户端库，memcache 是基于 pecl 扩展库写的，memcache 是基于 libmemcached 扩展库写的，两个库其实都是一堆写好的 c 代码编译成的动态链接库， memcached 里面多了一些方法，里面还多支持了几个协议。目前通常建议直接使用后者。\nPS：如果想更深入了解，可以搜索下 memcache vs memcached\n安装 memcached\n\n\n\n\n\n\n\n\n这里的 memcached是 Mencached 的服务端 memcached，用来处理缓存数据。\nLNMP 环境进入 lnmp 解压后的目录，执行：./addons.sh install memcached\n\n输入对应的序号 2，回车，再次确认回车开始安装。\n\n\n\n\n\n\n\n\n\n卸载 memcached 执行：./addons.sh uninstall memcached\n宝塔面板在面板 - 软件商店 中搜索 mencached，选择软件名称为 Memcached 的安装即可。为了安全起见建议选择编译安装。\n\n安装完成后修改相关配置文件：\n#改为监听127.0.0.1，并关闭UDP连接方式，若为远程服务调用或不需要的话请跳过此行\nsed -i &#39;s&#x2F;OPTIONS&#x3D;&quot;&quot;&#x2F;OPTIONS&#x3D;&quot;-l 127.0.0.1 -U 0&quot;&#x2F;g&#39; &#x2F;etc&#x2F;init.d&#x2F;memcached\n\n#启动并设置开机服务\nchmod +x &#x2F;etc&#x2F;init.d&#x2F;memcached\nservice memcached start\nchkconfig --add memcached\nchkconfig memcached on\n\n然后在 PHP 管理中安装 memcached 扩展。\n\n校验安装检查一下 memcached 服务是否运行：\n$ systemctl status memcached\n● memcached.service - LSB: memcached - Memory caching daemon\n   Loaded: loaded (&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;memcached; bad; vendor preset: disabled)\n   Active: active (exited) since Sun 2020-12-08 21:02:18 CST; 5min ago\n\n检查 php-memcached 扩展是否加载，如果输出 memcached 则表示成功。\n$ php -m | grep memcached\nmemcached\n\n测试缓存如果能输出 100 表示 memcached 安装成功且正常运行。\ncat &gt; test.php &lt;&lt;-EOF\n&lt;?php\n\\$m &#x3D; new Memcached();\n\\$m-&gt;addServer( &#39;127.0.0.1&#39;, 11211 );\n\\$m-&gt;set( &#39;foo&#39;, 100 );\necho \\$m-&gt;get( &#39;foo&#39; ) . &quot;\\n&quot;;\nEOF\nphp -f test.php &amp;&amp; rm -f test.php\n\n安装 WordPress Memcached 插件安装插件\n访问 memcached-redux/trunk 页面下载 object-cache.php 上传到 wp-content 目录。\n\n在网站根目录下的 wp-config.php 页面找到下面代码：\n#英文站点\n&#x2F;* That&#39;s all, stop editing! Happy blogging. *&#x2F;\n#中文站点\n&#x2F;* 好了！请不要再继续编辑。请保存本文件。使用愉快！ *&#x2F;\n\n在该段代码上方添加 WP_CACHE_KEY_SALT 变量。\ndefine( &#39;WP_CACHE_KEY_SALT&#39;, &#39;...long random string...&#39; );\n#例如: 设置为域名\ndefine( &#39;WP_CACHE_KEY_SALT&#39;, &#39;www.zxj.guru&#39; );\n\n当一台服务器安装多个 WordPress 站点使用 Memcached 时，这有助于防止缓存数据冲突。 对于每个 WordPress 站点，该值必须唯一。\n\n\n\n\n\n\n\n\n\n\n\n如果发现页面可以打开，但是里面没有 Hits 数据，说明 WordPress 并没有成功连接到 memcached，我们需要手动指定 memcached 服务器：\n在网站根目录下的 wp-config.php 页面找到下面代码：\n#英文站点\n&#x2F;* That&#39;s all, stop editing! Happy blogging. *&#x2F;\n#中文站点\n&#x2F;* 好了！请不要再继续编辑。请保存本文件。使用愉快！ *&#x2F;\n\n在该段代码上方添加\n$memcached_servers &#x3D; array(\n    &#39;default&#39; &#x3D;&gt; array(\n     &#x2F;&#x2F; 这里定义的是memcached服务器，一般我们是单机部署，所以注释掉一行，并将memcached监听IP和端口根据实际修改，比如本文是127.0.0.1\n        &#x2F;&#x2F; &#39;&lt;memcached监听IP&gt;:&lt;端口&gt;&#39;,\n        &#39;127.0.0.1:11211&#39;\n    )\n);\n\n实际的 memcached 监听 IP 和端口，你可以通过如下命令查看：\n$ netstat -nutlp | grep memcache\ntcp        0      0 127.0.0.1:11211         0.0.0.0:*               LISTEN      3070&#x2F;memcached\n查看效果查看 Memcached 状态：在 WordPress 的仪表盘 → 工具 → Memcached 界面通过计算 cmd_get 和 get_hits 来计算命中率。\n图形化展示：\n\n下载 PECL memcache extension。（国内蓝奏云下载地址：https://jiea.lanzous.com/b01tttrja#ryan）\n\n\n\nVersion\nState\nRelease Date\nDownloads\n\n\n\n8.0\nstable\n2020-12-06\nmemcache-8.0.tgz (76.6kB)\n\n\n4.0.5.2\nstable\n2019-12-20\nmemcache-4.0.5.2.tgz (73.3kB) DLL\n\n\n4.0.5.1\nstable\n2019-12-19\nmemcache-4.0.5.1.tgz (73.3kB) DLL\n\n\n3.0.8\nbeta\n2013-04-07\nmemcache-3.0.8.tgz (68.9kB) DLL\n\n\n\n解压 memcache-8.0.tgz，找到 memcache.php 文件。\n\n找到下面代码编辑，在文件 22-29 行左右。\ndefine(&#39;ADMIN_USERNAME&#39;,&#39;memcache&#39;);     &#x2F;&#x2F; Admin Username\ndefine(&#39;ADMIN_PASSWORD&#39;,&#39;password&#39;);      &#x2F;&#x2F; Admin Password\ndefine(&#39;DATE_FORMAT&#39;,&#39;Y&#x2F;m&#x2F;d H:i:s&#39;);\ndefine(&#39;GRAPH_SIZE&#39;,200);\ndefine(&#39;MAX_ITEM_DUMP&#39;,50);\n\n$MEMCACHE_SERVERS[] &#x3D; &#39;mymemcache-server1:11211&#39;; &#x2F;&#x2F; add more as an array\n$MEMCACHE_SERVERS[] &#x3D; &#39;mymemcache-server2:11211&#39;; &#x2F;&#x2F; add more as an array\n\n修改为\ndefine(&#39;ADMIN_USERNAME&#39;,&#39;LzB9j5rZgB&#39;);     &#x2F;&#x2F; 登录名自行修改\ndefine(&#39;ADMIN_PASSWORD&#39;,&#39;6bUn@YgiG4xre$f9pNQMNkpQSFf$DS&#39;);      &#x2F;&#x2F; 密码自行修改\ndefine(&#39;DATE_FORMAT&#39;,&#39;Y&#x2F;m&#x2F;d H:i:s&#39;);\ndefine(&#39;GRAPH_SIZE&#39;,200);\ndefine(&#39;MAX_ITEM_DUMP&#39;,50);\n\n&#x2F;&#x2F; 这里定义的是 memcached 服务器，一般我们是单机部署，所以注释掉一行，并将 memcached 监听 IP 和端口根据实际修改\n$MEMCACHE_SERVERS[] &#x3D; &#39;127.0.0.1:11211&#39;; &#x2F;&#x2F; add more as an array\n&#x2F;&#x2F;$MEMCACHE_SERVERS[] &#x3D; &#39;mymemcache-server2:11211&#39;; &#x2F;&#x2F; add more as an array\n\n\n实际的 memcached 监听 IP 和端口，你可以通过如下命令查看：\n$ netstat -nutlp | grep memcache\ntcp        0      0 127.0.0.1:11211         0.0.0.0:*               LISTEN      3070&#x2F;memcached\n\n上传到网站私密目录（临时测试可以放到根目录），然后通过前台访问 memcache.php 文件，输入上面的用户名和密码即可看到 memcached 状态：\n\n\n纯静态缓存目前已经完成了数据库查询的动态缓存，如果想要进一步提高性能将网站的页面静态化，存储在 memcached 分配的内存中，可以使用 WordPress 插件 Batcache。\n安装 Batcache 插件\n在 WordPress 插件市场下载 Batcache。\n\n解压下载的 batcache.1.5.zip 。（或者直接从 batcache/trunk 页面下载）\n\n将 advanced-cache.php 文件上传到 /wp-content/ 目录。\n\n在 wp-config.php 文件中添加 define(&#39;WP_CACHE&#39;, true); 激活 Batcache 插件；\n\n在浏览器中将网站的某个页面刷新几次，在开发者工具源码页，在 &lt;/head&gt; 结束标签上方可以看到 Batcache 的状态。\n\n在 advanced-cache.php文件中调整相关参数，大概在文件 43-49 行左右。\nvar $max_age &#x3D;  300; &#x2F;&#x2F; Expire batcache items aged this many seconds (zero to disable batcache)\nvar $remote  &#x3D;    0; &#x2F;&#x2F; Zero disables sending buffers to remote datacenters (req&#x2F;sec is never sent)\nvar $times   &#x3D;    2; &#x2F;&#x2F; Only batcache a page after it is accessed this many times... (two or more)\nvar $seconds &#x3D;  120; &#x2F;&#x2F; ...in this many seconds (zero to ignore this and use batcache immediately)\n\nmax_age 代表缓存过期时间（以秒为单位），times 表示访问多少次才创建缓存（2 是最小值），seconds 表示在多少秒之后才创建缓存（0 表示立即）。\n修改为：\nvar $max_age &#x3D;  3600;\nvar $remote  &#x3D;    0;\nvar $times   &#x3D;    2;\nvar $seconds &#x3D;  120;\n\n将缓存有效期设为 3600 秒，也就是过 1 小时后缓存将重新生成。在 120 秒内，连续访问该页面 2 次将生成缓存。具体数字可以根据实际情况修改。\n\n（可选）将 batcache.php 上传到 /wp-content/plugins/ 网站插件目录。\n\n\n参考\nWordPress 启用 memcached 动态缓存以及报错解决\nMemcached Object Cache – installation\nBatcache – installation\n\n","slug":"2020-12-08 WordPress 启用 memcached 动态缓存","date":"2020-12-08T12:55:06.000Z","categories_index":"WordPress","tags_index":"WordPress","author_index":"JaimeZeng"},{"id":"09d4cfde756ba313f2558404320a1b58","title":"免费组队领取堡塔 APP 插件","content":"免费组队领取堡塔 APP 插件，队伍人数需要满 5 人，满员后组队关闭且立即发放插件抵扣券。插件抵扣券查看地址\n\n插件介绍官方介绍：堡塔 App\n活动地址\n活动地址：https://www.bt.cn/freegroup\n队伍地址：https://www.bt.cn/freegroup?group_id=2b1f4ab6\n\n\n\n\n\n\n\n\n\n\n队长送 3 年，队员送 1 年。如果你能在 24 小时之内找到 5 个人组队成功，那么可以单独组队，队长送 3 年插件抵扣券。插件抵扣券查看地址\n活动规则\n0 元组队，每个账号只允许成功组队 1 次，组队成功，立即发券，关闭队伍。\n组队成功，发放 Linux 面板堡塔 APP 插件抵扣券，队长送 3 年，队员送 1 年，无论使用与否，到期自动失效。堡塔 APP 仅限宝塔 Linux 面板最新版使用。\n队员或者队长身份一经确认，不允许更改。\n本活动旨在推广宝塔，分享给更多的人，所以分享链接不能在宝塔官方群及官方论坛宣传。\n严禁通过软件作弊组队，我们会监控注册 IP 等，作弊随时会被回收券及取消往后此类活动资格。\n活动有效期至 2021 年 1 月 30 日。\n活动最终解释权在法律范围内归堡塔所有。\n\n","slug":"2020-12-05-免费组队领取堡塔APP插件","date":"2020-12-05T14:11:10.000Z","categories_index":"活动","tags_index":"活动,宝塔面板","author_index":"JaimeZeng"},{"id":"836fbbe66da33f58c140987f7ad616d1","title":"注册 UCloud 用户社区获取积分可兑换代金券和礼品","content":"2020 年 1 月，UCloud 优刻得（股票简称：优刻得，股票代码：688158）正式登陆科创板，成为中国第一家公有云科创板上市公司，同时成为了中国 A 股市场首家”同股不同权” 的上市企业，开创了中国 A 股资本市场及公司治理的先河。\nUClub 是前段时间 UCloud 效仿阿里云和腾讯云进行社区积累社群及资源创建的用户社区。目前还属于推广阶段，正在进行的就是通过邀请会员参与社区，提问、发文、回复和评论获取积分，积分可兑换代金券和礼品。\n\n\n\n\n\n\n\n\n\nUClub 和 UCLOUD 账号不互通，需要单独注册账号！\n\n相关规则使用指南：UCloud 用户社区 UClub 新手使用指南\n积分奖励\n社区积分每满 100，可兑换 50 元 UCloud 账号赠金，用于购买任意云产品，查看 我的积分\n问答：发布问题奖励 2 积分，回答问题奖励 2 积分，答案被采纳奖励（5+悬赏）积分，恶意灌水积分清零\n文章：发布文章奖励（5+付费）积分，发表评论奖励 1 积分，恶意灌水积分清零\n注册：注册社区账号奖励 5 积分，邀请好友注册成功，奖励 2 积分，同 IP 无效，日上限邀请 5 名会员注册\n签到：每天签到奖励 1 积分，连续签到 30 天后，每天签到奖励 2 积分\n社区积分兑换，请前往积分商城，对积分规则有疑问，欢迎私信云小 U\n本积分激励规则自 2020 年 11 月 12 日生效，解释权归 UCloud 所有。\n\n积分获取为激励 UClubers，积极提问，分享经验，社区推出了以下积分获取渠道。\n\n\n\n积分渠道\n积分(+)\n获取方式\n备注\n\n\n\n注册社区账号（含第三方登录）\n5\n自动获取\n不可注销\n\n\n阅读本指南 3 分钟\n10\n自动获取\n仅可获取 1 次\n\n\n邀请 1 位会员注册（含第三方登录）\n2\n自动获取\n同 IP 无效，日上限 5 位\n\n\n签到\n1/2\n自动获取\n每天签到奖励 1 积分，连续签到 30 天后，每天签到奖励 2 积分\n\n\n反馈 BUG\n10-50\n联系云小 U\n官方根据 BUG 评估增加积分\n\n\n社区发布问题\n2\n自动获取\n恶意灌水不奖励积分，2 次违反积分清零\n\n\n社区回答问题\n2\n自动获取\n恶意灌水不奖励积分，2 次违反积分清零\n\n\n社区发布文章\n5\n自动获取\n恶意灌水不奖励积分，2 次违反积分清零\n\n\n社区发布原创首发文章\n30-100\n联系云小 U\n文章 600 字以上，需原创首发，且被百度收录\n\n\n社区发表评论\n1\n自动获取\n恶意灌水不奖励积分，2 次违反积分清零\n\n\n社区回答被采纳\n5\n自动获取\n同 IP 禁止采纳。7 日后回答均未被采纳，由官方选择采纳最佳答案\n\n\n首页添加社区邀请链接\n10\n联系云小 U\n百度权重需 2 以上，首页和全站互斥\n\n\n全站添加社区邀请链接\n20\n联系云小 U\n百度权重需 2 以上，首页和全站互斥\n\n\n推广UCloud用户社区\n200-500\n联系云小 U\n活动时间：2020 年 12 月 1 日-2020 年 12 月 31 日\n\n\n注：积极踊跃发文或回答，且内容详实完善，可申请成为社区认证专家，获得更多曝光机会。图片严禁携带水印上传，自动获取渠道积分日上限积分为 20，且内容一旦删除，获得的积分将自动取消。UCloud官方有权对灌水、违法违规、不文明内容进行删除。\n积分兑换积分兑换：https://uclub.ucloud.cn/exchange.html\n\n相关链接\nUCloud 社区：https://uclub.ucloud.cn\n我的邀请链接：https://uclub.ucloud.cn/invite/105\n\n\n\n\n\n\n\n\n\n\n若首次微信登录授权成功后无跳转，请清除浏览器缓存再试；\n","slug":"2020-12-03 注册 UCloud 用户社区获取积分可兑换代金券和礼品","date":"2020-12-03T09:25:26.000Z","categories_index":"活动","tags_index":"活动,UCloud","author_index":"JaimeZeng"},{"id":"af957dc6357d17d5fffb43ddbcdfe97b","title":"CentOS 开启 BBR","content":"\nBottleneck Bandwidth and Round-trip propagation time（BBR），是 Google 在 2016 年开发的 TCP 拥塞控制算法，可以使 Linux 服务器显着地提高吞吐量和减少 TCP 连接的延迟。\n\n\n\n\n\n\n\n\n\n注意：\n\n由于是使用最新版系统内核，最好请勿在生产环境安装，以免产生不可预测之后果。\n\nBBR 不支持虚拟方式为 OpenVZ 和 LXC 的服务器。如果你的服务器使用以下命令返回 openvz, lxc 字段，那么你就没必要继续阅读本文了 😂。如果返回其它字段（例如：kvm, xen , vmware 等），那么你可以参考以下步骤开启 BBR。\necho $(systemd-detect-virt)\necho $(virt-what)\n\n\n\n\n\n\n\n\n\n\n\nTCP BBR（Bottleneck Bandwidth and Round-trip propagation time）是由 Google 设计，于 2016 年发布的拥塞算法。以往大部分拥塞算法是基于丢包来作为降低传输速率的信号，而 BBR 则基于模型主动探测。该算法使用网络最近出站数据分组当时的最大带宽和往返时间来创建网络的显式模型。数据包传输的每个累积或选择性确认用于生成记录在数据包传输过程和确认返回期间的时间内所传送数据量的采样率。[39]该算法认为随着网络接口控制器逐渐进入千兆速度时，与缓冲膨胀相关的延迟相比丢包更应该被认为是识别拥塞的主要决定因素，所以基于延迟模型的拥塞控制算法（如 BBR）会有更高的吞吐量和更低的延迟，可以用 BBR 来替代其他流行的拥塞算法，例如 CUBIC。Google 在 YouTube 上应用该算法，将全球平均的 YouTube 网络吞吐量提高了 4%，在一些国家超过了 14%。[40]\nBBR 之后移植入 Linux 内核 4.9 版本，[41][42]并且对于 QUIC 可用。\nBBR 效率很高，速度也很快，但是它与非 BBR 的流的公平性有争议。虽然谷歌的展示显示 BBR 与 CUBIC 共存良好，但像杰夫·休斯顿和霍克、布利斯和齐特巴特等研究者发现它对其他流不公平，并且不可扩展。[43]霍克等人还发现，在 Linux 4.9 的 BBR 实现中”存在一些严重的固有问题，如排队延迟增加、不公平和大量数据包丢失”。[44]\n索海尔·阿巴斯洛等人(C2TCP 的作者)指出，BBR 在动态环境中表现不佳，比如蜂窝网络。[45][46]他们还表明 BBR 存在不公平问题。例如，当一个 CUBIC 流(在 Linux、Android 和 MacOS 中是默认的 TCP 实现)与网络中的 BBR 流共存时，BBR 流可以支配 CUBIC 流并从中获得整个链路带宽[45]。\n– TCP BBR - Wikipedia\n一键脚本\n\n\n\n\n\n\n\n\n以下一键脚本内容转载于：一键安装最新内核并开启 BBR 脚本 | 秋水逸冰\n本脚本适用环境\n系统支持：CentOS 6+，Debian 8+，Ubuntu 16+\n虚拟技术：OpenVZ 以外的，比如 KVM、Xen、VMware\n内存要求：≥128M\n日期　　：2020 年 9 月 8 日\n\n关于本脚本\n本脚本已在 Vultr 上的 VPS 全部测试通过。\n当脚本检测到 VPS 的虚拟方式为 OpenVZ 时，会提示错误，并自动退出安装。\n脚本运行完重启发现开不了机的，打开 VPS 后台控制面板的 VNC, 开机卡在 grub 引导, 手动选择内核即可。\n由于是使用最新版系统内核，最好请勿在生产环境安装，以免产生不可预测之后果。\n\n使用方法使用 root 用户登录，运行以下命令：\nwget --no-check-certificate -O &#x2F;opt&#x2F;bbr.sh https:&#x2F;&#x2F;github.com&#x2F;teddysun&#x2F;across&#x2F;raw&#x2F;master&#x2F;bbr.sh\nchmod 755 &#x2F;opt&#x2F;bbr.sh\n&#x2F;opt&#x2F;bbr.sh\n\n安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下检查：\n\n查看内核版本\nuname -r\n\n查看内核版本，显示为新版内核就表示 OK 了。\n\n验证是否成功开启了 BBR。\nsysctl net.ipv4.tcp_available_congestion_control\n# 返回值一般为：\n# net.ipv4.tcp_available_congestion_control &#x3D; bbr cubic reno\n# 或者：\n# net.ipv4.tcp_available_congestion_control &#x3D; reno cubic bbr\n\nsysctl net.ipv4.tcp_congestion_control\n# 返回值一般为：\n# net.ipv4.tcp_congestion_control &#x3D; bbr\n\nsysctl net.core.default_qdisc\n# 返回值一般为：\n# net.core.default_qdisc &#x3D; fq\n查看内核模块是否加载。\nlsmod | grep bbr\n\n返回值有 tcp_bbr 模块即说明 bbr 已启动。比如：\ntcp_bbr                20480  3\n\n\n\n\n\n\n\n\n\n\n注意：并不是所有的 VPS 都会有此返回值，若没有也属正常。\n\n\n特别说明如果你使用的是 Google Cloud Platform （GCP）更换内核，有时会遇到重启后，整个磁盘变为只读的情况。只需执行以下命令即可恢复：\nmount -o remount rw &#x2F;\n\nCentOS 7 手动开启更换内核由于开启 BBR 需 4.10 以上版本 Linux 内核，如果您的 Linux 服务器内核低于 4.10（例如：腾讯云控制台安装的 CentOS 7 系统内核是 3.10，低于开启 BBR 最低要求的版本 4.10，所以我们需要手动更换为默认内核后再作升级）。\n手动更换内核的步骤可以看我之前的文章：CentOS 手动更换内核。\n开启 BBR\n编辑 /etc/sysctl.conf 文件，添加如下内容。\nnet.core.default_qdisc&#x3D;fq\nnet.ipv4.tcp_congestion_control&#x3D;bbr\n#bash\nsudo sed -i &#39;&#x2F;net.core.default_qdisc&#x2F;d&#39; &#x2F;etc&#x2F;sysctl.conf\nsudo sed -i &#39;&#x2F;net.ipv4.tcp_congestion_control&#x2F;d&#39; &#x2F;etc&#x2F;sysctl.conf\nsudo echo &quot;net.core.default_qdisc &#x3D; fq&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf\nsudo echo &quot;net.ipv4.tcp_congestion_control &#x3D; bbr&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf\n从配置文件中加载内核参数设置。\nsysctl -p &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1\n验证是否成功开启了 BBR。\nsysctl net.ipv4.tcp_available_congestion_control | grep -o &#39;net.ipv4.tcp_available_congestion_control &#x3D; reno cubic bbr&#39;\nsysctl net.ipv4.tcp_available_congestion_control | grep -o &#39;net.ipv4.tcp_available_congestion_control &#x3D; bbr cubic reno&#39;\n# 高亮显示如下任意一条内容即可：\n# net.ipv4.tcp_available_congestion_control &#x3D; reno cubic bbr\n# net.ipv4.tcp_available_congestion_control &#x3D; bbr cubic reno\n\nsysctl net.ipv4.tcp_congestion_control | grep -o &#39;net.ipv4.tcp_congestion_control &#x3D; bbr&#39;\n# 高亮显示如下内容即可：\n# net.ipv4.tcp_congestion_control &#x3D; bbr\n\nsysctl net.ipv4.tcp_available_congestion_control | grep -o &#39;net.ipv4.tcp_available_congestion_control &#x3D; reno cubic bbr&#39;\n# 高亮显示如下内容即可：\n# net.ipv4.tcp_available_congestion_control &#x3D; reno cubic bbr\n查看内核模块是否加载。\n$ lsmod | grep bbr\ntcp_bbr                20480  1\n更改文件权限。\nsudo chmod 644 &#x2F;etc&#x2F;sysctl.conf\n\n","slug":"2020-11-13-CentOS-开启-BBR","date":"2020-11-13T13:42:36.000Z","categories_index":"CentOS","tags_index":"CentOS","author_index":"JaimeZeng"},{"id":"64736f77b89e86715a6b7061bf24c0ba","title":"CentOS 手动更换内核","content":"\n由于开启 BBR 需 4.10 以上版本 Linux 内核， 但是云服务器安装的 CentOS 7 系统内核是 3.10，低于开启 BBR 最低要求的版本 4.10，所以我们需要手动更换为默认内核后再作升级。\n\n\n\n\n\n\n\n\n\n由于是使用最新版系统内核，最好请勿在生产环境安装，以免产生不可预测之后果。\n安装 ELRepo yum 源\n查看当前 Kernel 版本。\n$ uname -r\nkernel-3.10.0-1160.11.1.el7.x86_64\n更新软件包。\nsu - root\nyum update -y\n导入 ELRepo 公钥。\nrpm --import https:&#x2F;&#x2F;www.elrepo.org&#x2F;RPM-GPG-KEY-elrepo.org\n安装 ELRepo 的 yum 源。\n#RHEL-8 或者 CentOS-8\nyum install -y https:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-8.el8.elrepo.noarch.rpm\n\n#RHEL-7, SL-7 或者 CentOS-7\nyum install -y https:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.el7.elrepo.noarch.rpm\n\n#RHEL-6, SL-6 或者 CentOS-6\nyum install -y https:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-6.el6.elrepo.noarch.rpm\n安装国内镜像。\n#备份 &#x2F;etc&#x2F;yum.repos.d&#x2F;elrepo.repo\ncp &#x2F;etc&#x2F;yum.repos.d&#x2F;elrepo.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;elrepo.repo.bak\n\n#安装 TUNA 镜像源\nsed -i &#39;s+mirrorlist&#x3D;+#mirrorlist&#x3D;+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;elrepo.repo\nsed -i &#39;s+elrepo.org&#x2F;linux+mirrors.tuna.tsinghua.edu.cn&#x2F;elrepo+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;elrepo.repo\n更新软件包缓存。\nyum makecache\n\n安装新内核\n查看 ELRepo 仓库下当前系统支持的内核包。\nyum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;elrepo-kernel&quot; list available\n安装最新的主线稳定Kernel 。\nyum --enablerepo&#x3D;elrepo-kernel install -y kernel-ml\n\n更改 grub 配置默认启动新内核安装完kernel-ml之后，系统没有自动切换到新内核，重启之后也不会切换到新内核。我们需要更改 grub 配置默认启动新内核。\n\n打开 /etc/default/grub 文件，将文件中GRUB_DEFAULT=saved修改为GRUB_DEFAULT=0。不会 Vim 操作的使用下面命令。\nsed -i &#39;s+GRUB_DEFAULT&#x3D;saved+GRUB_DEFAULT&#x3D;0+&#39; &#x2F;etc&#x2F;default&#x2F;grub\n重新生成 Kernel 配置。\ngrub2-mkconfig -o &#x2F;boot&#x2F;grub2&#x2F;grub.cfg\n重启服务器。\nreboot\n检查是否更改为新 Kernel 。\n$ uname -r\n5.10.4-1.el7.elrepo.x86_64\n\n删除多余内核\n\n\n\n\n\n\n\n\n如果空间充裕建议不要卸载旧内核。\n\n查看所有版本的 Kernel 。\nrpm -qa | grep kernel\n删除旧版本的 Kernel 。\nsudo yum remove -y kernel-3.10.*\n重新生成 Kernel 配置。\nsudo grub2-mkconfig -o &#x2F;boot&#x2F;grub2&#x2F;grub.cfg\n\n参考\nelrepo | 镜像站使用帮助 | 清华大学开源软件镜像站\n\n","slug":"2020-11-13-CentOS-手动更换内核","date":"2020-11-13T13:26:07.000Z","categories_index":"CentOS","tags_index":"CentOS,Kernel","author_index":"JaimeZeng"},{"id":"96e91c457e2731962d3902abef5c9240","title":"Linux 系统服务器设置 SSH 密钥登录","content":"\nLinux 系统服务器的 SSH 登录方式最常见的有两种：通过用户密码登录或者采用密钥对登录。其中使用用户密码方式登录，容易有密码被暴力破解的问题。为了安全，可以使用 1Password 密码生成器 生成长度 30 位，包含大小写字母、数字和符号的用户密码，并且定期更换密码，这样就导致密码总是记不住，每次登录服务器都需要找一下密码。所以我们在远程 SSH 登录时采用第二章方式：使用密钥对登录服务器。\n密钥形式登录的原理是：利用密钥生成器制作一对密钥(公钥+私钥)。将公钥添加到服务器的某个账户上，然后在客户端利用私钥即可完成认证并登录。这样一来，没有私钥，任何人都无法通过 SSH 暴力破解你的密码来远程登录到系统。此外，如果将公钥复制到其他账户甚至主机，利用私钥也可以登录。\n密钥形式登录的过程：\n\n生成密钥对。\n将生成的公钥追加到 ~/.ssh/authorized_keys 文件中。\n服务器打开密钥登录功能。\n客户端选中生成的私钥，进行密钥登录。\n\n生成密钥对WindowsWindows 下需要安装 Git 后才能生成，不想安装 Git 的可以直接使用 Xshell 工具生成。\n\n点击 Xshell 菜单栏中的 工具 - 新建用户密钥生成向导 开始生成密钥对。\n\n\n点击 下一步。\n\n\n点击 下一步。\n\n\n补充信息，然后点击 完成。\n\n\n查看并复制公钥内容。\n\n\n\nLinux\n打开终端。\n\n输入以下命令（替换为您的电子邮件地址）。\n$ ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;\n#如果您使用的是不支持 Ed25519 算法的旧系统，请使用以下命令：\n$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;\n这将创建以所提供的电子邮件地址为标签的新 SSH 密钥。\n&gt; Generating public&#x2F;private ed25519 key pair.\n提示您 “Enter a file in which to save the key（输入要保存密钥的文件）”时，按 Enter 键。 这将接受默认文件位置。\n&gt; Enter a file in which to save the key (&#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_ed25519): [Press enter]\n在提示时输入安全密码。\n&gt; Enter passphrase (empty for no passphrase): [Type a passphrase]\n&gt; Enter same passphrase again: [Type passphrase again]\n查看并复制公钥内容。\n$ cat ~&#x2F;.ssh&#x2F;id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom&#x2F;BWDSU\nGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\nPbv7kOdJ&#x2F;MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK&#x2F;7XA\nt3FaoJoAsncM1Q9x5+3V0Ww68&#x2F;eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw&#x2F;Pb0rwert&#x2F;En\nmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z&#x2F;il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\nNrRFi9wrf+M7Q&#x3D;&#x3D; schacon@mylaptop.local\n\n\n\n\n\n\n\n\n\n\n如果您的私钥没有存储在默认位置之一（如 ~/.ssh/id_rsa），您需要告知 SSH 身份验证代理其所在位置。 要将密钥添加到 ssh-agent，请输入 ssh-add ~/path/to/my_key。\n在服务器上安装公钥authorized_keys 是 linux 操作系统下，专门用来存放公钥的地方，只要公钥放到了服务器的正确位置，并且拥有正确的权限，你才可以通过你的私钥，免密登录 linux 服务器。\n\n登录服务器。\nssh ryanpd5i@13.229.188.59\n将公钥内容追加到 ~/.ssh/authorized_keys 文件中。\necho &quot;公钥内容&quot; &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys\n更改文件权限。\nsudo chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys\nsudo chmod 700 ~&#x2F;.ssh\n\n服务器打开密钥登录功能\n编辑 /etc/ssh/sshd_config 文件，进行如下设置：\nRSAAuthentication yes\nPubkeyAuthentication yes\n#bash\nsudo sed -i &#39;&#x2F;#PubkeyAuthentication yes&#x2F;iRSAAuthentication yes&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config\nsudo sed -i &#39;s&#x2F;#PubkeyAuthentication yes&#x2F;PubkeyAuthentication yes&#x2F;g&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config\n阻止 root 用户通过 SSH 登录：\nPermitRootLogin yes\n#bash\nsudo sed -i &#39;s&#x2F;#PermitRootLogin yes&#x2F;PermitRootLogin yes&#x2F;g&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config\n\n以密钥方式登录Linux 下：\nssh ryanpd5i@13.229.188.59\n\nWindows Xshell 下：\n\n当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录：\nPasswordAuthentication no\n#bash\nsudo sed -i &#39;s&#x2F;PasswordAuthentication yes&#x2F;PasswordAuthentication no&#x2F;g&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config\n\n最后，重启 SSH 服务：\nservice sshd restart\n\n参考\nGenerating a new SSH key and adding it to the ssh-agent - GitHub Docs\n设置 SSH 通过密钥登录\n\n","slug":"2020-11-12-Linux-系统服务器设置-SSH-密钥登录","date":"2020-11-12T10:52:36.000Z","categories_index":"Linux","tags_index":"Linux","author_index":"JaimeZeng"},{"id":"60594cec29f293a49a928359541eda5f","title":"Linux 系统服务器禁止 root 用户登录","content":"\nLinux 账户下 root 账户属于超级用户，具有全权管理权，可以做任何事。如果误操作会产生很大的破坏性。如果被黑，对方得到 root 的权限就能够读取写入系统上的所有文件。为了避免这一现象，我们需要添加新的用户并赋予管理员权限。该用户想要获取 root 权限可以使用 sudo 方式，sudo 只限制该用户有限的命令下有 root 权限， 而不是将所有 root 的命令权限给该用户，这样可以避免该用户使用 root 账户密码。\n添加新用户赋管理员权限\n添加新用户。\n# useradd ryanpd5i\n给新用户设置密码，会让你输入两次密码。\n# passwd ryanpd5i\nChanging password for user ryanpd5i.\nNew password: r4hRBzGTN#FQt#iyxvGPFP^zB#q4Wu\nRetype new password: r4hRBzGTN#FQt#iyxvGPFP^zB#q4Wu\npasswd: all authentication tokens updated successfully.\n将新用户加入 wheel 组。\n\n\n\n\n\n\n\n\n\n在 Linux 中 wheel 组就类似于一个管理员的组。\n通常在 Linux 下，即使我们有系统管理员 root 的权限，也不推荐用 root 用户登录。一般情况下用普通用户登录就可以了，在需要 root 权限执行一些操作时，再 su 登录成为 root 用户。但是，任何人只要知道了 root 的密码，就都可以通过 su 命令来登录为 root 用户，这无疑为系统带来了安全隐患。所以，将普通用户加入到 wheel 组，被加入的这个普通用户就成了管理员组内的用户，但如果不对一些相关的配置文件进行配置，这个管理员组内的用户与普通用户也没什么区别，就像警察下班后，没有带枪、穿这便衣和普通人（用户）一样，虽然他的确是警察。根据应用的实例不同应用 wheel 组的方法也不同。这里对于服务器来说，我们希望的是剥夺被加入到 wheel 组用户以外的普通用户通过 su 命令来登录为 root 的机会（只有属于 wheel 组的用户才可以用 su 登录为 root）。这样就进一步增强了系统的安全性。\nusermod -a -G wheel ryanpd5i\n修改 sudo 的配置文件 sudoers。在 /etc/sudoers 文件中的 root ALL=(ALL) ALL 行后添加 ryanpd5i ALL=(ALL) ALL 。\n# 文件添加写权限\nchmod 640 &#x2F;etc&#x2F;sudoers\n\n# 在 root    ALL&#x3D;(ALL)     ALL 行后添加 ryanpd5i    ALL&#x3D;(ALL)     ALL\n\n# 执行 root 权限操作时不输入密码，不建议这样做\n# 将&#96;# %wheel    ALL&#x3D;(ALL)    NOPASSWD: ALL&#96; 一行中行首的 &#39;#&#39; 删除\n\n# 撤销文件写权限\nchmod 440 &#x2F;etc&#x2F;sudoers\n\n\n\n\n\n\n\n\n\n\n生产环境建议指定具体目录或命令。例如：\n\nryanpd5i ALL=(root) /mnt/sudodir 目录 /mnt/sudodir 里面的程序 ryanpd5i 用户可以使用 root 权限（但是需要输入账户密码）来执行；\nryanpd5i ALL=(root) NOPASSWD: /etc/ssh 目录 /etc/ssh 里面的文件 ryanpd5i 用户可以使用 root 权限（不用输入账户密码）来读写；\n\n\n\n现在就可以使用 sudo su - 然后输入用户密码来使用 root 权限。\nSSH 禁止 root 用户登录阻止 root 用户通过 SSH 登录阻止 root 用户使用 SSH 远程登录服务器。\nPermitRootLogin yes\n#bash\nsudo sed -i &#39;s&#x2F;#PermitRootLogin yes&#x2F;PermitRootLogin yes&#x2F;g&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config\n\n设定仅允许指定用户登录设置只允许指定用户登录服务器。注意：一旦开启这个参数，root 用户就不能使用 SSH 远程登录服务器，在 SSH 登录时会收到”Access denied”的提示。\n方法：在 PasswordAuthentication yes 行后添加 AllowUsers ryanpd5i。\nsed -i &#39;&#x2F;^PasswordAuthentication yes&#x2F;aAllowUsers ryanpd5i&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config\n\n最后，重启 SSH 服务：\nservice sshd restart\n\n参考\n命令前加 sudo 执行和用真正的 root 用户执行有什么区别\n\n","slug":"2020-11-12-Linux-云服务器禁止-root-用户登录","date":"2020-11-12T10:06:33.000Z","categories_index":"Linux","tags_index":"Linux","author_index":"JaimeZeng"},{"id":"a92869a2b48f0ffce8551661a1622e3c","title":"文本处理 sed","content":"本章主要讲解 Shell 中最核心的文本处理三剑客之 sed 的用法。\nsed 的工作模式基础介绍\nsed(Stream Editor)：流编辑器。对标准输出或文件逐行进行处理。\n\n语法格式|        | 格式                                  || —— | ————————————- | ——————————- || 第一种 | stdout                               | sed [option] &quot;pattern command&quot; || 第二种 | sed [option] &quot;pattern command&quot; file |\nsed 的选项选项\n\n\n选项\n含义\n\n\n\n-n\n只打印模式匹配行\n\n\n-e\n直接在命令行进行 sed 编辑，默认选项\n\n\n-f\n编辑动作保存在文件中，指定文件执行\n\n\n-r\n支持扩展正则表达式\n\n\n-i\n直接修改文件内容\n\n\n测试测试代码#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# sed 中的 option 练习\n\nfilepath&#x3D;$(\n    cd &quot;$(dirname &quot;$0&quot;)&quot;\n    pwd\n)\ntestpath&#x3D;&quot;$&#123;filepath&#125;&#x2F;test_dir&quot;\nfilename&#x3D;&quot;$&#123;testpath&#125;&#x2F;passwd&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction test_sed_option() &#123;\n    # 生成测试文件\n    mkdir -p $&#123;testpath&#125; &amp;&amp; cd $&#123;testpath&#125;\n    cp &#x2F;etc&#x2F;passwd .&#x2F;\n\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中以 root 开始的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;&#x2F;^root&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 zsh 或者 bash 的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n -e &#39;&#x2F;bash&#x2F;p&#39; -e &#39;&#x2F;zsh&#x2F;p&#39; $&#123;filename&#125;\n    # 使用 -r 扩展正则表达式处理\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 zsh 或者 bash 的行(使用扩展正则表达式) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n -r &#39;&#x2F;bash|zsh&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 root 的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;&#x2F;root&#x2F;p&#39; $&#123;filename&#125;\n\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;&#x2F;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#x2F;p&#39; $&#123;filename&#125;\n    # 使用 -f 指定文件处理\n    echo &quot;&#x2F;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#x2F;p&quot; &gt;&gt;edit.sed\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行(使用指定文件处理) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n -f edit.sed $&#123;filename&#125;\n\n    # 使用 -i 直接修改文件内容\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 root 的行(sed) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;&#x2F;root&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 root 的行(grep) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -n &#39;root&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 将 passwd 文件中的 root 替换为 jaime 并打印 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;s&#x2F;root&#x2F;jaime&#x2F;g;p&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 jaime 的行(sed) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &#39;&#x2F;jaime&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 直接将 passwd 文件中的 root 替换为 jaime ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;root&#x2F;jaime&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 passwd 文件中包含 jaime 的行(grep) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -n &#39;jaime&#39; $&#123;filename&#125;\n\n    # 删除测试目录\n    cd $&#123;filepath&#125; &amp;&amp; rm -rf test_dir&#x2F;\n    # rm -r passwd edit.sed\n&#125;\n\ntest_sed_option\n\n运行结果------ 打印 passwd 文件中以 root 开始的行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n\n------ 打印 passwd 文件中包含 zsh 或者 bash 的行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh\n\n------ 打印 passwd 文件中包含 zsh 或者 bash 的行(使用扩展正则表达式) ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh\n\n------ 打印 passwd 文件中包含 root 的行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n\n------ 打印 passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行 ------\n\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\n\n------ 打印 passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行(使用指定文件处理) ------\n\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\n\n------ 打印 passwd 文件中包含 root 的行(sed) ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n\n------ 打印 passwd 文件中包含 root 的行(grep) ------\n\n1:root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n\n------ 将 passwd 文件中的 root 替换为 jaime 并打印 ------\n\njaime:x:0:0:jaime:&#x2F;jaime:&#x2F;bin&#x2F;zsh\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\nshutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown\nhalt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;jaime:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\nnobody:x:99:99:Nobody:&#x2F;:&#x2F;sbin&#x2F;nologin\nsystemd-network:x:192:192:systemd Network Management:&#x2F;:&#x2F;sbin&#x2F;nologin\ndbus:x:81:81:System message bus:&#x2F;:&#x2F;sbin&#x2F;nologin\npolkitd:x:999:998:User for polkitd:&#x2F;:&#x2F;sbin&#x2F;nologin\nsshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\npostfix:x:89:89::&#x2F;var&#x2F;spool&#x2F;postfix:&#x2F;sbin&#x2F;nologin\nchrony:x:998:996::&#x2F;var&#x2F;lib&#x2F;chrony:&#x2F;sbin&#x2F;nologin\nryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh\nrpc:x:32:32:Rpcbind Daemon:&#x2F;var&#x2F;lib&#x2F;rpcbind:&#x2F;sbin&#x2F;nologin\ngluster:x:997:993:GlusterFS daemons:&#x2F;run&#x2F;gluster:&#x2F;sbin&#x2F;nologin\nlibstoragemgmt:x:996:992:daemon account for libstoragemgmt:&#x2F;var&#x2F;run&#x2F;lsm:&#x2F;sbin&#x2F;nologin\nqemu:x:107:107:qemu user:&#x2F;:&#x2F;sbin&#x2F;nologin\nunbound:x:995:991:Unbound DNS resolver:&#x2F;etc&#x2F;unbound:&#x2F;sbin&#x2F;nologin\nsaslauth:x:994:76:Saslauthd user:&#x2F;run&#x2F;saslauthd:&#x2F;sbin&#x2F;nologin\ntss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin\nusbmuxd:x:113:113:usbmuxd user:&#x2F;:&#x2F;sbin&#x2F;nologin\nsaned:x:993:990:SANE scanner daemon user:&#x2F;usr&#x2F;share&#x2F;sane:&#x2F;sbin&#x2F;nologin\ncolord:x:992:988:User for colord:&#x2F;var&#x2F;lib&#x2F;colord:&#x2F;sbin&#x2F;nologin\nabrt:x:173:173::&#x2F;etc&#x2F;abrt:&#x2F;sbin&#x2F;nologin\ngeoclue:x:991:987:User for geoclue:&#x2F;var&#x2F;lib&#x2F;geoclue:&#x2F;sbin&#x2F;nologin\nntp:x:38:38::&#x2F;etc&#x2F;ntp:&#x2F;sbin&#x2F;nologin\nsetroubleshoot:x:990:986::&#x2F;var&#x2F;lib&#x2F;setroubleshoot:&#x2F;sbin&#x2F;nologin\nrpcuser:x:29:29:RPC Service User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nnfsnobody:x:65534:65534:Anonymous NFS User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nrtkit:x:172:172:RealtimeKit:&#x2F;proc:&#x2F;sbin&#x2F;nologin\npulse:x:171:171:PulseAudio System Daemon:&#x2F;var&#x2F;run&#x2F;pulse:&#x2F;sbin&#x2F;nologin\nsssd:x:989:983:User for sssd:&#x2F;:&#x2F;sbin&#x2F;nologin\nradvd:x:75:75:radvd user:&#x2F;:&#x2F;sbin&#x2F;nologin\ntcpdump:x:72:72::&#x2F;:&#x2F;sbin&#x2F;nologin\navahi:x:70:70:Avahi mDNS&#x2F;DNS-SD Stack:&#x2F;var&#x2F;run&#x2F;avahi-daemon:&#x2F;sbin&#x2F;nologin\nnginx:x:987:981:Nginx web server:&#x2F;var&#x2F;lib&#x2F;nginx:&#x2F;sbin&#x2F;nologin\n\n------ 打印 passwd 文件中包含 jaime 的行(sed) ------\n\n\n------ 直接将 passwd 文件中的 root 替换为 jaime ------\n\n\n------ 打印 passwd 文件中包含 jaime 的行(grep) ------\n\n1:jaime:x:0:0:jaime:&#x2F;jaime:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;jaime:&#x2F;sbin&#x2F;nologin\n\n\nsed 中的 pattern 详解匹配模式\n\n\n匹配模式\n含义\n\n\n\n10commmand\n匹配到第 10 行\n\n\n10,20command\n匹配从第 10 行开始，到第 20 行结束\n\n\n10,+5command\n匹配从第 10 行开始，到第 16 行结束\n\n\n/pattern1/command\n匹配到 pattern1 的行\n\n\n/patttern1,/pattern2/command\n匹配从 pattern 的行开始，到 pattern2 的行结束\n\n\n10,/pattern1/command\n匹配从第 10 行开始，到匹配到 pattern1 的行结束\n\n\n/pattern1/,10command\n匹配到 pattern1 的行开始，到第 10 行结束\n\n\n注意：\n\n匹配模式中存在变量时，建议使用双引号。sed -i &quot;/$&#123;var1&#125;/$&#123;var2&#125;/g&quot;\n需要引入自定义变量时，如果外面使用单引号，则自定义变量也必须使用单引号。sed -i &#39;/&#39;$&#123;var1&#125;&#39;/&#39;$&#123;var2&#125;&#39;/g&#39;\n\n1. LineNumber: 指定行号\n\n    sed -n &quot;17p&quot; file   # 打印 file 的第 17 行\n\n2. StartLine, EndLine: 指定起始和结束行号\n\n    sed -n &quot;10, 20p&quot; file   # 打印 file 的 第 10 - 20 行\n\n3. StartLine,+N:指定起始行号，然后后面 N 行\n\n    sed -n &quot;10, +5p&quot; file   # 打印 file 的 第 10 - 16 行\n\n4. &#x2F;pattern1&#x2F;: 正则表达式匹配的行\n\n    sed -n &quot;&#x2F;^root&#x2F;p&quot; file  # 打印 file 文件中以 root 开始的行\n\n5. &#x2F;pattern1&#x2F;,&#x2F;pattern2&#x2F;: 从匹配到 pattern1 的行，到匹配到 pattern2 的行\n\n    sed -n &#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&quot; file    # 打印 file 文件中从 mail 开始的行到 ftp 开始的行\n\n6. LineNumber,&#x2F;pattern1&#x2F;: 从指定行开始匹配，匹配到 pattern1 的行结束\n\n    sed -n &quot;4,&#x2F;shutdown$&#x2F;p&quot; file    # 打印 file 文件中从第 4 行到以 shutdown\n    结束的行\n\n7. &#x2F;pattern1&#x2F;,LineNumber: 从匹配到 pattern1 的行开始到指定行结束\n\n    sed -n &quot;&#x2F;^bin&#x2F;,6p&quot; file     # 打印 file 文件中从以 bin 开始的行到 第 6 行\n\n测试测试代码#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n#  sed 中的 pattern 练习\n\nfilename&#x3D;&#39;&#x2F;etc&#x2F;passwd&#39;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction test_sed_pattern() &#123;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 的第 3 行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;3p&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 的第 1 - 5 行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;1, 5p&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 的第 1 ,+5 行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;1, +5p&quot; $&#123;filename&#125;\n\n    # 正则表达式\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中以 root 开始的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;&#x2F;^root&#x2F;p&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中从 mail 开始的行到 ftp 开始的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中从第 4 行到以 shutdown 结束的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;4,&#x2F;shutdown$&#x2F;p&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中从以 bin 开始的行到第 6 行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;&#x2F;^bin&#x2F;,6p&quot; $&#123;filename&#125;\n    # 正则表达式转义\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;&#x2F;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#x2F;p&quot; $&#123;filename&#125;\n    # 扩展正则表达式\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中包含 bash 或者 zsh 的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n -r &quot;&#x2F;bash|zsh&#x2F;p&quot; $&#123;filename&#125;\n\n    # 如果起始行号 &gt; 终止行号，只会显示起始行号的那一行\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 &#x2F;etc&#x2F;passwd 中从包含 sshd 的行并显示行号 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -n &quot;sshd&quot; $&#123;filename&#125;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 打印 &#x2F;etc&#x2F;passwd 中从包含 sshd 的行到第 6 行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n &quot;&#x2F;sshd&#x2F;,6p&quot; $&#123;filename&#125;\n\n&#125;\n\ntest_sed_pattern\n\n运行结果------ 打印 &#x2F;etc&#x2F;passwd 的第 3 行 ------\n\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\n\n------ 打印 &#x2F;etc&#x2F;passwd 的第 1 - 5 行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\n\n------ 打印 &#x2F;etc&#x2F;passwd 的第 1 ,+5 行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\n\n------ 打印 &#x2F;etc&#x2F;passwd 中以 root 开始的行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n\n------ 打印 &#x2F;etc&#x2F;passwd 中从 mail 开始的行到 ftp 开始的行 ------\n\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\n\n------ 打印 &#x2F;etc&#x2F;passwd 中从第 4 行到以 shutdown 结束的行 ------\n\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\nshutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown\n\n------ 打印 &#x2F;etc&#x2F;passwd 中从以 bin 开始的行到第 6 行 ------\n\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\n\n------ 打印 &#x2F;etc&#x2F;passwd 中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行 ------\n\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\n\n------ 打印 &#x2F;etc&#x2F;passwd 中包含 bash 或者 zsh 的行 ------\n\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh\n\n------ 在 &#x2F;etc&#x2F;passwd 中从包含 sshd 的行并显示行号 ------\n\n17:sshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\n\n------ 打印 &#x2F;etc&#x2F;passwd 中从包含 sshd 的行到第 6 行 ------\n\nsshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\n\nsed 中的编辑命令命令对照表\n\n\n类别\n编辑命令\n含义\n\n\n\n查询\np\n打印\n\n\n增加 1\na\n行后追加\n\n\n增加 2\ni\n行前增加\n\n\n增加 3\nr\n外部文件读入，行后追加\n\n\n增加 4\nw\n匹配行写入外部文件\n\n\n删除\nd\n删除\n\n\n修改 1\ns/old/new\n将第一个 old 替换为 new\n\n\n修改 2\ns/old/new/g\n将全部的 old 替换为 new\n\n\n修改 3\ns/old/new/2g\n将第两个开始的所有的 old 替换为 new\n\n\n修改 4\ns/old/new/ig\n将全部的 old 替换为 new ，忽略大小写\n\n\n测试 1测试代码#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# sed 中的 command 练习\n\nfilepath&#x3D;$(\n    cd &quot;$(dirname &quot;$0&quot;)&quot;\n    pwd\n)\ntestpath&#x3D;&quot;$&#123;filepath&#125;&#x2F;test_dir&quot;\nfilename&#x3D;&quot;$&#123;testpath&#125;&#x2F;passwd&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction test_sed_command() &#123;\n    mkdir -p $&#123;testpath&#125; &amp;&amp; cd $&#123;testpath&#125;\n\n    # 删除一行 delete\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 删除 passwd 文件中一行 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 删除 passwd 文件中的第 1 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;1d&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除前打印 passwd 的第 1 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1p&quot; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除 passwd 文件中的第 1 行 ... $&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;1d&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 的第 1 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1p&quot; $&#123;filename&#125;\n\n    # 删除多行 1\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 删除 passwd 文件中多行 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除前打印 passwd 的第 1 - 3 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1,3p&quot; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除 passwd 文件中的第 1 - 3 行 ... $&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;1,3d&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 的第 1 - 3 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1,3p&quot; $&#123;filename&#125;\n\n    # 删除多行 2\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 删除 passwd 文件中多行 2 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除前打印 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ... $&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;d&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;p&#39; $&#123;filename&#125;\n\n    # 删除多行 3\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 删除 passwd 文件中多行 3 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除前打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接删除 passwd 中从 mail 开始的行到 ftp 开始的行 ... $&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;d&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&#39; $&#123;filename&#125;\n\n    # 行后追加内容 append\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ passwd 文件行后追加内容 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;root:\\&#x2F;root&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接在 passwd 中包含 root:&#x2F;root 的行后追加 This is user which can login system ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;root:\\&#x2F;root&#x2F;a This is user which can login system&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中 1 - 3 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1,3p&quot; $&#123;filename&#125;\n\n    # 行前插入内容 insert\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ passwd 文件行前插入内容 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接在 passwd 中从 mail 开始的行到 ftp 开始的行前添加 This is nologin user  ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;i This is nologin user&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&#39; $&#123;filename&#125;\n\n    # 将指定文件内容追加到匹配行后 rewrite\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ passwd 文件中添加指定文件的内容 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo &quot;This is user which can login system&quot; &gt;&gt;rewrite\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;root:\\&#x2F;root&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接在 passwd 中包含 root:&#x2F;root 的行后追加 rewrite 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;root:\\&#x2F;root&#x2F;r rewrite&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 中 1 - 3 行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &quot;1,3p&quot; $&#123;filename&#125;\n\n    # 将匹配到的行内容保存到其它文件 write\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ passwd 文件中的内容追加到指定文件中 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n &#39;&#x2F;root:\\&#x2F;root&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接将 passwd 中包含 root:&#x2F;root 的行内容保存到 write 文件中 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;&#x2F;root:\\&#x2F;root&#x2F;w write&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 write 文件 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n write\n\n    # 替换第一个\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 替换 passwd 中第一个 root 为 jaime ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 root 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;root&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接将 passwd 文件中的第一个 root 替换为 jaime ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;root&#x2F;jaime&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 jaime 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;jaime&#39; $&#123;filename&#125;\n\n    # 替换第二个开始的所有的 root\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 替换 passwd 中从第二个开始的所有的 root 为 jaime ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 root 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;root&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接将 passwd 文件中从第二个开始的所有的 root 为 jaime ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;root&#x2F;jaime&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 jaime 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;jaime&#39; $&#123;filename&#125;\n\n    # 替换所有的 root\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 替换 passwd 中所有的 root 为 jaime ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 root 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;root&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接将 passwd 文件中的所有的 root 替换为 jaime ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;root&#x2F;jaime&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 jaime 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;jaime&#39; $&#123;filename&#125;\n\n    # 替换所有的 ssh\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 替换 passwd 中所有的 ssh|SSH 为 http ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 ssh|SSH 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n -E &#39;ssh|SSH&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 ssh|SSH 的行(sed) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -n -r &#39;&#x2F;ssh|SSH&#x2F;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 直接将 passwd 文件中的所有的 ssh|SSH 替换为 jaime(不区分大小写) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;ssh&#x2F;http&#x2F;ig&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 http 的行(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n &#39;http&#39; $&#123;filename&#125;\n\n    # 显示行号\n    rm -f passwd &amp;&amp; cp -f &#x2F;etc&#x2F;passwd .&#x2F;\n    echo -e &quot;\\n$&#123;Red_font_prefix&#125;------ 查找 passwd 文件中包含 zsh 或者 bash 的行并显示行号 ------$&#123;Font_color_suffix&#125;\\n&quot;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 zsh 或者 bash 的行并显示行号(使用 sed 扩展正则表达式) ...$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -n -r &#39;&#x2F;bash|zsh&#x2F;&#x3D;;p&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 passwd 文件中包含 zsh 或者 bash 的行并显示行号(grep) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; grep -n -E &#39;bash|zsh&#39; $&#123;filename&#125;\n\n    # 删除测试文件\n    cd $&#123;filepath&#125; &amp;&amp; rm -rf test_dir&#x2F;\n\n&#125;\ntest_sed_command\n\n运行结果------ 删除 passwd 文件中一行 ------\n\n 删除 passwd 文件中的第 1 行 ...\n 直接删除前打印 passwd 的第 1 行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n 直接删除 passwd 文件中的第 1 行 ...\n 打印 passwd 的第 1 行 ...\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\n\n------ 删除 passwd 文件中多行 ------\n\n 直接删除前打印 passwd 的第 1 - 3 行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\n 直接删除 passwd 文件中的第 1 - 3 行 ...\n 打印 passwd 的第 1 - 3 行 ...\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\n\n------ 删除 passwd 文件中多行 2 ------\n\n 直接删除前打印 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ...\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\nnobody:x:99:99:Nobody:&#x2F;:&#x2F;sbin&#x2F;nologin\nsystemd-network:x:192:192:systemd Network Management:&#x2F;:&#x2F;sbin&#x2F;nologin\ndbus:x:81:81:System message bus:&#x2F;:&#x2F;sbin&#x2F;nologin\npolkitd:x:999:998:User for polkitd:&#x2F;:&#x2F;sbin&#x2F;nologin\nsshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\npostfix:x:89:89::&#x2F;var&#x2F;spool&#x2F;postfix:&#x2F;sbin&#x2F;nologin\nchrony:x:998:996::&#x2F;var&#x2F;lib&#x2F;chrony:&#x2F;sbin&#x2F;nologin\nrpc:x:32:32:Rpcbind Daemon:&#x2F;var&#x2F;lib&#x2F;rpcbind:&#x2F;sbin&#x2F;nologin\ngluster:x:997:993:GlusterFS daemons:&#x2F;run&#x2F;gluster:&#x2F;sbin&#x2F;nologin\nlibstoragemgmt:x:996:992:daemon account for libstoragemgmt:&#x2F;var&#x2F;run&#x2F;lsm:&#x2F;sbin&#x2F;nologin\nqemu:x:107:107:qemu user:&#x2F;:&#x2F;sbin&#x2F;nologin\nunbound:x:995:991:Unbound DNS resolver:&#x2F;etc&#x2F;unbound:&#x2F;sbin&#x2F;nologin\nsaslauth:x:994:76:Saslauthd user:&#x2F;run&#x2F;saslauthd:&#x2F;sbin&#x2F;nologin\ntss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin\nusbmuxd:x:113:113:usbmuxd user:&#x2F;:&#x2F;sbin&#x2F;nologin\nsaned:x:993:990:SANE scanner daemon user:&#x2F;usr&#x2F;share&#x2F;sane:&#x2F;sbin&#x2F;nologin\ncolord:x:992:988:User for colord:&#x2F;var&#x2F;lib&#x2F;colord:&#x2F;sbin&#x2F;nologin\nabrt:x:173:173::&#x2F;etc&#x2F;abrt:&#x2F;sbin&#x2F;nologin\ngeoclue:x:991:987:User for geoclue:&#x2F;var&#x2F;lib&#x2F;geoclue:&#x2F;sbin&#x2F;nologin\nntp:x:38:38::&#x2F;etc&#x2F;ntp:&#x2F;sbin&#x2F;nologin\nsetroubleshoot:x:990:986::&#x2F;var&#x2F;lib&#x2F;setroubleshoot:&#x2F;sbin&#x2F;nologin\nrpcuser:x:29:29:RPC Service User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nnfsnobody:x:65534:65534:Anonymous NFS User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nrtkit:x:172:172:RealtimeKit:&#x2F;proc:&#x2F;sbin&#x2F;nologin\npulse:x:171:171:PulseAudio System Daemon:&#x2F;var&#x2F;run&#x2F;pulse:&#x2F;sbin&#x2F;nologin\nsssd:x:989:983:User for sssd:&#x2F;:&#x2F;sbin&#x2F;nologin\nradvd:x:75:75:radvd user:&#x2F;:&#x2F;sbin&#x2F;nologin\ngdm:x:42:42::&#x2F;var&#x2F;lib&#x2F;gdm:&#x2F;sbin&#x2F;nologin\ngnome-initial-setup:x:988:982::&#x2F;run&#x2F;gnome-initial-setup&#x2F;:&#x2F;sbin&#x2F;nologin\ntcpdump:x:72:72::&#x2F;:&#x2F;sbin&#x2F;nologin\navahi:x:70:70:Avahi mDNS&#x2F;DNS-SD Stack:&#x2F;var&#x2F;run&#x2F;avahi-daemon:&#x2F;sbin&#x2F;nologin\nnginx:x:987:981:Nginx web server:&#x2F;var&#x2F;lib&#x2F;nginx:&#x2F;sbin&#x2F;nologin\n 直接删除 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ...\n 打印 passwd 中包含 &#x2F;sbin&#x2F;nologin 的行 ...\n\n------ 删除 passwd 文件中多行 3 ------\n\n 直接删除前打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\n 直接删除 passwd 中从 mail 开始的行到 ftp 开始的行 ...\n 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...\n\n------ passwd 文件行后追加内容 ------\n\n 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n 直接在 passwd 中包含 root:&#x2F;root 的行后追加 This is user which can login system ...\n 打印 passwd 中 1 - 3 行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nThis is user which can login system\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\n\n------ passwd 文件行前插入内容 ------\n\n 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\n 直接在 passwd 中从 mail 开始的行到 ftp 开始的行前添加 This is nologin user  ...\n 打印 passwd 中从 mail 开始的行到 ftp 开始的行 ...\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\nThis is nologin user\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\nThis is nologin user\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nThis is nologin user\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\n\n------ passwd 文件中添加指定文件的内容 ------\n\n 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n 直接在 passwd 中包含 root:&#x2F;root 的行后追加 rewrite 文件内容 ...\n 打印 passwd 中 1 - 3 行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nThis is user which can login system\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\n\n------ passwd 文件中的内容追加到指定文件中 ------\n\n 直接追加前打印 passwd 中包含 root:&#x2F;root 的行 ...\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n 直接将 passwd 中包含 root:&#x2F;root 的行内容保存到 write 文件中 ...\n 打印 write 文件 ...\n     1    root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n\n------ 替换 passwd 中第一个 root 为 jaime ------\n\n 打印 passwd 文件中包含 root 的行(grep) ...\n1:root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n 直接将 passwd 文件中的第一个 root 替换为 jaime ...\n 打印 passwd 文件中包含 jaime 的行(grep) ...\n1:jaime:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;jaime:&#x2F;sbin&#x2F;nologin\n\n------ 替换 passwd 中从第二个开始的所有的 root 为 jaime ------\n\n 打印 passwd 文件中包含 root 的行(grep) ...\n1:root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n 直接将 passwd 文件中从第二个开始的所有的 root 为 jaime ...\n 打印 passwd 文件中包含 jaime 的行(grep) ...\n1:root:x:0:0:jaime:&#x2F;jaime:&#x2F;bin&#x2F;zsh\n\n------ 替换 passwd 中所有的 root 为 jaime ------\n\n 打印 passwd 文件中包含 root 的行(grep) ...\n1:root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\n 直接将 passwd 文件中的所有的 root 替换为 jaime ...\n 打印 passwd 文件中包含 jaime 的行(grep) ...\n1:jaime:x:0:0:jaime:&#x2F;jaime:&#x2F;bin&#x2F;zsh\n10:operator:x:11:0:operator:&#x2F;jaime:&#x2F;sbin&#x2F;nologin\n\n------ 替换 passwd 中所有的 ssh|SSH 为 http ------\n\n 打印 passwd 文件中包含 ssh|SSH 的行(grep) ...\n17:sshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\n 打印 passwd 文件中包含 ssh|SSH 的行(sed) ...\nsshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\n 直接将 passwd 文件中的所有的 ssh|SSH 替换为 jaime(不区分大小写) ...\n 打印 passwd 文件中包含 http 的行(grep) ...\n17:httpd:x:74:74:Privilege-separated http:&#x2F;var&#x2F;empty&#x2F;httpd:&#x2F;sbin&#x2F;nologin\n\n------ 查找 passwd 文件中包含 zsh 或者 bash 的行并显示行号 ------\n\n 打印 passwd 文件中包含 zsh 或者 bash 的行并显示行号(使用 sed 扩展正则表达式) ...\n\n1\nroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\nbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin\ndaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin\nadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin\nlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin\nsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync\nshutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown\nhalt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt\nmail:x:8:12:mail:&#x2F;var&#x2F;spool&#x2F;mail:&#x2F;sbin&#x2F;nologin\noperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin\ngames:x:12:100:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin\nftp:x:14:50:FTP User:&#x2F;var&#x2F;ftp:&#x2F;sbin&#x2F;nologin\nnobody:x:99:99:Nobody:&#x2F;:&#x2F;sbin&#x2F;nologin\nsystemd-network:x:192:192:systemd Network Management:&#x2F;:&#x2F;sbin&#x2F;nologin\ndbus:x:81:81:System message bus:&#x2F;:&#x2F;sbin&#x2F;nologin\npolkitd:x:999:998:User for polkitd:&#x2F;:&#x2F;sbin&#x2F;nologin\nsshd:x:74:74:Privilege-separated SSH:&#x2F;var&#x2F;empty&#x2F;sshd:&#x2F;sbin&#x2F;nologin\npostfix:x:89:89::&#x2F;var&#x2F;spool&#x2F;postfix:&#x2F;sbin&#x2F;nologin\nchrony:x:998:996::&#x2F;var&#x2F;lib&#x2F;chrony:&#x2F;sbin&#x2F;nologin\n20\nryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh\nrpc:x:32:32:Rpcbind Daemon:&#x2F;var&#x2F;lib&#x2F;rpcbind:&#x2F;sbin&#x2F;nologin\ngluster:x:997:993:GlusterFS daemons:&#x2F;run&#x2F;gluster:&#x2F;sbin&#x2F;nologin\nlibstoragemgmt:x:996:992:daemon account for libstoragemgmt:&#x2F;var&#x2F;run&#x2F;lsm:&#x2F;sbin&#x2F;nologin\nqemu:x:107:107:qemu user:&#x2F;:&#x2F;sbin&#x2F;nologin\nunbound:x:995:991:Unbound DNS resolver:&#x2F;etc&#x2F;unbound:&#x2F;sbin&#x2F;nologin\nsaslauth:x:994:76:Saslauthd user:&#x2F;run&#x2F;saslauthd:&#x2F;sbin&#x2F;nologin\ntss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin\nusbmuxd:x:113:113:usbmuxd user:&#x2F;:&#x2F;sbin&#x2F;nologin\nsaned:x:993:990:SANE scanner daemon user:&#x2F;usr&#x2F;share&#x2F;sane:&#x2F;sbin&#x2F;nologin\ncolord:x:992:988:User for colord:&#x2F;var&#x2F;lib&#x2F;colord:&#x2F;sbin&#x2F;nologin\nabrt:x:173:173::&#x2F;etc&#x2F;abrt:&#x2F;sbin&#x2F;nologin\ngeoclue:x:991:987:User for geoclue:&#x2F;var&#x2F;lib&#x2F;geoclue:&#x2F;sbin&#x2F;nologin\nntp:x:38:38::&#x2F;etc&#x2F;ntp:&#x2F;sbin&#x2F;nologin\nsetroubleshoot:x:990:986::&#x2F;var&#x2F;lib&#x2F;setroubleshoot:&#x2F;sbin&#x2F;nologin\nrpcuser:x:29:29:RPC Service User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nnfsnobody:x:65534:65534:Anonymous NFS User:&#x2F;var&#x2F;lib&#x2F;nfs:&#x2F;sbin&#x2F;nologin\nrtkit:x:172:172:RealtimeKit:&#x2F;proc:&#x2F;sbin&#x2F;nologin\npulse:x:171:171:PulseAudio System Daemon:&#x2F;var&#x2F;run&#x2F;pulse:&#x2F;sbin&#x2F;nologin\nsssd:x:989:983:User for sssd:&#x2F;:&#x2F;sbin&#x2F;nologin\nradvd:x:75:75:radvd user:&#x2F;:&#x2F;sbin&#x2F;nologin\ngdm:x:42:42::&#x2F;var&#x2F;lib&#x2F;gdm:&#x2F;sbin&#x2F;nologin\ngnome-initial-setup:x:988:982::&#x2F;run&#x2F;gnome-initial-setup&#x2F;:&#x2F;sbin&#x2F;nologin\ntcpdump:x:72:72::&#x2F;:&#x2F;sbin&#x2F;nologin\navahi:x:70:70:Avahi mDNS&#x2F;DNS-SD Stack:&#x2F;var&#x2F;run&#x2F;avahi-daemon:&#x2F;sbin&#x2F;nologin\nnginx:x:987:981:Nginx web server:&#x2F;var&#x2F;lib&#x2F;nginx:&#x2F;sbin&#x2F;nologin\n 打印 passwd 文件中包含 zsh 或者 bash 的行并显示行号(grep) ...\n1:root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;zsh\n20:ryan:x:1000:1000:ryan:&#x2F;home&#x2F;ryan:&#x2F;bin&#x2F;zsh\n\n反向引用&amp; 和 \\1 引用模式匹配到的整个串。区别：\n\n&amp; 只能表示匹配到的完整字符串，只能引用整个字符串。\n\\1 可以使用 () 将匹配到的不需要改变的部分括起来，小括号需要转义。（例如：如果只需要替换匹配到的字符串的一部分，这是只能使用 \\1 ，然后将不需要改变的部分用括号括起来，替换时只替换括号外的）\n\n测试 2需求描述例如：有一个文件 str，内容如下。\nhadAAp is a bigdata frame.\nSpark hadBBp Kaffa.\nPaper on hadCCp.\nGoogle hadEEp.\n\n\n将文件中的 hadAAp, hadBBp, … hadEEp 后面加后缀 s。（hadAAp -&gt; hadAAps, hadEEp -&gt; hadEEps）\n将上一步改变后的文件中的 hadAAps, hadBBps, … hadEEps 后面加后缀 O 。（hadAAps -&gt; hadAApsO, hadEEps -&gt; hadEEpsO）\n将上一步改变后的文件中的 hadAApsO, hadBBpsO, … hadEEpsO 全部替换为 hadoop。\n将上一步改变后的文件中的 hadoop 全部替换为 HADOOP。\n\n思路分析\n替换两种操作：\n$ sed -i &#39;s&#x2F;had..p&#x2F;&amp;s&#x2F;g&#39; str # had..p 表示匹配 hadAAp, hadBBp, ... hadEEp 字符串，&amp; 引用 had..p 串\n$ sed -i &#39;s&#x2F;\\(had..p\\)&#x2F;\\1s&#x2F;g&#39; str # had..p 表示匹配 hadAAp, hadBBp, ... hadEEp 字符串，\\1 引用 had..p 串\n匹配模式中存在变量时，建议使用双引号。\n\n\n代码编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# sed 中的 command 练习 2\n\nfilepath&#x3D;$(\n    cd &quot;$(dirname &quot;$0&quot;)&quot;\n    pwd\n)\ntestpath&#x3D;&quot;$&#123;filepath&#125;&#x2F;test_dir&quot;\nfilename&#x3D;&quot;$&#123;testpath&#125;&#x2F;str&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction sed_str() &#123;\n    # 生成测试文件\n    mkdir -p $&#123;testpath&#125; &amp;&amp; cd $&#123;testpath&#125;\n    cat &gt;&gt;$&#123;filename&#125; &lt;&lt;EOF\nhadAAp is a bigdata frame.\nSpark hadBBp Kaffa.\nPaper on hadCCp.\nGoogle hadEEp.\nEOF\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadAAp, hadBBp, ... hadEEp 后面加后缀 s ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;had..p&#x2F;&amp;s&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadAAps, hadBBps, ... hadEEps 后面加后缀 O ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;\\(had..ps\\)&#x2F;\\1O&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadAApsO, hadBBpsO, ... hadEEpsO 全部替换为 hadoop ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;\\(had\\).....&#x2F;\\1oop&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    old_str&#x3D;&quot;hadoop&quot;\n    new_str&#x3D;&quot;HADOOP&quot;\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadoop 全部替换为 HADOOP(使用单引号操作,变量不加单引号) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;$&#123;old_str&#125;&#x2F;$&#123;new_str&#125;&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    sed -i &quot;s&#x2F;HADOOP&#x2F;hadoop&#x2F;g&quot; $&#123;filename&#125;\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadoop 全部替换为 HADOOP(使用双引号操作) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &quot;s&#x2F;$&#123;old_str&#125;&#x2F;$&#123;new_str&#125;&#x2F;g&quot; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    sed -i &quot;s&#x2F;HADOOP&#x2F;hadoop&#x2F;g&quot; $&#123;filename&#125;\n    echo -e &quot;$&#123;Red_font_prefix&#125; 将 str 文件中的 hadoop 全部替换为 HADOOP(使用单引号操作,变量加单引号) ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; sed -i &#39;s&#x2F;&#39;$&#123;old_str&#125;&#39;&#x2F;&#39;$&#123;new_str&#125;&#39;&#x2F;g&#39; $&#123;filename&#125;\n    echo -e &quot;$&#123;Green_font_prefix&#125; 打印 str 文件内容 ...$&#123;Font_color_suffix&#125;&quot; &amp;&amp; cat -n $&#123;filename&#125;\n\n    # 删除测试文件夹\n    cd $&#123;filepath&#125; &amp;&amp; rm -rf test_dir&#x2F;\n&#125;\n\nsed_str\n\n脚本执行打印 str 文件内容 ...\n    1    hadAAp is a bigdata frame.\n    2    Spark hadBBp Kaffa.\n    3    Paper on hadCCp.\n    4    Google hadEEp.\n将 str 文件中的 hadAAp, hadBBp, ... hadEEp 后面加后缀 s ...\n打印 str 文件内容 ...\n    1    hadAAps is a bigdata frame.\n    2    Spark hadBBps Kaffa.\n    3    Paper on hadCCps.\n    4    Google hadEEps.\n将 str 文件中的 hadAAps, hadBBps, ... hadEEps 后面加后缀 O ...\n打印 str 文件内容 ...\n    1    hadAApsO is a bigdata frame.\n    2    Spark hadBBpsO Kaffa.\n    3    Paper on hadCCpsO.\n    4    Google hadEEpsO.\n将 str 文件中的 hadAApsO, hadBBpsO, ... hadEEpsO 全部替换为 hadoop ...\n打印 str 文件内容 ...\n    1    hadoop is a bigdata frame.\n    2    Spark hadoop Kaffa.\n    3    Paper on hadoop.\n    4    Google hadoop.\n将 str 文件中的 hadoop 全部替换为 HADOOP(使用单引号操作,变量不加单引号) ...\n打印 str 文件内容 ...\n    1    hadoop is a bigdata frame.\n    2    Spark hadoop Kaffa.\n    3    Paper on hadoop.\n    4    Google hadoop.\n将 str 文件中的 hadoop 全部替换为 HADOOP(使用双引号操作) ...\n打印 str 文件内容 ...\n    1    HADOOP is a bigdata frame.\n    2    Spark HADOOP Kaffa.\n    3    Paper on HADOOP.\n    4    Google HADOOP.\n将 str 文件中的 hadoop 全部替换为 HADOOP(使用单引号操作,变量加单引号) ...\n打印 str 文件内容 ...\n    1    HADOOP is a bigdata frame.\n    2    Spark HADOOP Kaffa.\n    3    Paper on HADOOP.\n    4    Google HADOOP.\n\n利用 sed 查找文件内容查询命令对照表\n\n\n命令\n含义\n\n\n\n1p\n打印第 1 行内容\n\n\n1,10p\n打印第 1 行到第 10 行内容\n\n\n1,1+5p\n打印第 1 行到第 6 行内容\n\n\n/pattern1/p\n打印包含 pattern1 的行内容\n\n\n/patttern1/,/pattern2/p\n打印从包含 pattern1 到 包含 pattern2 的行内容\n\n\n/pattern1/,10p\n打印从包含 patttern1 到第 10 行的内容\n\n\n10,/pattern1/p\n打印第 10 行到包含 pattern1 的行内容\n\n\n1. 打印 &#x2F;etc&#x2F;passwd 文件中第 20 行内容\n\n   sed -n &#39;20p&#39; &#x2F;etc&#x2F;passwd\n\n2. 打印 &#x2F;etc&#x2F;passwd 文件中第 8 - 20 行内容\n\n   sed -n &#39;8, 20p&#39; &#x2F;etc&#x2F;passwd\n\n3. 打印 &#x2F;etc&#x2F;passwd 文件中第 8, +5 行内容\n\n   sed -n &#39;8, +5p&#39; &#x2F;etc&#x2F;passwd\n\n4. 打印 &#x2F;etc&#x2F;passwd 文件中包含 zsh 或者 bash 的行\n\n   sed -n -e &#39;&#x2F;bash&#x2F;p&#39; -e &#39;&#x2F;zsh&#x2F;p&#39; &#x2F;etc&#x2F;passwd\n\n5. 打印 &#x2F;etc&#x2F;passwd 文件中包含 zsh 或者 bash 的行(使用扩展正则表达式)\n\n   sed -n -r &#39;&#x2F;bash|zsh&#x2F;p&#39; &#x2F;etc&#x2F;passwd\n\n6. 打印 &#x2F;etc&#x2F;passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行\n\n   sed -n &#39;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#39; &#x2F;etc&#x2F;passwd\n\n7. 打印 &#x2F;etc&#x2F;passwd 中以 root 开始的行\n\n   sed -n &#39;&#x2F;^root&#x2F;p&#39; &#x2F;etc&#x2F;passwd\n\n8. 打印 &#x2F;etc&#x2F;passwd 中从 mail 开始的行到 ftp 开始的行\n\n   sed -n &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;p&#39; &#x2F;etc&#x2F;passwd\n\n9. 打印 &#x2F;etc&#x2F;passwd 中从第 4 行到以 shutdown 结束的行\n\n   sed -n &#39;4,&#x2F;shutdown$&#x2F;p&#39; &#x2F;etc&#x2F;passwd\n\n10. 打印 &#x2F;etc&#x2F;passwd 中从以 bin 开始的行到第 6 行\n\n    sed -n &#39;&#x2F;^bin&#x2F;,6p&#39; &#x2F;etc&#x2F;passwd\n\n练习需求描述处理一个类似 MySQL 配置文件 my.cnf 的文本，示例如下。\n# this is read by the standalone daemon and embedded servers\n[client]\nport &#x3D; 3306\nsocket &#x3D; &#x2F;tmp&#x2F;mysql.socket\n\n# this Segment Fot server\n[server]\ninnodb_buffer_pool_size &#x3D; 91750M\ninnodb_buffer_pool_instances &#x3D; 8\ninnodb_buffer_pool_load_at_startup &#x3D; 1\ninnodb_buffer_pool_dump_at_shutdown &#x3D; 1\ninnodb_data_file_path &#x3D; ibdata1:1G:autoextend\ninnodb_flush_log_at_trx_commit &#x3D; 1\ninnodb_log_buffer_size &#x3D; 32M\ninnodb_log_file_size &#x3D; 2G\ninnodb_log_files_in_group &#x3D; 2\ninnodb_max_undo_log_size &#x3D; 4G\ninnodb_undo_directory &#x3D; undolog\ninnodb_undo_tablespaces &#x3D; 95\n\n# this is only for the mysqld standalone daemon\n[mysqld]\nport &#x3D; 3306\nsocket &#x3D; &#x2F;tmp&#x2F;mysql.sock\nbasedir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql\ndatadir &#x3D; &#x2F;data&#x2F;mysql\npid-file &#x3D; &#x2F;data&#x2F;mysql&#x2F;mysql.pid\nuser &#x3D; mysql\nbind-address &#x3D; 0.0.0.0\nsort_buffer_size &#x3D; 16M\njoin_buffer_size &#x3D; 16M\nthread_cache_size &#x3D; 3000\ninteractive_timeout &#x3D; 600\n\n# this Segment For mysqld safe\n[mysqld safe]\nlog-error &#x3D; &#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.log\npid-file &#x3D; &#x2F;var&#x2F;run&#x2F;mariadb&#x2F;mariadb.pid\nmax_connections &#x3D; 1000\nopen_files_limit &#x3D; 65535\nthread_stack &#x3D; 512K\nexternal-locking &#x3D; FALSE\nmax_allowed_packet &#x3D; 32M\n\n# this is only for embedded server\n[embedded]\ngtid_mode &#x3D; on\nenforce_gtid_consistency &#x3D; 1\nlog_slave_updates\nslave-rows-search-algorithms &#x3D; &#39;INDEX_SCAN, HASH_SCAN&#39;\nbinlog_format &#x3D; row\nbinlog_checksum &#x3D; 1\nrelay_log_recovery &#x3D; 1\nrelay-log-purge &#x3D; 1\n\n# use this group for options that older servers don&#39;t understand\n[mysqld-5.5]\nkey_buffer_size &#x3D; 32M\nread_buffer_size &#x3D; 8M\nread_rnd_buffer_size &#x3D; 16M\nbulk_insert_buffer_size &#x3D; 64M\nmyisam_sort_buffer_size &#x3D; 128M\nmyisam_max_sort_file_size &#x3D; 10G\nmyisam_repair_threads &#x3D; 1\nlock_wait_timeout &#x3D; 3600\nexplicit_defaults_for_timestamp &#x3D; 1\n\n编写脚本实现以下功能：\n\n输出文件有几个段；\n针对每个段可以统计配置参数总个数。\n\n预想输出结果：\n第 1 个配置项:      client 共有  2 个配置项.\n第 2 个配置项:      server 共有 12 个配置项.\n第 3 个配置项:      mysqld 共有 11 个配置项.\n第 4 个配置项: mysqld_safe 共有  7 个配置项.\n第 5 个配置项:    embedded 共有  8 个配置项.\n第 6 个配置项:  mysqld-5.5 共有  9 个配置项.\n\n ------ my.cnf 共有 6 个段. ------\n\n思路分析\nfunction get_all_segment 获取所有段；\n\ngrep 直接获取 [client] 字符串 grep -E &quot;^\\[&quot; $&#123;filename&#125;\n\nsed 直接获取 [client] 字符串, 然后将 ‘[‘ ‘]’ 替换为空 sed -n &quot;/\\[.*\\]/p&quot; $&#123;filename&#125; | sed -e &quot;s/\\[//g&quot; -e &quot;s/\\]//g&quot;\n\n直接使用 sed 反向引用获取 [client] 字符串内的 client 字段 sed -n -e &quot;s/\\[\\(.*\\)\\]/\\1/gp&quot; $&#123;filename&#125;\n\n\n\nfunction count_items_in_segment 统计配置参数总个数；\n\ngrep：使用 sed &quot;//,//p&quot; 区间匹配, 然后排除 [client]、空行、注释行, 最后统计。 sed -n &quot;/\\[&quot;$1&quot;\\]/,/\\[.*\\]/p&quot; $&#123;filename&#125; | grep -v &quot;\\[.*\\]&quot; | grep -v &quot;^\\#&quot; | grep -v &quot;^$&quot; | wc -l)\nsed：使用 sed &quot;//,//p&quot; 区间匹配, 然后排除 [client]、空行、注释行, 最后统计。$(sed -n &quot;/\\[&quot;$1&quot;\\]/,/\\[.*\\]/p&quot; $&#123;filename&#125; | grep -v &quot;\\[.*\\]&quot; | grep -v &quot;^\\#&quot; | grep -v &quot;^$&quot; | wc -l)\n\n\n\n测试代码#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 处理 my.cnf 文件\n# 1. function get_all_segment 输出文件有几个段；\n# 2. function count_items_in_segment 针对每个段可以统计配置参数总个数。\n\nfilepath&#x3D;$(\n    cd &quot;$(dirname &quot;$0&quot;)&quot;\n    pwd\n)\nfilename&#x3D;&quot;$&#123;filepath&#125;&#x2F;my.cnf&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Blue_font_prefix&#x3D;&quot;\\033[34m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction create_my_cnf() &#123;\n\n    cat &gt;$&#123;filename&#125; &lt;&lt;EOF\n# this is read by the standalone daemon and embedded servers\n[client]\nport &#x3D; 3306\nsocket &#x3D; &#x2F;tmp&#x2F;mysql.socket\n\n# this Segment Fot server\n[server]\ninnodb_buffer_pool_size &#x3D; 91750M\ninnodb_buffer_pool_instances &#x3D; 8\ninnodb_buffer_pool_load_at_startup &#x3D; 1\ninnodb_buffer_pool_dump_at_shutdown &#x3D; 1\ninnodb_data_file_path &#x3D; ibdata1:1G:autoextend\ninnodb_flush_log_at_trx_commit &#x3D; 1\ninnodb_log_buffer_size &#x3D; 32M\ninnodb_log_file_size &#x3D; 2G\ninnodb_log_files_in_group &#x3D; 2\ninnodb_max_undo_log_size &#x3D; 4G\ninnodb_undo_directory &#x3D; undolog\ninnodb_undo_tablespaces &#x3D; 95\n\n# this is only for the mysqld standalone daemon\n[mysqld]\nport &#x3D; 3306\nsocket &#x3D; &#x2F;tmp&#x2F;mysql.sock\nbasedir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql\ndatadir &#x3D; &#x2F;data&#x2F;mysql\npid-file &#x3D; &#x2F;data&#x2F;mysql&#x2F;mysql.pid\nuser &#x3D; mysql\nbind-address &#x3D; 0.0.0.0\nsort_buffer_size &#x3D; 16M\njoin_buffer_size &#x3D; 16M\nthread_cache_size &#x3D; 3000\ninteractive_timeout &#x3D; 600\n\n# this Segment For mysqld safe\n[mysqld_safe]\nlog-error &#x3D; &#x2F;var&#x2F;log&#x2F;mariadb&#x2F;mariadb.log\npid-file &#x3D; &#x2F;var&#x2F;run&#x2F;mariadb&#x2F;mariadb.pid\nmax_connections &#x3D; 1000\nopen_files_limit &#x3D; 65535\nthread_stack &#x3D; 512K\nexternal-locking &#x3D; FALSE\nmax_allowed_packet &#x3D; 32M\n\n# this is only for embedded server\n[embedded]\ngtid_mode &#x3D; on\nenforce_gtid_consistency &#x3D; 1\nlog_slave_updates\nslave-rows-search-algorithms &#x3D; &#39;INDEX_SCAN, HASH_SCAN&#39;\nbinlog_format &#x3D; row\nbinlog_checksum &#x3D; 1\nrelay_log_recovery &#x3D; 1\nrelay-log-purge &#x3D; 1\n\n# use this group for options that older servers don&#39;t understand\n[mysqld-5.5]\nkey_buffer_size &#x3D; 32M\nread_buffer_size &#x3D; 8M\nread_rnd_buffer_size &#x3D; 16M\nbulk_insert_buffer_size &#x3D; 64M\nmyisam_sort_buffer_size &#x3D; 128M\nmyisam_max_sort_file_size &#x3D; 10G\nmyisam_repair_threads &#x3D; 1\nlock_wait_timeout &#x3D; 3600\nexplicit_defaults_for_timestamp &#x3D; 1\nEOF\n&#125;\n\nfunction get_all_segment() &#123;\n\n    # grep 直接获取 [client] 字符串\n    # grep -E &quot;^\\[&quot; $&#123;filename&#125;\n\n    # sed 直接获取 [client] 字符串, 然后将 &#39;[&#39; &#39;]&#39; 替换为空\n    # sed -n &quot;&#x2F;\\[.*\\]&#x2F;p&quot; $&#123;filename&#125; | sed -e &quot;s&#x2F;\\[&#x2F;&#x2F;g&quot; -e &quot;s&#x2F;\\]&#x2F;&#x2F;g&quot;\n\n    #直接使用 sed 反向引用获取 [client] 字符串内的 client 字段\n    # sed -n -e &quot;s&#x2F;\\[\\(.*\\)\\]&#x2F;\\1&#x2F;gp&quot; $&#123;filename&#125;\n\n    echo -e &quot;$(sed -n -e &quot;s&#x2F;\\[\\(.*\\)\\]&#x2F;\\1&#x2F;gp&quot; $&#123;filename&#125;)&quot;\n\n&#125;\n\nfunction count_items_in_segment_grep() &#123;\n\n    # 使用 sed &quot;&#x2F;&#x2F;,&#x2F;&#x2F;p&quot; 区间匹配, 然后排除 [client]、空行、注释行, 最后统计\n    echo -e &quot;$(sed -n &quot;&#x2F;\\[&quot;$1&quot;\\]&#x2F;,&#x2F;\\[.*\\]&#x2F;p&quot; $&#123;filename&#125; | grep -v &quot;\\[.*\\]&quot; | grep -v &quot;^\\#&quot; | grep -v &quot;^$&quot; | wc -l)&quot;\n&#125;\n\nfunction count_items_in_segment_sed() &#123;\n\n    # 使用 sed &quot;&#x2F;&#x2F;,&#x2F;&#x2F;p&quot; 区间匹配, 然后排除 [client]、空行、注释行, 最后统计\n    echo -e &quot;$(sed -n &quot;&#x2F;\\[&quot;$1&quot;\\]&#x2F;,&#x2F;\\[.*\\]&#x2F;p&quot; $&#123;filename&#125; | sed &#39;&#x2F;\\[.*\\]&#x2F;d&#39; | sed &#39;&#x2F;^\\#&#x2F;d&#39; | sed &#39;&#x2F;^$&#x2F;d&#39; | wc -l)&quot;\n&#125;\n\nfunction main() &#123;\n\n    create_my_cnf\n    index&#x3D;0\n    for segment in $(get_all_segment); do\n        index&#x3D;$(($&#123;index&#125; + 1))\n        # echo -e &quot;第 $&#123;index&#125; 个配置项：$&#123;segment&#125; 共有 $(count_items_in_segment_sed $&#123;segment&#125;) 个配置项.&quot;\n        # echo -e &quot;第 $&#123;index&#125; 个配置项：$&#123;segment&#125; 共有 $(count_items_in_segment_grep $&#123;segment&#125;) 个配置项.&quot;\n        printf &quot;$&#123;Green_font_prefix&#125;第 %d 个配置项: %12s 共有 %2d 个配置项.(sed)$&#123;Font_color_suffix&#125;\\n&quot; $&#123;index&#125; $&#123;segment&#125; $(count_items_in_segment_sed $&#123;segment&#125;)\n        printf &quot;$&#123;Blue_font_prefix&#125;第 %d 个配置项: %12s 共有 %2d 个配置项.(grep)$&#123;Font_color_suffix&#125;\\n&quot; $&#123;index&#125; $&#123;segment&#125; $(count_items_in_segment_grep $&#123;segment&#125;)\n    done\n    echo -e &quot;\\n ------ my.cnf 共有 $&#123;index&#125; 个段. ------&quot;\n\n    # 删除文件\n    rm -rf $&#123;filename&#125;\n&#125;\n\nmain\n\n运行结果第 1 个配置项:      client 共有  2 个配置项.(sed)\n第 1 个配置项:      client 共有  2 个配置项.(grep)\n第 2 个配置项:      server 共有 12 个配置项.(sed)\n第 2 个配置项:      server 共有 12 个配置项.(grep)\n第 3 个配置项:      mysqld 共有 11 个配置项.(sed)\n第 3 个配置项:      mysqld 共有 11 个配置项.(grep)\n第 4 个配置项: mysqld_safe 共有  7 个配置项.(sed)\n第 4 个配置项: mysqld_safe 共有  7 个配置项.(grep)\n第 5 个配置项:    embedded 共有  8 个配置项.(sed)\n第 5 个配置项:    embedded 共有  8 个配置项.(grep)\n第 6 个配置项:  mysqld-5.5 共有  9 个配置项.(sed)\n第 6 个配置项:  mysqld-5.5 共有  9 个配置项.(grep)\n\n ------ my.cnf 共有 6 个段. ------\n\n利用 sed 删除文件内容删除命令对照表\n\n\n命令\n含义\n\n\n\n1d\n删除第 1 行内容\n\n\n1,10d\n删除第 1 行到第 10 行内容\n\n\n1,1+5d\n删除第 1 行到第 6 行内容\n\n\n/pattern1/d\n删除包含 pattern1 的行内容\n\n\n/patttern1/,/pattern2/d\n删除从包含 pattern1 到 包含 pattern2 的行内容\n\n\n/pattern1/,10d\n删除从包含 patttern1 到第 10 行的内容\n\n\n10,/pattern1/d\n删除第 10 行到包含 pattern1 的行内容\n\n\n1. 删除 &#x2F;etc&#x2F;passwd 文件中第 20 行内容\n\n   sed -i &#39;20d&#39; &#x2F;etc&#x2F;passwd\n\n2. 删除 &#x2F;etc&#x2F;passwd 文件中第 8 - 20 行内容\n\n   sed -i &#39;8, 20d&#39; &#x2F;etc&#x2F;passwd\n\n3. 删除 &#x2F;etc&#x2F;passwd 文件中第 8, +5 行内容\n\n   sed -i &#39;8, +5d&#39; &#x2F;etc&#x2F;passwd\n\n4. 删除 &#x2F;etc&#x2F;passwd 文件中包含 zsh 或者 bash 的行\n\n   sed -i -e &#39;&#x2F;bash&#x2F;d&#39; -e &#39;&#x2F;zsh&#x2F;d&#39; &#x2F;etc&#x2F;passwd\n\n5. 删除 &#x2F;etc&#x2F;passwd 文件中包含 zsh 或者 bash 的行(使用扩展正则表达式)\n\n   sed -i -r &#39;&#x2F;bash|zsh&#x2F;d&#39; &#x2F;etc&#x2F;passwd\n\n6. 删除 &#x2F;etc&#x2F;passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行\n\n   sed -i &#39;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#39; &#x2F;etc&#x2F;passwd\n\n7. 删除 &#x2F;etc&#x2F;passwd 中以 root 开始的行\n\n   sed -i &#39;&#x2F;^root&#x2F;d&#39; &#x2F;etc&#x2F;passwd\n\n8. 删除 &#x2F;etc&#x2F;passwd 中从 mail 开始的行到 ftp 开始的行\n\n   sed -i &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;d&#39; &#x2F;etc&#x2F;passwd\n\n9. 删除 &#x2F;etc&#x2F;passwd 中从第 4 行到以 shutdown 结束的行\n\n   sed -i &#39;4,&#x2F;shutdown$&#x2F;d&#39; &#x2F;etc&#x2F;passwd\n\n10. 删除 &#x2F;etc&#x2F;passwd 中从以 bin 开始的行到第 6 行\n\n    sed -i &#39;&#x2F;^bin&#x2F;,6d&#39; &#x2F;etc&#x2F;passwd\n\n练习需求描述处理 nginx 的配置文件 nginx.conf ，文件内容如下：\n# For more information on configuration, see:\n#   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;\n#   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;\n\nuser nginx;\nworker_processes auto;\nerror_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;\npid &#x2F;run&#x2F;nginx.pid;\n\n# Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.\ninclude &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;\n\nevents &#123;\n    worker_connections 1024;\n&#125;\n\nhttp &#123;\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\n    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;\n    default_type        application&#x2F;octet-stream;\n\n    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.\n    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include\n    # for more information.\n    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;\n\n    server &#123;\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n\n        # Load configuration files for the default server block.\n        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n\n        location &#x2F; &#123;\n        &#125;\n\n        error_page 404 &#x2F;404.html;\n        location &#x3D; &#x2F;404.html &#123;\n        &#125;\n\n        error_page 500 502 503 504 &#x2F;50x.html;\n        location &#x3D; &#x2F;50x.html &#123;\n        &#125;\n    &#125;\n\n# Settings for a TLS enabled server.\n#\n#    server &#123;\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n#\n#        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;\n#        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n#\n#        location &#x2F; &#123;\n#        &#125;\n#\n#        error_page 404 &#x2F;404.html;\n#        location &#x3D; &#x2F;404.html &#123;\n#        &#125;\n#\n#        error_page 500 502 503 504 &#x2F;50x.html;\n#        location &#x3D; &#x2F;50x.html &#123;\n#        &#125;\n#    &#125;\n\n&#125;\n\n编写脚本实现以下功能：\n\n删除配置文件中的所有注释行和空行。\n在配置文件中所有不以 # 开头的行前添加 * 符号。注意：以 # 开头的行不添加。\n\n思路分析function delete_blank_comment_line # 删除空行和注释行\nfunction add_star_before_line # 行前添加 * 号\n\n\n删除注释行。注释行分两种：\n以 # 号开头的行：sed -i &#39;/^\\#/d&#39; $&#123;filename&#125;\n以 空格开头(一个或多个) + # 号的行：sed -i &#39;/[:blank:]*\\#/d&#39; $&#123;filename&#125;\n\n\n删除空行。空行：sed -i &#39;/^$/d&#39; $&#123;filename&#125;\n不以 # 开头的行前添加 * 符号：sed -i &#39;s/\\(^[^\\#]\\)/*\\1/g&#39; $&#123;filename&#125;\n空行前添加 * 符号：sed -i &#39;s/^$/*&amp;/g&#39; $&#123;filename&#125;\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 处理 nginx.conf 文件\n# 1. function delete_blank_comment_line 删除空行和注释行\n# 2. function add_star_before_line 行前添加 * 号\n\nfilepath&#x3D;&quot;$PWD&quot;\nfilename&#x3D;&quot;$&#123;filepath&#125;&#x2F;nginx.conf&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Blue_font_prefix&#x3D;&quot;\\033[34m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction create_nginx_conf() &#123;\n    cat &gt;$&#123;filename&#125; &lt;&lt;EOF\n# For more information on configuration, see:\n#   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;\n#   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;\n\nuser nginx;\nworker_processes auto;\nerror_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;\npid &#x2F;run&#x2F;nginx.pid;\n\n# Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.\ninclude &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;\n\nevents &#123;\n    worker_connections 1024;\n&#125;\n\nhttp &#123;\n    log_format  main  &#39;\\$remote_addr - \\$remote_user [\\$time_local] &quot;\\$request&quot; &#39;\n                      &#39;\\$status \\$body_bytes_sent &quot;\\$http_referer&quot; &#39;\n                      &#39;&quot;\\$http_user_agent&quot; &quot;\\$http_x_forwarded_for&quot;&#39;;\n\n    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;\n    default_type        application&#x2F;octet-stream;\n\n    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.\n    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include\n    # for more information.\n    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;\n\n    server &#123;\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  _;\n        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n\n        # Load configuration files for the default server block.\n        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n\n        location &#x2F; &#123;\n        &#125;\n\n        error_page 404 &#x2F;404.html;\n        location &#x3D; &#x2F;404.html &#123;\n        &#125;\n\n        error_page 500 502 503 504 &#x2F;50x.html;\n        location &#x3D; &#x2F;50x.html &#123;\n        &#125;\n    &#125;\n\n# Settings for a TLS enabled server.\n#\n#    server &#123;\n#        listen       443 ssl http2 default_server;\n#        listen       [::]:443 ssl http2 default_server;\n#        server_name  _;\n#        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n#\n#        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;\n#        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;\n#        ssl_session_cache shared:SSL:1m;\n#        ssl_session_timeout  10m;\n#        ssl_ciphers HIGH:!aNULL:!MD5;\n#        ssl_prefer_server_ciphers on;\n#\n#        # Load configuration files for the default server block.\n#        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n#\n#        location &#x2F; &#123;\n#        &#125;\n#\n#        error_page 404 &#x2F;404.html;\n#        location &#x3D; &#x2F;404.html &#123;\n#        &#125;\n#\n#        error_page 500 502 503 504 &#x2F;50x.html;\n#        location &#x3D; &#x2F;50x.html &#123;\n#        &#125;\n#    &#125;\n\n&#125;\nEOF\n&#125;\n\nfunction delete_blank_comment_line() &#123;\n    create_nginx_conf\n    echo -e &quot;$&#123;Blue_font_prefix&#125; ------ 删除空行和注释行后的 nginx.conf 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot;\n    sed -i &#39;&#x2F;[:blank:]*\\#&#x2F;d;&#x2F;^$&#x2F;d&#39; $&#123;filename&#125;\n    cat -n $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;\n&#125;\n\nfunction add_star_before_line() &#123;\n    create_nginx_conf\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 删除空行和注释行后的 nginx.conf 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot;\n    sed -i &#39;s&#x2F;\\(^[^\\#]\\)&#x2F;*\\1&#x2F;g&#39; $&#123;filename&#125;\n    sed -i &#39;s&#x2F;^$&#x2F;*&amp;&#x2F;g&#39; $&#123;filename&#125;\n    cat -n $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;\n&#125;\n\ndelete_blank_comment_line\nadd_star_before_line\n\n运行结果------ 删除空行和注释行后的 nginx.conf 文件内容 ------\n\n    1    user nginx;\n    2    worker_processes auto;\n    3    error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;\n    4    pid &#x2F;run&#x2F;nginx.pid;\n    5    include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;\n    6    events &#123;\n    7        worker_connections 1024;\n    8    &#125;\n    9    http &#123;\n   10        log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n   11                          &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n   12                          &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n   13        access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;\n   14        sendfile            on;\n   15        tcp_nopush          on;\n   16        tcp_nodelay         on;\n   17        keepalive_timeout   65;\n   18        types_hash_max_size 2048;\n   19        include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;\n   20        default_type        application&#x2F;octet-stream;\n   21        include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;\n   22        server &#123;\n   23            listen       80 default_server;\n   24            listen       [::]:80 default_server;\n   25            server_name  _;\n   26            root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n   27            include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n   28            location &#x2F; &#123;\n   29            &#125;\n   30            error_page 404 &#x2F;404.html;\n   31            location &#x3D; &#x2F;404.html &#123;\n   32            &#125;\n   33            error_page 500 502 503 504 &#x2F;50x.html;\n   34            location &#x3D; &#x2F;50x.html &#123;\n   35            &#125;\n   36        &#125;\n   37    &#125;\n\n------ 删除空行和注释行后的 nginx.conf 文件内容 ------\n\n    1    # For more information on configuration, see:\n    2    #   * Official English Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;\n    3    #   * Official Russian Documentation: http:&#x2F;&#x2F;nginx.org&#x2F;ru&#x2F;docs&#x2F;\n    4    *\n    5    *user nginx;\n    6    *worker_processes auto;\n    7    *error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log;\n    8    *pid &#x2F;run&#x2F;nginx.pid;\n    9    *\n   10    # Load dynamic modules. See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx&#x2F;README.dynamic.\n   11    *include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;\n   12    *\n   13    *events &#123;\n   14    *    worker_connections 1024;\n   15    *&#125;\n   16    *\n   17    *http &#123;\n   18    *    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n   19    *                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n   20    *                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n   21    *\n   22    *    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log  main;\n   23    *\n   24    *    sendfile            on;\n   25    *    tcp_nopush          on;\n   26    *    tcp_nodelay         on;\n   27    *    keepalive_timeout   65;\n   28    *    types_hash_max_size 2048;\n   29    *\n   30    *    include             &#x2F;etc&#x2F;nginx&#x2F;mime.types;\n   31    *    default_type        application&#x2F;octet-stream;\n   32    *\n   33    *    # Load modular configuration files from the &#x2F;etc&#x2F;nginx&#x2F;conf.d directory.\n   34    *    # See http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;ngx_core_module.html#include\n   35    *    # for more information.\n   36    *    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;\n   37    *\n   38    *    server &#123;\n   39    *        listen       80 default_server;\n   40    *        listen       [::]:80 default_server;\n   41    *        server_name  _;\n   42    *        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n   43    *\n   44    *        # Load configuration files for the default server block.\n   45    *        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n   46    *\n   47    *        location &#x2F; &#123;\n   48    *        &#125;\n   49    *\n   50    *        error_page 404 &#x2F;404.html;\n   51    *        location &#x3D; &#x2F;404.html &#123;\n   52    *        &#125;\n   53    *\n   54    *        error_page 500 502 503 504 &#x2F;50x.html;\n   55    *        location &#x3D; &#x2F;50x.html &#123;\n   56    *        &#125;\n   57    *    &#125;\n   58    *\n   59    # Settings for a TLS enabled server.\n   60    #\n   61    #    server &#123;\n   62    #        listen       443 ssl http2 default_server;\n   63    #        listen       [::]:443 ssl http2 default_server;\n   64    #        server_name  _;\n   65    #        root         &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;\n   66    #\n   67    #        ssl_certificate &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;server.crt&quot;;\n   68    #        ssl_certificate_key &quot;&#x2F;etc&#x2F;pki&#x2F;nginx&#x2F;private&#x2F;server.key&quot;;\n   69    #        ssl_session_cache shared:SSL:1m;\n   70    #        ssl_session_timeout  10m;\n   71    #        ssl_ciphers HIGH:!aNULL:!MD5;\n   72    #        ssl_prefer_server_ciphers on;\n   73    #\n   74    #        # Load configuration files for the default server block.\n   75    #        include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;\n   76    #\n   77    #        location &#x2F; &#123;\n   78    #        &#125;\n   79    #\n   80    #        error_page 404 &#x2F;404.html;\n   81    #        location &#x3D; &#x2F;404.html &#123;\n   82    #        &#125;\n   83    #\n   84    #        error_page 500 502 503 504 &#x2F;50x.html;\n   85    #        location &#x3D; &#x2F;50x.html &#123;\n   86    #        &#125;\n   87    #    &#125;\n   88    *\n   89    *&#125;\n\n利用 sed 修改文件内容修改命令对照表\n\n\n命令\n含义\n\n\n\n1s/old/new\n替换第 1 行内容中第一个 old 替换为 new\n\n\n1,10s/old/new\n替换第 1 行到第 10 行内容中第一个 old 替换为 new\n\n\n1,1+5s/old/new\n替换第 1 行到第 6 行内容中第一个 old 替换为 new\n\n\n/pattern1/s/old/new\n替换包含 pattern1 的行内容中第一个 old 替换为 new\n\n\n/patttern1/,/pattern2/s/old/new\n替换从包含 pattern1 到 包含 pattern2 的行内容中第一个 old 替换为 new\n\n\n/pattern1/,10s/old/new\n替换从包含 patttern1 到第 10 行的内容中第一个 old 替换为 new\n\n\n10,/pattern1/s/old/new\n替换第 10 行到包含 pattern1 的行内容中第一个 old 替换为 new\n\n\n1. 替换 passwd 文件中第 1 行内容中第一个 root 替换为 ROOT\n\n   sed -i &#39;1s&#x2F;root&#x2F;ROOT&#39; passwd\n\n2. 替换 passwd 文件中第 5 - 10 行内容中所有的 &#x2F;sbin&#x2F;nologin 替换为 &#x2F;bin&#x2F;bash\n\n   sed -i &#39;5, 20s&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;\\&#x2F;bin\\&#x2F;bash&#x2F;g&#39; passwd\n\n3. 替换 passwd 文件中第 5, +5 行( 5 - 11 )内容中所有的 games 替换为 movies(games 在 11 行)\n\n   sed -i &#39;5, +5s&#x2F;games&#x2F;movies&#x2F;g&#39; passwd\n\n4. 替换 passwd 文件中包含 zsh 或者 bash 的行内容中所有的 zsh|bash 替换为 powershell\n\n   sed -i -e &#39;&#x2F;bash&#x2F;s&#x2F;bash&#x2F;powershell&#x2F;g&#39; -e &#39;&#x2F;zsh&#x2F;s&#x2F;zsh&#x2F;powershell&#x2F;g&#39; passwd\n\n5. 替换 passwd 文件中包含 zsh 或者 bash 的行内容中所有的 bin 替换为 BIN(使用扩展正则表达式)\n\n   sed -i -r &#39;&#x2F;bash|zsh&#x2F;s&#x2F;bin&#x2F;bin&#x2F;g&#39; passwd\n\n6. 替换 passwd 文件中包含 &#x2F;var&#x2F;spool&#x2F;mail 的行内容中第一个 &#x2F;sbin&#x2F;nologin 替换为 &#x2F;bin&#x2F;zsh\n\n   sed -i &#39;\\&#x2F;var\\&#x2F;spool\\&#x2F;mail&#x2F;s&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;\\&#x2F;bin\\&#x2F;zsh&#39; passwd\n\n7. 替换 passwd 中以 root 开始的行内容中所有的 root 替换为 jaime\n\n   sed -i &#39;&#x2F;^root&#x2F;s&#x2F;root&#x2F;jaime&#x2F;g&#39; passwd\n\n8. 替换 passwd 中从 mail 开始的行到 ftp 开始的行中所有的 &#x2F;sbin&#x2F;nologin 替换为 &#x2F;bin&#x2F;bash\n\n   sed -i &#39;&#x2F;^mail&#x2F;,&#x2F;^ftp&#x2F;s&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;\\&#x2F;bin\\&#x2F;bash&#x2F;g&#39; passwd\n\n9. 替换 passwd 中从第 4 行到以 shutdown 结束的行中所有的 nologin 替换为 zsh\n\n   sed -i &#39;4,&#x2F;shutdown$&#x2F;s&#x2F;nologin&#x2F;zsh&#x2F;g&#39; passwd\n\n10. 替换 passwd 中从以 bin 开始的行到第 6 行中第 2 个开始所有的 bin 替换为 BIN\n\n    sed -i &#39;&#x2F;^bin&#x2F;,6s&#x2F;bin&#x2F;BIN&#x2F;2g&#39; passwd\n\n练习需求描述处理密码文件 password ，文件内容如下：\nLUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\nG.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\nL8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\nJB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\nluff-famed-assault-zooid-heighten-mummer-epitome-coke\nlawmaker-rerun-ratchet-grotto-floodlit-glitter-mock-nebulous\nvermin-opine-bunk-piquant-crabby-masterly-halcyon-oatmeal\nBuyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\nBreadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\nWill-olin-acrylic-try-stasis-salivate-hummock-convolve\n\n编写脚本实现以下功能：\n\n删除文件中的数字。\n小写字母转大写。\n大写字母转小写。\n字母大小写反转。\n\n思路分析1. function delete_number # 删除文件中的数字\n2. function to_uppercase # 小写字母转大写\n3. function to_lowercase # 大写字母转小写\n4. function reverse_string_case # 字母大小写反转\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 处理 password 文件\n# 1. function delete_number # 删除文件中的数字\n# 2. function to_uppercase 小写字母转大写\n# 3. function to_lowercase 大写字母转小写\n# 4. function reverse_string_case 字母大小写反转\n\nfilepath&#x3D;&quot;$PWD&quot;\nfilename&#x3D;&quot;$&#123;filepath&#125;&#x2F;password&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Blue_font_prefix&#x3D;&quot;\\033[34m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction create_password() &#123;\n    cat &gt;$&#123;filename&#125; &lt;&lt;EOF\nLUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\nG.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\nL8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\nJB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\nluff-famed-assault-zooid-heighten-mummer-epitome-coke\nlawmaker-rerun-ratchet-grotto-floodlit-glitter-mock-nebulous\nvermin-opine-bunk-piquant-crabby-masterly-halcyon-oatmeal\nBuyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\nBreadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\nWill-olin-acrylic-try-stasis-salivate-hummock-convolve\nEOF\n&#125;\nfunction delete_number() &#123;\n    create_password &amp;&amp; cp $&#123;filename&#125; $&#123;filename&#125;.bak\n    echo -e &quot;$&#123;Green_font_prefix&#125; ------ 删除数字后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;[0-9]*&#x2F;&#x2F;g&#39; $&#123;filename&#125;\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n&#125;\n\nfunction to_uppercase() &#123;\n    create_password &amp;&amp; cp $&#123;filename&#125; $&#123;filename&#125;.bak\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 小写字母转大写后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;[a-z]&#x2F;\\u&amp;&#x2F;g&#39; $&#123;filename&#125;\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n\n    create_password &amp;&amp; cp $&#123;filename&#125; $&#123;filename&#125;.bak\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 第一个小写字母转大写后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;\\b[a-z]&#x2F;\\u&amp;&#x2F;g&#39; $&#123;filename&#125;\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n&#125;\n\nfunction to_lowercase() &#123;\n    create_password &amp;&amp; cp $&#123;filename&#125; $&#123;filename&#125;.bak\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 大写字母转小写后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;[A-Z]&#x2F;\\l&amp;&#x2F;g&#39; $&#123;filename&#125;\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n\n    create_password &amp;&amp; cp $&#123;filename&#125; $&#123;filename&#125;.bak\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 第一个大写字母转小写后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; sed -i &#39;s&#x2F;\\b[A-Z]&#x2F;\\l&amp;&#x2F;g&#39; $&#123;filename&#125;\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n&#125;\n\nfunction reverse_string_case() &#123;\n    create_password\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125; ------ 大小写互转后的 password 文件内容 ------ $&#123;Font_color_suffix&#125;\\n&quot;\n    cat $&#123;filename&#125; | tr &#39;[a-zA-Z]&#39; &#39;[A-Za-z]&#39; &gt;$&#123;filename&#125;.bak\n    diff $&#123;filename&#125;.bak $&#123;filename&#125;\n    rm -rf $&#123;filename&#125;.bak $&#123;filename&#125;\n&#125;\n\ndelete_number\nto_uppercase\nto_lowercase\nreverse_string_case\n\n运行结果 ------ 删除数字后的 password 文件内容 ------\n\n1,6c1,6\n&lt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&lt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&lt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&lt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&lt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&lt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n---\n&gt; LUD?N\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?NZJ-psgC?QHwY,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&gt; G.t*pk_pbAAWBmJpZMZXoGRaeMZab.nVrtAEM~a?_my@CWg!eEpwMdiTz\n&gt; ,Pyv?]jEU,NPAaX\\&gt;cR#x,wgxX\\&gt;HCD\\&gt;@TXFNkzawsNud~PpuZiPemGh&#125;rxbx\n&gt; dmJBswvFxwo&#125;mNFmqtmZ:BmLzLdQE+QH&#125;,YEZwuVET.iZtLmu,bHz\n&gt; Li+k\\)vQHfF:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^?mXPssYGMT@E_XwBCG-B\n&gt; JB\\&gt;&#x3D;H!usea!fwPZQWnt,,HtGJo&#x3D;cV%t*!N-mQep\\&gt;]A*TMJ\\&gt;%FU_%^W!\n\n ------ 小写字母转大写后的 password 文件内容 ------\n\n1,12c1,12\n&lt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&lt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&lt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&lt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&lt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&lt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n&lt; luff-famed-assault-zooid-heighten-mummer-epitome-coke\n&lt; lawmaker-rerun-ratchet-grotto-floodlit-glitter-mock-nebulous\n&lt; vermin-opine-bunk-piquant-crabby-masterly-halcyon-oatmeal\n&lt; Buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&lt; Breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&lt; Will-olin-acrylic-try-stasis-salivate-hummock-convolve\n---\n&gt; LUD?N52\\&gt;*BJQ.KG*&#x3D;ZRBBY#GJVQV?N1ZJ-PSGC?QHW77Y2,F%U~UC:]&#125;P:J!XMJPO&#x3D;\n&gt; G.T*PK_PBAAWBM2JPZMZXOGR2AEMZAB6.NVR9TAE04M~A?8_MY@CWG!EEP5WM1DITZ\n&gt; ,PYV?]JEU,NPAA7X\\&gt;1CR#X5,WGXX\\&gt;HCD3\\&gt;@TX6FNKZA5WS7NUD~PPUZIPEMGH&#125;RXBX\n&gt; 37DMJBS3WVFXWO&#125;M76NFM91QTM1Z:BML6ZLDQE+QH&#125;,Y531EZWUVET.IZTLMU,BH0Z\n&gt; L8I+K\\)7VQHFF6:,TZDZH\\)A_ETZ.NJ-\\&gt;NXTU.CC,:OW^9?MXPSSYGM99T@E_XWBCG-B\n&gt; JB\\&gt;&#x3D;H!US6E12A!6FWPZQWNT,,HT8GJO&#x3D;CV%T5*!N-48MQEP\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n&gt; LUFF-FAMED-ASSAULT-ZOOID-HEIGHTEN-MUMMER-EPITOME-COKE\n&gt; LAWMAKER-RERUN-RATCHET-GROTTO-FLOODLIT-GLITTER-MOCK-NEBULOUS\n&gt; VERMIN-OPINE-BUNK-PIQUANT-CRABBY-MASTERLY-HALCYON-OATMEAL\n&gt; BUYOUT-MOLY-NITROGEN-KNOWHOW-FROTH-UNTIL-SAUNTER-HURD\n&gt; BREADTH-ORLANDO-URUGUAY-LAMPOON-CANE-ALBUMEN-ANTENNAE-JAPAN\n&gt; WILL-OLIN-ACRYLIC-TRY-STASIS-SALIVATE-HUMMOCK-CONVOLVE\n\n ------ 第一个小写字母转大写后的 password 文件内容 ------\n\n1,12c1,12\n&lt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&lt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&lt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&lt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&lt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&lt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n&lt; luff-famed-assault-zooid-heighten-mummer-epitome-coke\n&lt; lawmaker-rerun-ratchet-grotto-floodlit-glitter-mock-nebulous\n&lt; vermin-opine-bunk-piquant-crabby-masterly-halcyon-oatmeal\n&lt; Buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&lt; Breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&lt; Will-olin-acrylic-try-stasis-salivate-hummock-convolve\n---\n&gt; LUD?N52\\&gt;*BjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-PsgC?QHw77Y2,F%U~Uc:]&#125;P:J!XmjPo&#x3D;\n&gt; G.T*Pk_pbAAWBm2JpZMZXoGR2aeMZab6.NVr9tAE04M~A?8_my@CWg!EEp5wM1diTz\n&gt; ,Pyv?]JEU,NPAa7X\\&gt;1cR#X5,WgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;Rxbx\n&gt; 37dmJBs3wvFxwo&#125;M76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.IZtLmu,BH0z\n&gt; L8i+K\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;NXtU.CC,:Ow^9?MXPssYGM99T@E_XwBCG-B\n&gt; JB\\&gt;&#x3D;H!Us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;CV%T5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n&gt; Luff-Famed-Assault-Zooid-Heighten-Mummer-Epitome-Coke\n&gt; Lawmaker-Rerun-Ratchet-Grotto-Floodlit-Glitter-Mock-Nebulous\n&gt; Vermin-Opine-Bunk-Piquant-Crabby-Masterly-Halcyon-Oatmeal\n&gt; Buyout-Moly-Nitrogen-Knowhow-Froth-Until-Saunter-Hurd\n&gt; Breadth-Orlando-Uruguay-Lampoon-Cane-Albumen-Antennae-Japan\n&gt; Will-Olin-Acrylic-Try-Stasis-Salivate-Hummock-Convolve\n\n ------ 大写字母转小写后的 password 文件内容 ------\n\n1,6c1,6\n&lt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&lt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&lt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&lt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&lt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&lt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n---\n&gt; lud?n52\\&gt;*bjq.kg*&#x3D;zrbby#gjvqv?n1zj-psgc?qhw77y2,f%u~uc:]&#125;p:j!xmjpo&#x3D;\n&gt; g.t*pk_pbaawbm2jpzmzxogr2aemzab6.nvr9tae04m~a?8_my@cwg!eep5wm1ditz\n&gt; ,pyv?]jeu,npaa7x\\&gt;1cr#x5,wgxx\\&gt;hcd3\\&gt;@tx6fnkza5ws7nud~ppuzipemgh&#125;rxbx\n&gt; 37dmjbs3wvfxwo&#125;m76nfm91qtm1z:bml6zldqe+qh&#125;,y531ezwuvet.iztlmu,bh0z\n&gt; l8i+k\\)7vqhff6:,tzdzh\\)a_etz.nj-\\&gt;nxtu.cc,:ow^9?mxpssygm99t@e_xwbcg-b\n&gt; jb\\&gt;&#x3D;h!us6e12a!6fwpzqwnt,,ht8gjo&#x3D;cv%t5*!n-48mqep\\&gt;]0a*7tmj\\&gt;%fu_%^w4!\n10,12c10,12\n&lt; Buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&lt; Breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&lt; Will-olin-acrylic-try-stasis-salivate-hummock-convolve\n---\n&gt; buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&gt; breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&gt; will-olin-acrylic-try-stasis-salivate-hummock-convolve\n\n ------ 第一个大写字母转小写后的 password 文件内容 ------\n\n1,6c1,6\n&lt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&lt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&lt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&lt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&lt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&lt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n---\n&gt; lUD?n52\\&gt;*bjQ.kg*&#x3D;zrbbY#gJvQv?n1ZJ-psgC?qHw77Y2,f%u~uc:]&#125;p:j!xmjPo&#x3D;\n&gt; g.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@cWg!eEp5wM1diTz\n&gt; ,pyv?]jEU,nPAa7X\\&gt;1cR#x5,wgxX\\&gt;hCD3\\&gt;@tX6FNkza5ws7Nud~ppuZiPemGh&#125;rxbx\n&gt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:bmL6zLdQE+qH&#125;,y531EZwuVET.iZtLmu,bH0z\n&gt; l8i+k\\)7vQHfF6:,tZdZh\\)a_eTz.nJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@e_XwBCG-b\n&gt; jB\\&gt;&#x3D;h!us6e12a!6fwPZQWnt,,ht8GJo&#x3D;cV%t5*!n-48mQep\\&gt;]0A*7TMJ\\&gt;%fU_%^w4!\n10,12c10,12\n&lt; Buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&lt; Breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&lt; Will-olin-acrylic-try-stasis-salivate-hummock-convolve\n---\n&gt; buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&gt; breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&gt; will-olin-acrylic-try-stasis-salivate-hummock-convolve\n\n ------ 大小写互转后的 password 文件内容 ------\n\n1,12c1,12\n&lt; lud?n52\\&gt;*BJq.kG*&#x3D;zRBBy#gjVqV?n1zj-PSGc?qhW77y2,f%U~uC:]&#125;P:J!xMJpO&#x3D;\n&lt; g.T*PK_PBaawbM2jPzmzxOgr2AEmzAB6.NvR9Tae04m~A?8_MY@cwG!EeP5Wm1DItZ\n&lt; ,pYV?]Jeu,npaA7x\\&gt;1Cr#X5,WGXx\\&gt;hcd3\\&gt;@tx6fnKZA5WS7nUD~pPUzIpEMgH&#125;RXBX\n&lt; 37DMjbS3WVfXWO&#125;M76nfM91QTM1z:bMl6ZlDqe+qh&#125;,y531ezWUvet.IzTlMU,Bh0Z\n&lt; l8I+K\\)7VqhFf6:,tzDzH\\)a_EtZ.nj-\\&gt;NxTu.Cc,:OW^9?MxpSSygm99t@e_xWbcg-b\n&lt; jb\\&gt;&#x3D;h!US6E12A!6FWpzqwNT,,hT8gjO&#x3D;Cv%T5*!n-48MqEP\\&gt;]0a*7tmj\\&gt;%fu_%^w4!\n&lt; LUFF-FAMED-ASSAULT-ZOOID-HEIGHTEN-MUMMER-EPITOME-COKE\n&lt; LAWMAKER-RERUN-RATCHET-GROTTO-FLOODLIT-GLITTER-MOCK-NEBULOUS\n&lt; VERMIN-OPINE-BUNK-PIQUANT-CRABBY-MASTERLY-HALCYON-OATMEAL\n&lt; bUYOUT-MOLY-NITROGEN-KNOWHOW-FROTH-UNTIL-SAUNTER-HURD\n&lt; bREADTH-ORLANDO-URUGUAY-LAMPOON-CANE-ALBUMEN-ANTENNAE-JAPAN\n&lt; wILL-OLIN-ACRYLIC-TRY-STASIS-SALIVATE-HUMMOCK-CONVOLVE\n---\n&gt; LUD?N52\\&gt;*bjQ.Kg*&#x3D;ZrbbY#GJvQv?N1ZJ-psgC?QHw77Y2,F%u~Uc:]&#125;p:j!XmjPo&#x3D;\n&gt; G.t*pk_pbAAWBm2JpZMZXoGR2aeMZab6.nVr9tAE04M~a?8_my@CWg!eEp5wM1diTz\n&gt; ,Pyv?]jEU,NPAa7X\\&gt;1cR#x5,wgxX\\&gt;HCD3\\&gt;@TX6FNkza5ws7Nud~PpuZiPemGh&#125;rxbx\n&gt; 37dmJBs3wvFxwo&#125;m76NFm91qtm1Z:BmL6zLdQE+QH&#125;,Y531EZwuVET.iZtLmu,bH0z\n&gt; L8i+k\\)7vQHfF6:,TZdZh\\)A_eTz.NJ-\\&gt;nXtU.cC,:ow^9?mXPssYGM99T@E_XwBCG-B\n&gt; JB\\&gt;&#x3D;H!us6e12a!6fwPZQWnt,,Ht8GJo&#x3D;cV%t5*!N-48mQep\\&gt;]0A*7TMJ\\&gt;%FU_%^W4!\n&gt; luff-famed-assault-zooid-heighten-mummer-epitome-coke\n&gt; lawmaker-rerun-ratchet-grotto-floodlit-glitter-mock-nebulous\n&gt; vermin-opine-bunk-piquant-crabby-masterly-halcyon-oatmeal\n&gt; Buyout-moly-nitrogen-knowhow-froth-until-saunter-hurd\n&gt; Breadth-orlando-uruguay-lampoon-cane-albumen-antennae-japan\n&gt; Will-olin-acrylic-try-stasis-salivate-hummock-convolve\n\n利用 sed 追加文件内容追加命令对照表\n\n\n命令\n含义\n\n\n\na\n匹配行后追加\n\n\ni\n匹配行前增加\n\n\nr\n外部文件读入，匹配行后追加\n\n\nw\n匹配行写入外部文件\n\n\n示例详解1. a 匹配行前追加 append\n\n    - passwd 文件第 10 行后面追加 &quot;Add Line Behind.&quot;\n        sed -i &quot;10a Add Line Behind.&quot; passwd\n    - passwd 文件第 10 - 20 行后追加 &quot;Test Line Behind.&quot;\n        sed -i &quot;10, 20a Test line Behind.&quot; passwd\n    - passwd 文件包含 &#x2F;bin&#x2F;bash 的行后面追加 &quot;Insert Line For &#x2F;bin&#x2F;bash Behind.&quot;\n        sed -i &quot;&#x2F;\\&#x2F;bin\\&#x2F;bash&#x2F;a Insert Line For &#x2F;bin&#x2F;bash Behind.&quot; passwd\n\n2. i 匹配行前插入 insert\n\n    - passwd 文件中以 yarn 开头的行前插入 &quot;Add Line Before.&quot;\n        sed -i &quot;&#x2F;^yarn&#x2F;i Add Line Before.&quot;\n    - passwd 文件每一行前面插入 &quot;Insert Line Before Every Line.&quot;\n        sed -i &quot;i Insert Line Before Every Line.&quot;\n\n3. r 外部文件读入，匹配行后追加\n\n    - 将 &#x2F;etc&#x2F;fstab 文件中的内容追加到 passwd 文件中第 20 行后面\n        sed -i &quot;20r &#x2F;etc&#x2F;fstab&quot; passwd\n    - 将 &#x2F;etc&#x2F;inittab 文件内容追加到 passwd 文件中包含 &#x2F;sbin&#x2F;nologin 的行后\n        sed -i &quot;&#x2F;\\&#x2F;sbin\\&#x2F;nologin&#x2F;r &#x2F;etc&#x2F;inittab&quot; passwd\n    - 将 &#x2F;etc&#x2F;vconsole.conf 文件内容追加到 passwd 文件中以 ftp 开头的行到第 18 行\n        sed -i &quot;&#x2F;^ftp&#x2F;,18r &#x2F;etc&#x2F;vconsole.conf&quot; passwd\n\n4. w 匹配行写入外部文件\n\n    - 将 passwd 文件中包含 &#x2F;bin&#x2F;bash 的行追加到 &#x2F;tmp&#x2F;sed.txt 文件中\n        sed -i &quot;&#x2F;\\&#x2F;bin\\&#x2F;bash&#x2F;w &#x2F;tmp&#x2F;sed.txt&quot; passwd\n    - 将 passwd 文件中第 10 行开始到以 hdfs 开头的行区间内的所有内容全部追加到 &#x2F;tmp&#x2F;sed-1.txt 文件中\n        sed -i &quot;10,&#x2F;^hdfs&#x2F;w &#x2F;tmp&#x2F;sed-1.txt&quot; passwd\n\n\n\n\n\n\n\n\n\n\n本文代码：06-shell\n","slug":"2020-10-03-06_文本处理 sed","date":"2020-10-03T11:24:26.000Z","categories_index":"Linux","tags_index":"Linux,Shell","author_index":"JaimeZeng"},{"id":"a2787fdbc6396b9d6a932d66753ffcfb","title":"文本处理命令 grep","content":"grepgrep 是”Global Regular Expressions Print“的首字母缩写词，意为全局正则表达式打印。grep 是一个逐行扫描指定文件或文件的程序，返回包含模式的行。模式是一种表达式，它通过将字符解释为元字符来指定一组字符串。例如，星号元字符（*）被解释为”前面元素的零个或多个”。这使用户能够在 grep 命令中键入一系列短字符和元字符，以使计算机向我们显示哪些文件匹配的行。\n语法格式|        | 语法                                    || —— | ————————————— | ———————— || 第一种 | grep [option] [pattern] [file1,file2] || 第二种 | command                                | grep [option] [pattren] |\n参数\n\n\n选项\n含义\n\n\n\n-v\n不显示匹配行信息\n\n\n-i\n搜索时忽略大小写\n\n\n-n\n显示行号\n\n\n-r\n递归搜素\n\n\n-E\n支持扩展正则表达式\n\n\n-F\n不按正则表达式匹配，按照字符串字面意思匹配\n\n\n-c\n只显示匹配行总数，不显示具体内容\n\n\n-w\n匹配整词\n\n\n-x\n匹配整行\n\n\n-l\n只显示文件名，不显示匹配行内容\n\n\n-s\n不显示错误信息\n\n\n练习测试脚本#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# grep 练习\n\nfilepath&#x3D;$(\n    cd &quot;$(dirname &quot;$0&quot;)&quot;\n    pwd\n)\ntestpath&#x3D;&quot;$&#123;filepath&#125;&#x2F;test_dir&quot;\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction test_grep() &#123;\n    mkdir -p $&#123;testpath&#125; &amp;&amp; cd $&#123;testpath&#125;\n    # 将 man 文档分割成数个文件，每个文件 20 行\n    split &#x2F;etc&#x2F;man_db.conf -d -a 2 -l 20 man_db_\n\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下的所有文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;filepath&#125; -type f -exec ls -la &#123;&#125; \\;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 man_db_00 文件中查找包含 man 字段的行 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep man man_db_00\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 man_db_00 文件中查找包含 man 字段的行(不区分大小写) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -i man man_db_00\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 man_db_00 文件中查找不包含 man 字段的行(反向查找) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -v man man_db_00\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 man_db_00 文件中查找包含 man 字段的行并显示行号 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -n man man_db_00\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 man_db_01 文件中查找符合正则表达式 *PATH* 的行并显示行号 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -n &quot;*PATH*&quot; man_db_01\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 man_db_01 文件中查找符合 *PATH* 的行并显示行号(不按照正则表达式匹配) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -n -F &quot;*PATH*&quot; man_db_01\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 man_db_01 文件中查找符合扩展正则表达式 man|MAN 的行并显示行号 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -n -E &quot;man|MAN&quot; man_db_01\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 man_db_01 文件中查找符合扩展正则表达式 man|MAN 的行总数 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -c -E &quot;man|MAN&quot; man_db_01\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 man_db_01 文件中查找包含 &#x2F;bin 的行并显示行号 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep &quot;&#x2F;bin&quot; man_db_01\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在 man_db_01 文件中查找符合 &#x2F;bin 全字符的行并显示行号 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -w &quot;&#x2F;bin&quot; man_db_01\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下的所有文件中查找包含 man 字段的行并显示行号(递归搜索) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; grep -r -n man\n\n    # 删除测试目录\n    cd $&#123;filepath&#125; &amp;&amp; rm -rf test_dir&#x2F;\n&#125;\n\ntest_grep\n\n运行结果------ 查找当前目录下的所有文件 ------\n\n-rw-r--r--. 1 ryan ryan 801 Oct  2 19:10 &#x2F;home&#x2F;ryan&#x2F;Documents&#x2F;test_dir&#x2F;man_db_00\n-rw-r--r--. 1 ryan ryan 749 Oct  2 19:10 &#x2F;home&#x2F;ryan&#x2F;Documents&#x2F;test_dir&#x2F;man_db_01\n-rw-r--r--. 1 ryan ryan 1045 Oct  2 19:10 &#x2F;home&#x2F;ryan&#x2F;Documents&#x2F;test_dir&#x2F;man_db_02\n-rw-r--r--. 1 ryan ryan 722 Oct  2 19:10 &#x2F;home&#x2F;ryan&#x2F;Documents&#x2F;test_dir&#x2F;man_db_03\n-rw-r--r--. 1 ryan ryan 541 Oct  2 19:10 &#x2F;home&#x2F;ryan&#x2F;Documents&#x2F;test_dir&#x2F;man_db_04\n-rw-r--r--. 1 ryan ryan 917 Oct  2 19:10 &#x2F;home&#x2F;ryan&#x2F;Documents&#x2F;test_dir&#x2F;man_db_05\n-rw-r--r--. 1 ryan ryan 396 Oct  2 19:10 &#x2F;home&#x2F;ryan&#x2F;Documents&#x2F;test_dir&#x2F;man_db_06\n\n------ 在 man_db_00 文件中查找包含 man 字段的行 ------\n\n# This file is used by the man-db package to configure the man and cat paths.\n# It is also used to provide a manpath for those without one by examining\n# their PATH environment variable. For details see the manpath(5) man page.\n# MANDATORY_MANPATH            manpath_element\n# MANPATH_MAP        path_element    manpath_element\n# MANDB_MAP        global_manpath    [relative_catpath]\n#MANDATORY_MANPATH             &#x2F;usr&#x2F;src&#x2F;pvm3&#x2F;man\nMANDATORY_MANPATH            &#x2F;usr&#x2F;man\n\n------ 在 man_db_00 文件中查找包含 man 字段的行(不区分大小写) ------\n\n# This file is used by the man-db package to configure the man and cat paths.\n# It is also used to provide a manpath for those without one by examining\n# their PATH environment variable. For details see the manpath(5) man page.\n# MANDATORY_MANPATH            manpath_element\n# MANPATH_MAP        path_element    manpath_element\n# MANDB_MAP        global_manpath    [relative_catpath]\n# every automatically generated MANPATH includes these fields\n#MANDATORY_MANPATH             &#x2F;usr&#x2F;src&#x2F;pvm3&#x2F;man\nMANDATORY_MANPATH            &#x2F;usr&#x2F;man\n\n------ 在 man_db_00 文件中查找不包含 man 字段的行(反向查找) ------\n\n#\n#\n#\n# Lines beginning with &#96;#&#39; are comments and are ignored. Any combination of\n# tabs or spaces may be used as &#96;whitespace&#39; separators.\n#\n# There are three mappings allowed in this file:\n# --------------------------------------------------------\n#---------------------------------------------------------\n# every automatically generated MANPATH includes these fields\n#\n#\n\n------ 在 man_db_00 文件中查找包含 man 字段的行并显示行号 ------\n\n3:# This file is used by the man-db package to configure the man and cat paths.\n4:# It is also used to provide a manpath for those without one by examining\n5:# their PATH environment variable. For details see the manpath(5) man page.\n12:# MANDATORY_MANPATH            manpath_element\n13:# MANPATH_MAP        path_element    manpath_element\n14:# MANDB_MAP        global_manpath    [relative_catpath]\n18:#MANDATORY_MANPATH             &#x2F;usr&#x2F;src&#x2F;pvm3&#x2F;man\n20:MANDATORY_MANPATH            &#x2F;usr&#x2F;man\n\n------ 在 man_db_01 文件中查找符合正则表达式 *PATH* 的行并显示行号 ------\n\n7:#        *PATH*        -&gt;    *MANPATH*\n\n------ 在 man_db_01 文件中查找符合 *PATH* 的行并显示行号(不按照正则表达式匹配) ------\n\n7:#        *PATH*        -&gt;    *MANPATH*\n\n------ 在 man_db_01 文件中查找符合扩展正则表达式 man|MAN 的行并显示行号 ------\n\n1:MANDATORY_MANPATH            &#x2F;usr&#x2F;share&#x2F;man\n2:MANDATORY_MANPATH            &#x2F;usr&#x2F;local&#x2F;share&#x2F;man\n4:# set up PATH to MANPATH mapping\n5:# ie. what man tree holds man pages for what binary directory.\n7:#        *PATH*        -&gt;    *MANPATH*\n9:MANPATH_MAP    &#x2F;bin            &#x2F;usr&#x2F;share&#x2F;man\n10:MANPATH_MAP    &#x2F;usr&#x2F;bin        &#x2F;usr&#x2F;share&#x2F;man\n11:MANPATH_MAP    &#x2F;sbin            &#x2F;usr&#x2F;share&#x2F;man\n12:MANPATH_MAP    &#x2F;usr&#x2F;sbin        &#x2F;usr&#x2F;share&#x2F;man\n13:MANPATH_MAP    &#x2F;usr&#x2F;local&#x2F;bin        &#x2F;usr&#x2F;local&#x2F;man\n14:MANPATH_MAP    &#x2F;usr&#x2F;local&#x2F;bin        &#x2F;usr&#x2F;local&#x2F;share&#x2F;man\n15:MANPATH_MAP    &#x2F;usr&#x2F;local&#x2F;sbin        &#x2F;usr&#x2F;local&#x2F;man\n16:MANPATH_MAP    &#x2F;usr&#x2F;local&#x2F;sbin        &#x2F;usr&#x2F;local&#x2F;share&#x2F;man\n17:MANPATH_MAP    &#x2F;usr&#x2F;X11R6&#x2F;bin        &#x2F;usr&#x2F;X11R6&#x2F;man\n18:MANPATH_MAP    &#x2F;usr&#x2F;bin&#x2F;X11        &#x2F;usr&#x2F;X11R6&#x2F;man\n19:MANPATH_MAP    &#x2F;usr&#x2F;games        &#x2F;usr&#x2F;share&#x2F;man\n20:MANPATH_MAP    &#x2F;opt&#x2F;bin        &#x2F;opt&#x2F;man\n\n------ 在 man_db_01 文件中查找符合扩展正则表达式 man|MAN 的行总数 ------\n\n17\n\n------ 在 man_db_01 文件中查找包含 &#x2F;bin 的行并显示行号 ------\n\nMANPATH_MAP    &#x2F;bin            &#x2F;usr&#x2F;share&#x2F;man\nMANPATH_MAP    &#x2F;usr&#x2F;bin        &#x2F;usr&#x2F;share&#x2F;man\nMANPATH_MAP    &#x2F;usr&#x2F;local&#x2F;bin        &#x2F;usr&#x2F;local&#x2F;man\nMANPATH_MAP    &#x2F;usr&#x2F;local&#x2F;bin        &#x2F;usr&#x2F;local&#x2F;share&#x2F;man\nMANPATH_MAP    &#x2F;usr&#x2F;X11R6&#x2F;bin        &#x2F;usr&#x2F;X11R6&#x2F;man\nMANPATH_MAP    &#x2F;usr&#x2F;bin&#x2F;X11        &#x2F;usr&#x2F;X11R6&#x2F;man\nMANPATH_MAP    &#x2F;opt&#x2F;bin        &#x2F;opt&#x2F;man\n\n------ 在 man_db_01 文件中查找符合 &#x2F;bin 全字符的行并显示行号 ------\n\nMANPATH_MAP    &#x2F;bin            &#x2F;usr&#x2F;share&#x2F;man\n\n------ 查找当前目录下的所有文件中查找包含 man 字段的行并显示行号(递归搜索) ------\n\nman_db_00:3:# This file is used by the man-db package to configure the man and cat paths.\nman_db_00:4:# It is also used to provide a manpath for those without one by examining\nman_db_00:5:# their PATH environment variable. For details see the manpath(5) man page.\nman_db_00:12:# MANDATORY_MANPATH            manpath_element\nman_db_00:13:# MANPATH_MAP        path_element    manpath_element\nman_db_00:14:# MANDB_MAP        global_manpath    [relative_catpath]\nman_db_00:18:#MANDATORY_MANPATH             &#x2F;usr&#x2F;src&#x2F;pvm3&#x2F;man\nman_db_00:20:MANDATORY_MANPATH            &#x2F;usr&#x2F;man\nman_db_01:1:MANDATORY_MANPATH            &#x2F;usr&#x2F;share&#x2F;man\nman_db_01:2:MANDATORY_MANPATH            &#x2F;usr&#x2F;local&#x2F;share&#x2F;man\nman_db_01:5:# ie. what man tree holds man pages for what binary directory.\nman_db_01:9:MANPATH_MAP    &#x2F;bin            &#x2F;usr&#x2F;share&#x2F;man\nman_db_01:10:MANPATH_MAP    &#x2F;usr&#x2F;bin        &#x2F;usr&#x2F;share&#x2F;man\nman_db_01:11:MANPATH_MAP    &#x2F;sbin            &#x2F;usr&#x2F;share&#x2F;man\nman_db_01:12:MANPATH_MAP    &#x2F;usr&#x2F;sbin        &#x2F;usr&#x2F;share&#x2F;man\nman_db_01:13:MANPATH_MAP    &#x2F;usr&#x2F;local&#x2F;bin        &#x2F;usr&#x2F;local&#x2F;man\nman_db_01:14:MANPATH_MAP    &#x2F;usr&#x2F;local&#x2F;bin        &#x2F;usr&#x2F;local&#x2F;share&#x2F;man\nman_db_01:15:MANPATH_MAP    &#x2F;usr&#x2F;local&#x2F;sbin        &#x2F;usr&#x2F;local&#x2F;man\nman_db_01:16:MANPATH_MAP    &#x2F;usr&#x2F;local&#x2F;sbin        &#x2F;usr&#x2F;local&#x2F;share&#x2F;man\nman_db_01:17:MANPATH_MAP    &#x2F;usr&#x2F;X11R6&#x2F;bin        &#x2F;usr&#x2F;X11R6&#x2F;man\nman_db_01:18:MANPATH_MAP    &#x2F;usr&#x2F;bin&#x2F;X11        &#x2F;usr&#x2F;X11R6&#x2F;man\nman_db_01:19:MANPATH_MAP    &#x2F;usr&#x2F;games        &#x2F;usr&#x2F;share&#x2F;man\nman_db_01:20:MANPATH_MAP    &#x2F;opt&#x2F;bin        &#x2F;opt&#x2F;man\nman_db_02:1:MANPATH_MAP    &#x2F;opt&#x2F;sbin        &#x2F;opt&#x2F;man\nman_db_02:3:# For a manpath element to be treated as a system manpath (as most of those\nman_db_02:6:# manpath. If no catpath string is used, the catpath will default to the\nman_db_02:7:# given manpath.\nman_db_02:9:# You *must* provide all system manpaths, including manpaths for alternate\nman_db_02:10:# operating systems, locale specific manpaths, and combinations of both, if\nman_db_02:11:# they exist, otherwise the permissions of the user running man&#x2F;mandb will\nman_db_02:12:# be used to manipulate the manual pages. Also, mandb will not initialise\nman_db_02:13:# the database cache for any manpaths not mentioned below unless explicitly\nman_db_02:20:# Any manpaths that are subdirectories of other manpaths must be mentioned\nman_db_03:1:# *before* the containing manpath. E.g. &#x2F;usr&#x2F;man&#x2F;preformat must be listed\nman_db_03:2:# before &#x2F;usr&#x2F;man.\nman_db_03:6:MANDB_MAP    &#x2F;usr&#x2F;man        &#x2F;var&#x2F;cache&#x2F;man&#x2F;fsstnd\nman_db_03:7:MANDB_MAP    &#x2F;usr&#x2F;share&#x2F;man        &#x2F;var&#x2F;cache&#x2F;man\nman_db_03:8:MANDB_MAP    &#x2F;usr&#x2F;local&#x2F;man        &#x2F;var&#x2F;cache&#x2F;man&#x2F;oldlocal\nman_db_03:9:MANDB_MAP    &#x2F;usr&#x2F;local&#x2F;share&#x2F;man    &#x2F;var&#x2F;cache&#x2F;man&#x2F;local\nman_db_03:10:MANDB_MAP    &#x2F;usr&#x2F;X11R6&#x2F;man        &#x2F;var&#x2F;cache&#x2F;man&#x2F;X11R6\nman_db_03:11:MANDB_MAP    &#x2F;opt&#x2F;man        &#x2F;var&#x2F;cache&#x2F;man&#x2F;opt\nman_db_04:2:#DEFINE     troff     groff -mandoc\nman_db_04:3:#DEFINE     nroff     nroff -mandoc -c\nman_db_06:10:# NOCACHE keeps man from creating cat pages.\n\n类似命令egrepegrep 是”Extended Global Regular Expressions Print“的首字母缩写词。grep 默认不支持扩展正则表达式，只支持基础正则表达式，想要支持扩展正则表达式可以：\n\n使用 grep -E 命令\n使用 wgrep 命令\n\nfgrepfgrep 是 “Fixed-string Global Regular Expressions Print“ 的首字母缩写词，意为固定字符串全局正则表达式打印。\nfgrep 命令用于查找文件里符合条件的字符串，等价于 grep -F 命令。\npgreppgrep 是”Process-ID Global Regular Expressions Print“的首字母缩写词。pgrep 命令以名称为依据从运行进程队列中查找进程，并显示查找到的进程 id。每一个进程 ID 以一个十进制数表示，通过一个分割字符串和下一个 ID 分开，默认的分割字符串是一个新行。对于每个属性选项，用户可以在命令行上指定一个以逗号分割的可能值的集合。\n选项\n\n\n选项\n描述\n\n\n\n-o\n仅显示找到的最小（起始）进程号；\n\n\n-n\n仅显示找到的最大（结束）进程号；\n\n\n-l\n显示进程名称；\n\n\n-P\n指定父进程号；\n\n\n-g\n指定进程组；\n\n\n-t\n指定开启进程的终端；\n\n\n-u\n指定进程的有效用户 ID。\n\n\n文档Usage:\n pgrep [options] &lt;pattern&gt;\n\nOptions:\n -d, --delimiter &lt;string&gt;  specify output delimiter\n -l, --list-name           list PID and process name\n -a, --list-full           list PID and full command line\n -v, --inverse             negates the matching\n -w, --lightweight         list all TID\n -c, --count               count of matching processes\n -f, --full                use full process name to match\n -g, --pgroup &lt;PGID,...&gt;   match listed process group IDs\n -G, --group &lt;GID,...&gt;     match real group IDs\n -n, --newest              select most recently started\n -o, --oldest              select least recently started\n -P, --parent &lt;PPID,...&gt;   match only child processes of the given parent\n -s, --session &lt;SID,...&gt;   match session IDs\n -t, --terminal &lt;tty,...&gt;  match by controlling terminal\n -u, --euid &lt;ID,...&gt;       match by effective IDs\n -U, --uid &lt;ID,...&gt;        match by real IDs\n -x, --exact               match exactly with the command name\n -F, --pidfile &lt;file&gt;      read PIDs from file\n -L, --logpidfile          fail if PID file is not locked\n --ns &lt;PID&gt;                match the processes that belong to the same\n                           namespace as &lt;pid&gt;\n --nslist &lt;ns,...&gt;         list which namespaces will be considered for\n                           the --ns option.\n                           Available namespaces: ipc, mnt, net, pid, user, uts\n\n -h, --help     display this help and exit\n -V, --version  output version information and exit\n\n测试[ryan@ryan-tencentcloud-2]~ pgrep -lo nginx # nginx 最小进程号\n4399 nginx\n[ryan@ryan-tencentcloud-2]~ pgrep -ln nginx # nginx 最大进程号\n4400 nginx\n[ryan@ryan-tencentcloud-2]~ pgrep -l nginx # nginx 进程号和进程名\n4399 nginx\n4400 nginx\n[ryan@ryan-tencentcloud-2]~ pgrep -la nginx # nginx 进程号和命令\n4399 nginx: master process &#x2F;usr&#x2F;sbin&#x2F;nginx\n4400 nginx: worker process\n\nrgrep rgrep 命令用于递归查找文件里符合条件的字符串，类似于 grep -r 命令。\n\n\n\n\n\n\n\n\n\n本文代码：05-shell\n","slug":"2020-10-03-05_文本处理 grep","date":"2020-10-03T11:23:26.000Z","categories_index":"Linux","tags_index":"Linux,Shell","author_index":"JaimeZeng"},{"id":"9351df5cbba08f50ebf152b511a1565c","title":"文件查找命令 find","content":"该小节讲解 Shell 中常用的命令，包括文件查找 find 和 locate 的使用，尤其是 find 的各种高级用法，并结合 xargs 对大量文件进行处理；之后讲解数据备份、文件压缩、目录备份以及下载工具的使用方法；所有的用法都会在真实环境给大家做演示…\nfind语法\n\n\n语法格式\n\n\n\nfind [路径] [选项] [操作]\n\n\n选项参数对照表\n\n\n选项\n含义\n\n\n\n-name\n根据文件名查找\n\n\n-perm\n根据文件权限查找\n\n\n-prune\n排除某些查找目录\n\n\n-user\n根据文件属主查找\n\n\n-group\n根据文件属组查找\n\n\n-mtime -n | +n\n根据文件更改时间查找\n\n\n-nogroup\n查找无有效属组的文件\n\n\n-nouser\n查找无有效属主的文件\n\n\n-newer file1 ! file2\n查找更新时间比 file1 新但比 file2 旧的文件\n\n\n-type\n根据文件类型查找\n\n\n-size -n +n\n根据文件大小查找\n\n\n-mindepth n\n从 n 级子目录开始查找\n\n\n-maxdepth n\n最多搜索到 n 级子目录\n\n\n常用选项\n-name。例如查找 /etc/ 目录下以 conf 结尾的文件： find /etc/ -name &#39;*conf&#39;；\n-iname。例如查找当前目录下文件名为 aa 的文件，不区分大小写：find . -iname &#39;aa&#39;；\n-user。例如查找当前路径下文件属主为 ryan 的所有文件：find . -user ryan；\n-group。例如查找当前路径下文件属组为 yarn 的所有文件：find . -group yarn；\n-type。\nf。例如查找当前目录下的文件：find . -type f；\nd。例如查找当前目录下的目录：find . -type d；\nc。例如查找当前目录下的字符设备文件：find . -type c；\nb。例如查找当前目录下的块设备文件：find . -type b；\nl。例如查找当前目录下的链接文件：find . -type l；\np。例如查找当前目录下的管道文件：find . -type p。\n\n\n-size，单位默认字节(c)。\n-n。例如查找当前目录下文件大小大于 1M 的文件：find . -size +1M；\n+n。例如查找当前目录下文件大小小于 100k 的文件：find . -size -100k；\n\n\nmtime。\n-n。例如查找 /etc/ 目录下 5 天之内修改且以 conf 结尾的文件： find /etc/ -mtime -5 -name &#39;*conf&#39;；\n+n。例如查找 /etc/ 目录下 10 天之前修改且属主为 root 的文件： find /etc/ -mtime +10 -user root；\n\n\n-mmin。\n-n。例如查找 /etc/目录下 30 分钟之内修改的文件：find /etc/ -mmin -30 -type f；\n+n。例如查找 /etc/目录下 30 分钟之前修改的目录：find /etc/ -mmin +30 -type d；\n\n\n-mindepth n。例如在 /etc/ 目录下的 3 级子目录开始搜索：find /etc/ -mindepth 3；\n-maxdepth n。例如查找 /etc/ 目录下以 conf 结尾且文件大小大于 10k 的文件，但最多搜索到 2 级子目录：find /etc/ -maxdepth 2 -name &#39;*conf&#39;；\n-nouser。例如查找当前目录下的没有属主的文件：find . -type f -nouser；\n-nogroup。例如查找当前目录下的没有属组的文件：find . -type f -nogroup；\n-perm。例如查找当前目录下的权限为 644 的文件：find . -type f -perm 644；\n-prune。排除目录。\n例如查找当前目录下的属主为 hdfs 且文件大小大于 500 字节的文件，但排除 etc 和 opt 目录：find . -path ./etc -prune -o -path ./opt -prune -o -type f -a -user hdfe -a -size +500c；\n例如在当前目录下的 1 级子目录开始查找文件属主为 ryanjie、文件属组为 jaime、文件大小大于 10M 且文件名为 abcd 或 efgh 的文件，最多查找到 3 级子目录，但排除 ./test_1/hijk 和 ./test_1/opq 目录：find . -path ./test_1/hijk -prune -o -path ./test_1/opq -prune -o -type f -mindepth 1 -maxdepth 3 -user ryanjie -group jaime -size +10M -perm 777 -a \\(-name &quot;abcd&quot; -o -name &quot;efgh&quot;\\) -exec ls -la &#123;&#125; \\;\n\n\n-newer file1。例如查找 /etc/ 目录下更新时间比 aa 新但是比 ./bb 旧的文件：find /etc/ -newer aa ! -newer ./bb\n\n操作\nprint。打印输出。（find 命令默认输出时就会打印，所以加与不加没区别）\n-exec。对搜索到的文件执行特定的操作，格式为 -exec &#39;command&#39; &#123;&#125; \\;\n例如查找当前目录下的文件（非目录）、文件名以 conf 结尾、文件大小大于 10k ，然后将其删除。find . -type f -name &#39;*conf&#39; -size +10k -exec rm -f &#123;&#125; \\;\n例如查找 /var/log/ 目录下以 log 结尾且文件更新时间在 7 天之前的文件，然后将其删除。find /var/log/ -name &#39;*log&#39; -mtime +7 -exec rm -f &#123;&#125; \\;\n例如查找当前目录下的文件（非目录）、文件名以 conf 结尾、文件大小大于 10k ，然后将其复制到 /root/conf/ 目录下。find . -type f -name &#39;*conf&#39; -size +10k -exec cp &#123;&#125; /root/conf/ \\;\n\n\n-ok。和 exec 功能一样，区别在于 ok 在每次操作时都会给用户提示。\n逻辑运算符。-a 与； -o 或； -not | ! 非。\n例如查找当前目录下文件属主为 hdfs 且文件大小大于 300 字节的文件。find . -type f -a -user hdfs -a -size +300c\n例如查找当前目录下文件属主不是 hdfs 的所有文件。find . -type f -not -user hdfs 或者 find . -type f ! -user hdfs\n例如查找当前目录下文件属主为 hdfs 或者文件以 xml 结尾的普通文件。find -type f -a \\( -user hdfs -o -name &#39;*xml&#39; \\)\n\n\n\n练习脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# find 练习\n\nfilepath&#x3D;$(\n    cd $(dirname $0)\n    pwd\n)\ntestpath&#x3D;&quot;$&#123;filepath&#125;&#x2F;test_dir&quot;\n\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\ncheck_root() &#123;\n    if [ $&#123;UID&#125; -ne 0 ]; then\n        echo -e &quot;当前非 ROOT 账号(或没有 ROOT 权限)，无法继续操作，请更换 ROOT 账号或使用 su命令获取临时 ROOT 权限&quot; &amp;&amp; exit 1\n    fi\n&#125;\n\ncheck_sys() &#123;\n    IS_MACOS&#x3D;$(uname | grep &#39;Darwin&#39; | wc -l)\n    if [[ -f &#x2F;etc&#x2F;redhat-release ]]; then\n        release&#x3D;&quot;centos&quot;\n    elif [ $&#123;IS_MACOS&#125; -eq 1 ]; then\n        release&#x3D;&quot;macos&quot;\n    elif cat &#x2F;etc&#x2F;issue | grep -q -E -i &quot;debian&quot;; then\n        release&#x3D;&quot;debian&quot;\n    elif cat &#x2F;etc&#x2F;issue | grep -q -E -i &quot;ubuntu&quot;; then\n        release&#x3D;&quot;ubuntu&quot;\n    elif cat &#x2F;etc&#x2F;issue | grep -q -E -i &quot;centos|red hat|redhat&quot;; then\n        release&#x3D;&quot;centos&quot;\n    elif cat &#x2F;proc&#x2F;version | grep -q -E -i &quot;debian&quot;; then\n        release&#x3D;&quot;debian&quot;\n    elif cat &#x2F;proc&#x2F;version | grep -q -E -i &quot;ubuntu&quot;; then\n        release&#x3D;&quot;ubuntu&quot;\n    elif cat &#x2F;proc&#x2F;version | grep -q -E -i &quot;centos|red hat|redhat&quot;; then\n        release&#x3D;&quot;centos&quot;\n    fi\n&#125;\n\ncheck_tree_installed_status() &#123;\n    if [ -z $(command -v tree) ]; then\n        echo -e &quot;tree 依赖没有安装，开始安装...&quot;\n        check_sys\n        if [[ $&#123;release&#125; &#x3D;&#x3D; &quot;centos&quot; ]]; then\n            yum update &amp;&amp; yum install tree -y\n        elif [[ $&#123;release&#125; &#x3D;&#x3D; &quot;macos&quot; ]]; then\n            brew install tree\n        else\n            apt-get update &amp;&amp; apt-get install tree -y\n        fi\n        if [ -z $(command -v tree) ]; then\n            echo -e &quot;tree 安装失败，请检查！&quot; &amp;&amp; exit 1\n        else\n            echo -e &quot;tree 安装成功！&quot;\n        fi\n    fi\n&#125;\n\ntest_find() &#123;\n    # check_tree_installed_status\n    mkdir -p $&#123;testpath&#125; &amp;&amp; cd $&#123;testpath&#125;\n\n    # conf、xml、ini\n    touch grub.conf loadbalance.conf photo.xml excel.xml php.ini virtuoso.ini\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下以 conf 结尾的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -name &quot;*conf&quot; -exec ls -la &#123;&#125; \\;\n\n    # aabb 文件\n    mkdir aabb AABB\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下文件名为 aabb 的文件(不区分大小写) ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -iname &#39;aabb&#39;\n\n    # jaime 属主、jaimegroup 属组文件\n    groupadd jaimegroup &amp;&amp; useradd -g jaimegroup jaime\n    chown jaime:jaimegroup grub.conf loadbalance.conf photo.xml\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前路径下文件属主为 jaime 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -user jaime -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %12s %18s\\n&quot;, &quot;User&quot;, &quot;Group&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s %12s %18s\\n&quot;, $3, $4, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前路径下文件属组为 jaimegroup 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -group jaimegroup -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %12s %18s\\n&quot;, &quot;User&quot;, &quot;Group&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s %12s %18s\\n&quot;, $3, $4, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -exec ls -la &#123;&#125; \\;\n    # echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前路径下的目录 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type d -exec ls -la &#123;&#125; \\;\n\n    # 链接文件\n    echo &quot;1122&quot; &gt;&gt;model &amp;&amp; ln -s model model-soft\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前路径下的链接文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type l -exec ls -la &#123;&#125; \\;\n\n    # 管道文件\n    mkfifo aabb.pipe AAbb.pipe\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前路径下的管道文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type p -exec ls -la &#123;&#125; \\;\n\n    # 50mb, 50kb, 25mb, 25kb, 521 大小的文件\n    head -c 50M &#x2F;dev&#x2F;zero &gt;50mb.test\n    head -c 50K &#x2F;dev&#x2F;zero &gt;50kb.test\n    head -c 25K &#x2F;dev&#x2F;zero &gt;25kb.test\n    head -c 512 &#x2F;dev&#x2F;zero &gt;512c.test\n    head -c 25M &#x2F;dev&#x2F;zero &gt;25mb.test\n    # dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;25mb.test bs&#x3D;25MB count&#x3D;1\n    # dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;25kb.test bs&#x3D;25KB count&#x3D;1\n    # dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;512c.test bs&#x3D;512 count&#x3D;1\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下文件大小大于 1M 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -size +1M -name &#39;*.test&#39; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %9s\\n&quot;, &quot;size&quot;, &quot;FileName&quot;;printf &quot;------------------\\n&quot;&#125; &#123;printf &quot;%4dmb %9s\\n&quot;, $5&#x2F;1024&#x2F;1024, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下文件大小等于 25M 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -size +1M -name &#39;*.test&#39; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %9s\\n&quot;, &quot;size&quot;, &quot;FileName&quot;;printf &quot;------------------\\n&quot;&#125; &#123;printf &quot;%4dmb %9s\\n&quot;, $5&#x2F;1024&#x2F;1024, $9&#125;&#39;\n\n    # 特定时间的文件\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 修改系统时间为 2020-10-02 18:25:15 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; date -s &quot;20201002 18:25:15&quot;\n    touch -d &quot;2020-10-02 18:25:15&quot; now.file\n    touch -d &quot;2020-10-02 18:00:15&quot; 25_min_ago.file\n    touch -d &quot;2020-10-02 18:05:15&quot; 20_min_ago.file\n    touch -d &quot;2020-10-02 17:35:15&quot; 50_min_ago.file\n    touch -d &quot;2020-10-02 17:25:15&quot; 1_hour_ago.file\n    touch -d &quot;2020-09-25 18:25:15&quot; 7_days_ago.file\n    touch -d &quot;2020-09-18 18:25:15&quot; 14_days_ago.file\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下 5 天之内修改且以 file 结尾的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mtime -5 -name &quot;*file&quot; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %3s %6s %18s\\n&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Time&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%6s %3d %6s %22s\\n&quot;, $6, $7, $8, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下 5 天之前修改且以 file 结尾的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mtime +5 -name &quot;*file&quot; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %3s %6s %18s\\n&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Time&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%6s %3d %6s %22s\\n&quot;, $6, $7, $8, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下 30 分钟内修改且以 file 结尾的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mmin -30 -name &quot;*file&quot; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %3s %6s %18s\\n&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Time&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%6s %3d %6s %22s\\n&quot;, $6, $7, $8, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下 30 分钟前修改且以 file 结尾的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mmin +30 -name &quot;*file&quot; -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%6s %3s %6s %18s\\n&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Time&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%6s %3d %6s %22s\\n&quot;, $6, $7, $8, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下更新时间比 14_days_ago.file 新但是比 25_min_ago.file 旧的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -name &quot;*file&quot; -newer .&#x2F;14_days_ago.file -exec ls -la &#123;&#125; \\; ! -newer 25_min_ago.file | awk &#39;BEGIN&#123;printf &quot;%6s %3s %6s %18s\\n&quot;, &quot;Month&quot;, &quot;Day&quot;, &quot;Time&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%6s %3d %6s %22s\\n&quot;, $6, $7, $8, $9&#125;&#39;\n\n    # 无属主、无属组文件\n    chown 10086:10086 now.file 7_days_ago.file 50kb.test\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下的没有属主的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -nouser -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %18s\\n&quot;, &quot;User&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s %18s\\n&quot;, $3, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下的没有属组的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -nouser -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %18s\\n&quot;, &quot;Group&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s %18s\\n&quot;, $4, $9&#125;&#39;\n\n    # 权限文件\n    chmod 644 grub.conf php.ini\n    chmod 777 photo.xml\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下权限为 644 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -perm 644 -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %18s\\n&quot;, &quot;Permissions&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s %18s\\n&quot;, $1, $9&#125;&#39;\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 查找当前目录下权限为 777 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -perm 777 -exec ls -la &#123;&#125; \\; | awk &#39;BEGIN&#123;printf &quot;%12s %18s\\n&quot;, &quot;Permissions&quot;, &quot;FileName&quot;;printf &quot;--------------------------------------\\n&quot;&#125; &#123;printf &quot;%12s  %18s\\n&quot;, $1, $9&#125;&#39;\n\n    # 三级文件夹\n    mkdir -p $&#123;testpath&#125;&#x2F;test&#x2F;dir1 &amp;&amp; cd $&#123;testpath&#125;&#x2F;test&#x2F;dir1 &amp;&amp; touch grub.conf loadbalance.conf php1.ini default_my.cnf my1.cnf mysql-clients1.cnf server1.cnf\n    mkdir -p $&#123;testpath&#125;&#x2F;test&#x2F;dir2 &amp;&amp; cd $&#123;testpath&#125;&#x2F;test&#x2F;dir2 &amp;&amp; touch grub.conf loadbalance.conf php2.ini default_my.cnf my2.cnf mysql-clients2.cnf server2.cnf\n    mkdir -p $&#123;testpath&#125;&#x2F;test_1&#x2F;abcd&#x2F;efgh &amp;&amp; cd $&#123;testpath&#125;&#x2F;test_1&#x2F;abcd&#x2F;efgh &amp;&amp; head -c 6M &#x2F;dev&#x2F;zero &gt;abcd &amp;&amp; head -c 12M &#x2F;dev&#x2F;zero &gt;efgh &amp;&amp; chown jaime:jaimegroup efgh &amp;&amp; chmod 777 efgh\n    mkdir -p $&#123;testpath&#125;&#x2F;test_1&#x2F;hijk&#x2F;lmn &amp;&amp; cd $&#123;testpath&#125;&#x2F;test_1&#x2F;hijk&#x2F;lmn &amp;&amp; head -c 6M &#x2F;dev&#x2F;zero &gt;abcd &amp;&amp; head -c 12M &#x2F;dev&#x2F;zero &gt;efgh &amp;&amp; chown jaime:jaimegroup efgh &amp;&amp; chmod 777 efgh\n    mkdir -p $&#123;testpath&#125;&#x2F;test_1&#x2F;opq&#x2F;rst&#x2F;uvw&#x2F;xyz &amp;&amp; cd $&#123;testpath&#125;&#x2F;test_1&#x2F;opq&#x2F;rst&#x2F;uvw&#x2F;xyz &amp;&amp; head -c 6M &#x2F;dev&#x2F;zero &gt;abcd &amp;&amp; head -c 12M &#x2F;dev&#x2F;zero &gt;efgh &amp;&amp; chown jaime:jaimegroup efgh &amp;&amp; chmod 777 efgh\n    mkdir -p $&#123;testpath&#125;&#x2F;test_1&#x2F;rst&#x2F;uvw&#x2F;xyz &amp;&amp; cd $&#123;testpath&#125;&#x2F;test_1&#x2F;rst&#x2F;uvw&#x2F;xyz &amp;&amp; head -c 6M &#x2F;dev&#x2F;zero &gt;abcd &amp;&amp; head -c 12M &#x2F;dev&#x2F;zero &gt;efgh &amp;&amp; chown jaime:jaimegroup efgh &amp;&amp; chmod 777 efgh\n    cd $&#123;testpath&#125;\n\n    # 查看目录结构\n    # tree\n\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在当前目录下查找以 conf 结尾或文件名以 a 开头的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -type f -a \\( -name &quot;*conf&quot; -o -name &quot;^a&quot; \\)\n    # 限制查找当前目录下的 grub.conf loadbalance.conf 文件，只会查找子目录下的\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在当前目录下的 2 级子目录开始查找以 conf 结尾或文件名以 a 开头的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mindepth 2 -type f -a \\( -name &quot;*conf&quot; -o -name &quot;^a&quot; \\)\n\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在当前目录下的 1 级子目录开始查找文件名为 abcd 或 efgh 的文件 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mindepth 1 -type f -a \\( -name &quot;abcd&quot; -o -name &quot;efgh&quot; \\)\n    # 限制查找 .&#x2F;test_1&#x2F;opq 以及 .&#x2F;test_1&#x2F;rst 下的 abcd efgh 文件\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在当前目录下的 1 级子目录开始查找文件名为 abcd 或 efgh 的文件，最多查找到 4 级子目录 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mindepth 1 -maxdepth 4 -type f -a \\( -name &quot;abcd&quot; -o -name &quot;efgh&quot; \\)\n    echo -e &quot;\\n$&#123;Green_font_prefix&#125;------ 在当前目录下的 1 级子目录开始查找文件属主为 jaime、文件属组为 jaimegroup、文件大小大于 10M 且文件名为 abcd 或 efgh 的文件，最多查找到 5 级子目录，但排除 .&#x2F;test_1&#x2F;hijk 和 .&#x2F;test_1&#x2F;opq 目录 ------$&#123;Font_color_suffix&#125;\\n&quot; &amp;&amp; find $&#123;testpath&#125; -mindepth 1 -maxdepth 5 -path .&#x2F;test_1&#x2F;hijk -prune -o -path .&#x2F;test_1&#x2F;opq -prune -o -type f -user jaime -group jaimegroup -size +10M -perm 777 -a \\( -name &quot;abcd&quot; -o -name &quot;efgh&quot; \\) -exec ls -la &#123;&#125; \\;\n\n    # 恢复系统时间\n    ntpdate ntp.aliyun.com\n    ntpdate time1.cloud.tencent.com\n\n    # 删除文件\n    cd $&#123;filepath&#125; &amp;&amp; rm -rf test_dir\n    # grub.conf loadbalance.conf photo.xml excel.xml php.ini virtuoso.ini AAbb.pipe aabb.pipe model model-soft *.test *.file test&#x2F; test_1&#x2F;\n\n    # 删除 jaime 用户、 jaimegroup 组\n    userdel -r jaime &amp;&amp; groupdel jaimegroup\n&#125;\n\ncheck_root\ntest_find\n\n脚本执行------ 查找当前目录下以 conf 结尾的文件 ------\n\n-rw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n-rw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n\n------ 查找当前目录下文件名为 aabb 的文件(不区分大小写) ------\n\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;aabb\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;AABB\n\n------ 查找当前路径下文件属主为 jaime 的文件 ------\n\n        User        Group           FileName\n--------------------------------------\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;photo.xml\n\n------ 查找当前路径下文件属组为 jaimegroup 的文件 ------\n\n        User        Group           FileName\n--------------------------------------\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n       jaime   jaimegroup &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;photo.xml\n\n------ 查找当前目录下的文件 ------\n\n-rw-r--r--. 1 jaime jaimegroup 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n-rw-r--r--. 1 jaime jaimegroup 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n-rw-r--r--. 1 jaime jaimegroup 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;photo.xml\n-rw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;excel.xml\n-rw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;php.ini\n-rw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;virtuoso.ini\n\n------ 查找当前路径下的链接文件 ------\n\nlrwxrwxrwx. 1 root root 5 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;model-soft -&gt; model\n\n------ 查找当前路径下的管道文件 ------\n\nprw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;aabb.pipe\nprw-r--r--. 1 root root 0 Oct 2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;AAbb.pipe\n\n------ 查找当前目录下文件大小大于 1M 的文件 ------\n\n  size  FileName\n------------------\n  50mb &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50mb.test\n  25mb &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25mb.test\n\n------ 查找当前目录下文件大小等于 25M 的文件 ------\n\n  size  FileName\n------------------\n  50mb &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50mb.test\n  25mb &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25mb.test\n\n------ 修改系统时间为 2020-10-02 18:25:15 ------\n\nFri Oct  2 18:25:15 EDT 2020\n\n------ 查找当前目录下 5 天之内修改且以 file 结尾的文件 ------\n\n Month Day   Time           FileName\n--------------------------------------\n   Oct   2  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n   Oct   2  18:00 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25_min_ago.file\n   Oct   2  18:05 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;20_min_ago.file\n   Oct   2  17:35 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50_min_ago.file\n   Oct   2  17:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;1_hour_ago.file\n\n------ 查找当前目录下 5 天之前修改且以 file 结尾的文件 ------\n\n Month Day   Time           FileName\n--------------------------------------\n   Sep  25  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n   Sep  18  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;14_days_ago.file\n\n------ 查找当前目录下 30 分钟内修改且以 file 结尾的文件 ------\n\n Month Day   Time           FileName\n--------------------------------------\n   Oct   2  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n   Oct   2  18:00 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25_min_ago.file\n   Oct   2  18:05 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;20_min_ago.file\n\n------ 查找当前目录下 30 分钟前修改且以 file 结尾的文件 ------\n\n Month Day   Time           FileName\n--------------------------------------\n   Oct   2  17:35 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50_min_ago.file\n   Oct   2  17:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;1_hour_ago.file\n   Sep  25  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n   Sep  18  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;14_days_ago.file\n\n------ 查找当前目录下更新时间比 14_days_ago.file 新但是比 25_min_ago.file 旧的文件 ------\n\n Month Day   Time           FileName\n--------------------------------------\n   Oct   2  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n   Oct   2  18:00 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25_min_ago.file\n   Oct   2  18:05 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;20_min_ago.file\n   Oct   2  17:35 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50_min_ago.file\n   Oct   2  17:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;1_hour_ago.file\n   Sep  25  18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n\n------ 查找当前目录下的没有属主的文件 ------\n\n        User           FileName\n--------------------------------------\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50kb.test\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n\n------ 查找当前目录下的没有属组的文件 ------\n\n       Group           FileName\n--------------------------------------\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50kb.test\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n       10086 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n\n------ 查找当前目录下权限为 644 的文件 ------\n\n Permissions           FileName\n--------------------------------------\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;excel.xml\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;php.ini\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;virtuoso.ini\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;model\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50mb.test\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50kb.test\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25kb.test\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;512c.test\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25mb.test\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;now.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;25_min_ago.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;20_min_ago.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;50_min_ago.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;1_hour_ago.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;7_days_ago.file\n -rw-r--r--. &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;14_days_ago.file\n\n------ 查找当前目录下权限为 777 的文件 ------\n\n Permissions           FileName\n--------------------------------------\n -rwxrwxrwx.  &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;photo.xml\n\n------ 在当前目录下查找以 conf 结尾或文件名以 a 开头的文件 ------\n\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;grub.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;loadbalance.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir1&#x2F;grub.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir1&#x2F;loadbalance.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir2&#x2F;grub.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir2&#x2F;loadbalance.conf\n\n------ 在当前目录下的 2 级子目录开始查找以 conf 结尾或文件名以 a 开头的文件 ------\n\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir1&#x2F;grub.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir1&#x2F;loadbalance.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir2&#x2F;grub.conf\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test&#x2F;dir2&#x2F;loadbalance.conf\n\n------ 在当前目录下的 1 级子目录开始查找文件名为 abcd 或 efgh 的文件 ------\n\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;abcd&#x2F;efgh&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;abcd&#x2F;efgh&#x2F;efgh\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;hijk&#x2F;lmn&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;hijk&#x2F;lmn&#x2F;efgh\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;opq&#x2F;rst&#x2F;uvw&#x2F;xyz&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;opq&#x2F;rst&#x2F;uvw&#x2F;xyz&#x2F;efgh\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;rst&#x2F;uvw&#x2F;xyz&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;rst&#x2F;uvw&#x2F;xyz&#x2F;efgh\n\n------ 在当前目录下的 1 级子目录开始查找文件名为 abcd 或 efgh 的文件，最多查找到 4 级子目录 ------\n\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;abcd&#x2F;efgh&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;abcd&#x2F;efgh&#x2F;efgh\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;hijk&#x2F;lmn&#x2F;abcd\n&#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;hijk&#x2F;lmn&#x2F;efgh\n\n------ 在当前目录下的 1 级子目录开始查找文件属主为 jaime、文件属组为 jaimegroup、文件大小大于 10M 且文件名为 abcd 或 efgh 的文件，最多查找到 5 级子目录，但排除 .&#x2F;test_1&#x2F;hijk 和 .&#x2F;test_1&#x2F;opq 目录 ------\n\n-rwxrwxrwx. 1 jaime jaimegroup 12582912 Oct  2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;abcd&#x2F;efgh&#x2F;efgh\n-rwxrwxrwx. 1 jaime jaimegroup 12582912 Oct  2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;hijk&#x2F;lmn&#x2F;efgh\n-rwxrwxrwx. 1 jaime jaimegroup 12582912 Oct  2 18:25 &#x2F;root&#x2F;shell&#x2F;test_dir&#x2F;test_1&#x2F;rst&#x2F;uvw&#x2F;xyz&#x2F;efgh\n\n总结及适用场景分析find、locate、whereis 和 which 总结及适用场景分析。\nlocate 命令\n文件查找命令，所属软件包 mlocate。\n不同于 find 命令是在整块磁盘中搜索，locate 命令是在数据库文件中查找。新创建的文件使用 locate 命令可能会查找不到，使用 updatedb 命令更新数据库文件后便可查找到。\nfind 是默认全部匹配，locate 是默认部分匹配。\n\nupdatedb 命令\n用户更新 /var/lib/mlocate.db。\n所使用配置文件 /etc/updatedb.conf。\n该命令在后台 cron 计划任务中定期执行。\n\nwhereis 命令\n\n\n选项\n含义\n\n\n\n-b\n只返回二进制文件\n\n\n-m\n只返回帮助文档文件\n\n\n-s\n只返回源代码文件\n\n\nwhich 命令\n仅查找二进制程序文件。\n\n\n\n\n选项\n含义\n\n\n\n-b\n只返回二进制文件\n\n\n各命令使用场景推荐\n\n\n命令\n适用场景\n优缺点\n\n\n\nfind\n查找某一类文件，比如文件名部分一致\n功能强大，速度慢\n\n\nlocate\n只能查找单个文件\n功能单一，速度快\n\n\nwhereis\n查找程序的可执行文件、帮助文档等\n不常用\n\n\nwhich\n只查找程序的可执行文件\n常用于查找程序的绝对路径\n\n\n\n\n\n\n\n\n\n\n\n本文代码：04-shell\n","slug":"2020-10-03-04_文件查找 find","date":"2020-10-03T11:22:26.000Z","categories_index":"Linux","tags_index":"Linux,Shell","author_index":"JaimeZeng"},{"id":"45466a0fbcef37e512cea56b5a3634ff","title":"函数的高级用法","content":"讲解 Shell 中函数是如何定义和使用的、如何向函数传递参数、函数的返回值，并剖析和其他语言使用函数的区别；之后介绍如何调用函数、函数的作用域、如何进行递归调用以及函数库的概念，所有的讲解都会配合在真实环境演示，以帮助学员彻底理解…\n函数的定义和使用函数定义\nLinux Shell 中的函数和大多数编程语言中的函数一样。\n将相似的任务或代码封装到函数中，供其他地方调用。\n\n语法格式\n\n\n\n语法\n\n\n\n第一种\nname() { command1 command2 …… commandn}\n\n\n第二种\nfunction name { command1 command2 …… commandn}\n\n\n调用函数\n直接使用函数名调用，可以将其想象成 Shell 中的一条命令。\n\n函数内部可以直接使用参数 $1、$2 …… $n。\n\n调用函数：function_name $1 $2。\n\n\n练习\n定义函数，调用执行后终端输出 Hello, Zhangsan~。\n#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nfunction hello() &#123;\n    echo -e &quot;Hello, Zhangsan~&quot;\n&#125;\n\nhello\n定义函数，调用执行后控制台循环输出 1 - 10。\n#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nfunction print_num() &#123;\n    for ((i &#x3D; 0; i &lt;&#x3D; 10; i++)); do\n        # echo -e &quot;This is $i num: $i .\\n&quot;\n        printf &quot;This is %2d num: %2d .\\n&quot; $i $i\n    done\n&#125;\n\nprint_num\n\n需求描述写一个监控 nginx 服务的脚本。如果 nginx 服务宕掉，则该脚本可以检测到并将进程启动。\n思路分析\n使用 ps -ef | grep nginx | grep -v grep 命令查看 nginx 进程，grep -v grep 命令排除 grep 进程。如果脚本名中带有 nginx 字段，还需要排除脚本进程。\n当进程存在，上述命令返回值为 0，则输出 Nginx is running well!。否则重启该进程。\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 监控 nginx 服务的脚本。如果 nginx 服务宕掉，则该脚本可以检测到并将进程启动\n\nthis_pid&#x3D;$$\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nfunction check_root() &#123;\n    if [ $&#123;UID&#125; -ne 0 ]; then\n        echo -e &quot;当前非 ROOT 账号(或没有 ROOT 权限)，无法继续操作，请更换 ROOT 账号或使用 su命令获取临时 ROOT 权限&quot; &amp;&amp; exit 1\n    fi\n&#125;\n\nfunction nginx_daemon() &#123;\n    # 查看进程是否存在，屏蔽结果信息\n    ps -ef | grep nginx | grep -v grep | grep -v $&#123;this_pid&#125; &amp;&gt;&#x2F;dev&#x2F;null\n    # echo $?\n\n    if [ &quot;$?&quot; -ne 0 ]; then\n        echo -e &quot;[$&#123;Red_font_prefix&#125;$(TZ&#x3D;&#39;America&#x2F;Los_Angeles&#39; date &quot;+%F %T&quot;)]$&#123;Font_color_suffix&#125; Nginx is down, Start it ...&quot;\n        sudo systemctl start nginx\n    else\n        echo -e &quot;$&#123;Green_font_prefix&#125;[$(TZ&#x3D;&#39;America&#x2F;Los_Angeles&#39; date &quot;+%F %T&quot;)]$&#123;Font_color_suffix&#125; Nginx is running well ~&quot;\n    fi\n&#125;\n\ncheck_root\nwhile true; do\n    nginx_daemon\n    sleep 3\ndone\n\n执行结果[ryan@ryan-tencentcloud-2]~$ sudo su -\n[root@ryan-tencentcloud-2]~# cd &#x2F;home&#x2F;ryan&#x2F;\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# systemctl stop nginx\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# nohup sh nginx_daemon.sh &amp;\n[1] 117505\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# nohup: ignoring input and appending output to &#39;nohup.out&#39;\n\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# systemctl stop nginx\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# ps -aux | grep nginx_daemon.sh | grep -v grep\nroot     117505  0.1  0.0 113288  1484 pts&#x2F;1    SN   08:03   0:00 sh nginx_daemon.sh\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# kill -9 117505\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan#\n[1]  + killed     nohup sh nginx_daemon.sh\n[root@ryan-tencentcloud-2]&#x2F;home&#x2F;ryan# cat -n nohup.out\n     1\n     2  [2020-10-02 05:03:20] Nginx is down, Start it ...\n     3  [2020-10-02 05:03:24] Nginx is running well ~\n     4  [2020-10-02 05:03:27] Nginx is running well ~\n     5  [2020-10-02 05:03:30] Nginx is running well ~\n     6  [2020-10-02 05:03:33] Nginx is running well ~\n     7  [2020-10-02 05:03:36] Nginx is running well ~\n     8  [2020-10-02 05:03:39] Nginx is running well ~\n     9  [2020-10-02 05:03:43] Nginx is down, Start it ...\n    10  [2020-10-02 05:03:46] Nginx is running well ~\n    11  [2020-10-02 05:03:49] Nginx is running well ~\n\n\n函数中传递参数\n函数中传递参数和调用脚本传递参数类似，都是使用 $1 $2 $3 $4 $5 $6 $7 这种方式。\n\n语法\n\n\n语法\n\n\n\nfunction-name $1 $2\n\n\n练习需求描述编写一个脚本，该脚本可以实现计算器的功能，可以进行 + - x / %数学运算。\n例如：sh calculate.sh 30 + 40 | sh calculate.sh 30 - 40。\n思路分析\n数学运算使用 bc 或者 expr 处理。\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 实现计算器的功能，可以进行 &#96;+ - x &#x2F; %&#96;数学运算。\n# 例如：&#96;sh calculate.sh 30 + 40    | sh calculate.sh 30 - 40&#96;。\n\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\ncalculate() &#123;\n    case $2 in\n    +)\n        echo -e &quot;$1 $2 $3 &#x3D; $(expr $1 + $3)&quot;\n        # echo -e &quot;$1 + $3&quot; | bc\n        ;;\n    -)\n        echo -e &quot;$1 $2 $3 &#x3D; $(expr $1 - $3)&quot;\n        ;;\n    x)\n        echo -e &quot;$1 $2 $3 &#x3D; $(expr $1 \\* $3)&quot;\n        ;;\n    &#x2F;)\n        echo -e &quot;$1 $2 $3 &#x3D; $(expr $1 &#x2F; $3)&quot;\n        ;;\n    %)\n        echo -e &quot;$1 $2 $3 &#x3D; $(expr $1 % $3)&quot;\n        ;;\n    *)\n        echo -e &quot;$&#123;Red_font_prefix&#125;ERROR!!!$&#123;Font_color_suffix&#125; Pls input a operator in (+|-|x|&#x2F;|%)!&quot;\n        ;;\n    esac\n&#125;\n\ncalculate $1 $2 $3\n\n执行结果[ryan@ryan-tencentcloud-2]~ sh calculate.sh 20 + 3\n20 + 3 &#x3D; 23\n[ryan@ryan-tencentcloud-2]~ sh calculate.sh 20 - 3\n20 - 3 &#x3D; 17\n[ryan@ryan-tencentcloud-2]~ sh calculate.sh 20 x 3\n20 x 3 &#x3D; 60\n[ryan@ryan-tencentcloud-2]~ sh calculate.sh 20 &#x2F; 3\n20 &#x2F; 3 &#x3D; 6\n[ryan@ryan-tencentcloud-2]~ sh calculate.sh 20 % 3\n20 % 3 &#x3D; 2\n[ryan@ryan-tencentcloud-2]~ sh calculate.sh  20 * 30\nERROR!!! Pls input a operator (+|-|x|&#x2F;|%)!\n\n函数返回值语法\n\n\n\n返回值方式\n\n\n\n方法一\nreturn\n\n\n方法二\necho\n\n\n\n使用 return 返回值\n只能返回 1 - 255 的整数\n函数使用 return 返回值，通常只是用来供其它地方调用获取状态。因此，通常仅返回 0 或 1。0 表示成功， 1 表示失败。\n\n\n使用 echo 返回值\n可以返回任何字符串结果\n通常用于返回数据，比如一个字符串值或者列表值。\n\n\n\n练习 1需求描述判断 nginx 进程是否存在。如果存在终端输出 “Nginx is running!”，否则终端输出”Nginx is stoped~”。\n思路分析\n使用 ps -ef | grep nginx | grep -v grep 命令查看 nginx 进程，grep -v grep 命令排除 grep 进程。如果脚本名中带有 nginx 字段，还需要排除脚本进程。\n函数执行结果为 0 时输出 “Nginx is running!”，否则终端输出”Nginx is stoped~”。\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 判断 nginx 进程是否存在。\n# 如果存在终端输出 &quot;Nginx is running!&quot;. 否则终端输出&quot;Nginx is stoped~&quot;\n\nthis_pid&#x3D;$$\n\nis_nginx_running() &#123;\n    ps -ef | grep nginx | grep -v grep | grep -v $&#123;this_pid&#125; &amp;&gt;&#x2F;dev&#x2F;null\n    if [ $? -eq 0 ]; then\n        return # return 0\n    else\n        return 1\n    fi\n&#125;\n\nis_nginx_running &amp;&amp; echo -e &quot;Nginx is running!&quot; || echo -e &quot;Nginx is stoped~&quot;\n\n代码执行[ryan@ryan-tencentcloud-2]~ sh -x is_nginx_running.sh    #sh -x 查看执行过程\n+ PATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;home&#x2F;ryan&#x2F;bin\n+ export PATH\n+ this_pid&#x3D;119050\n+ is_nginx_running\n+ ps -ef\n+ grep nginx\n+ grep -v grep\n+ grep -v 119050\n+ &#39;[&#39; 0 -eq 0 &#39;]&#39;\n+ return\n+ echo -e &#39;Nginx is running!&#39;\nNginx is running!\n[ryan@ryan-tencentcloud-2]~ sudo systemctl stop nginx\n[ryan@ryan-tencentcloud-2]~ sh -x is_nginx_running.sh\n+ PATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;home&#x2F;ryan&#x2F;bin\n+ export PATH\n+ this_pid&#x3D;119098\n+ is_nginx_running\n+ grep -v grep\n+ grep -v 119098\n+ ps -ef\n+ grep nginx\n+ &#39;[&#39; 1 -eq 0 &#39;]&#39;\n+ return 1\n+ echo -e &#39;Nginx is stoped~&#39;\nNginx is stoped~\n\n练习 2需求描述获取系统所有用户并输出。\n思路分析\n系统所有用户在 /etc/passwd 文件中。\n使用 cut -d &quot;:&quot; -f 1 命令截取输出结果中的第一列。cut 命令默认属于使用 TAB 作为分隔符，使用 -d &quot;:&quot; 命令指定 : 为分隔符。使用 -f 1 参数指定获取第一列。\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 获取系统所有用户并输出\n\nget_user() &#123;\n    user&#x3D;$(cat &#x2F;etc&#x2F;passwd | cut -d &quot;:&quot; -f 1)\n    echo $&#123;user&#125;\n&#125;\n\nuser_list&#x3D;$(get_user)\nindex&#x3D;0\nfor user in $&#123;user_list&#125;; do\n    # echo -e &quot;This is $&#123;index&#125; user: $&#123;user&#125; .&quot;\n    printf &quot;This is %02d user: %s\\n&quot; $&#123;index&#125; $&#123;user&#125;\n    index&#x3D;$(($&#123;index&#125; + 1))\ndone\n\n代码执行[ryan@ryan-tencentcloud-2]~ sh get_user.sh\nThis is 00 user: root\nThis is 01 user: bin\nThis is 02 user: daemon\nThis is 03 user: adm\nThis is 04 user: lp\nThis is 05 user: sync\nThis is 06 user: shutdown\nThis is 07 user: halt\nThis is 08 user: mail\nThis is 09 user: operator\nThis is 10 user: games\nThis is 11 user: ftp\nThis is 12 user: nobody\nThis is 13 user: systemd-network\nThis is 14 user: dbus\nThis is 15 user: polkitd\nThis is 16 user: libstoragemgmt\nThis is 17 user: colord\nThis is 18 user: rpc\nThis is 19 user: abrt\nThis is 20 user: rtkit\nThis is 21 user: pulse\nThis is 22 user: chrony\nThis is 23 user: gluster\nThis is 24 user: ntp\nThis is 25 user: tss\nThis is 26 user: sssd\nThis is 27 user: geoclue\nThis is 28 user: mysql\nThis is 29 user: setroubleshoot\nThis is 30 user: gdm\nThis is 31 user: rpcuser\nThis is 32 user: nfsnobody\nThis is 33 user: sshd\nThis is 34 user: postfix\nThis is 35 user: tcpdump\nThis is 36 user: ryan\nThis is 37 user: nginx\n\n局部变量和全局变量全局变量\n不做特殊声明，Shell 中变量都是全局变量。\nTips：大型脚本程序中函数慎用全局变量。\n\n局部变量\n定义变量时，使用 local 关键字定义局部变量。\n如果函数内和函数外存在同名变量，则函数内部变量会覆盖外部变量。\n\n练习#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# 全局变量、局部变量练习\n\nvar1&#x3D;&quot;Hello World&quot;\n\ntest() &#123;\n    var1&#x3D;&quot;Hello Ryan~&quot;\n    echo -e &quot;函数内部定义的全部变量 var1 值为： $&#123;var1&#125;&quot;\n    var2&#x3D;88\n    local var3&#x3D;99\n&#125;\n\necho -e &quot;函数外部定义的全部变量 var1 值为： $&#123;var1&#125;&quot;\ntest\necho -e &quot;函数内部定义的全部变量 var2 值为： $&#123;var2&#125;&quot;\necho -e &quot;函数内部定义的局部变量 var3 值为： $&#123;var3&#125;&quot;\n\n# Output\n#\n# 函数外部定义的全部变量 var1 值为： Hello World\n# 函数内部定义的全部变量 var1 值为： Hello Ryan~\n# 函数内部定义的全部变量 var2 值为： 88\n# 函数内部定义的局部变量 var3 值为：\n\n函数库定义\n经常使用的重复代码封装成函数文件；\n一般不直接执行，而是由其它脚本调用。\n库文件名的后缀是任意的，但一般使用 .lib。\n库文件通常没有可执行选项。\n库文件无需和脚本在同级目录，只需在脚本中引用时指定详细路径。\n库文件第一行一般使用 #!/bin/echo 输出警告信息，避免用户直接执行。\n\n练习需求描述定义一个函数库，该函数实现以下几个函数：\n\n加法函数 add\n减法函数 reduce\n乘法函数 multiple\n除法函数 divide\n打印系统运行情况的函数 sys_load，该函数可以显示内存运行情况、磁盘使用情况。\n\n思路分析\n加减乘除运算使用 expr 进行计算。\n内存运行情况 free -m ，磁盘使用情况 df -h。\n\n脚本编写#!&#x2F;bin&#x2F;echo\n\nadd() &#123;\n    echo -e &quot;$1 + $2 &#x3D; $(expr $1 + $2)&quot;\n&#125;\n\nreduce() &#123;\n    echo -e &quot;$1 - $2 &#x3D; $(expr $1 - $2)&quot;\n&#125;\n\nmultiple() &#123;\n    echo -e &quot;$1 * $2 &#x3D; $(expr $1 \\* $2)&quot;\n&#125;\n\ndivide() &#123;\n    echo -e &quot;$1 &#x2F; $2 &#x3D; $(expr $1 &#x2F; $2)&quot;\n&#125;\n\nsys_load() &#123;\n    echo -e &quot;-------- Memory Info --------&quot;\n    free -m\n    echo -e &quot;-----------------------------\\n&quot;\n    echo -e &quot;------ Disk Usage Info ------&quot;\n    df -h\n    echo -e &quot;-----------------------------&quot;\n&#125;\n\n\n#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n. &#x2F;home&#x2F;ryan&#x2F;base_function.lib\n\nadd 20 3\nreduce 20 3\nmultiple 20 3\ndivide 20 3\nsys_load\n\n\n代码执行20 + 3 &#x3D; 23\n20 - 3 &#x3D; 17\n20 * 3 &#x3D; 60\n20 &#x2F; 3 &#x3D; 6\n\n-------- Memory Info --------\n              total        used        free      shared  buff&#x2F;cache   available\nMem:           1987         643         208           1        1135        1199\nSwap:          1024         290         734\n-----------------------------\n\n------ Disk Usage Info ------\nFilesystem      Size  Used Avail Use% Mounted on\ndevtmpfs        981M     0  981M   0% &#x2F;dev\ntmpfs           994M   24K  994M   1% &#x2F;dev&#x2F;shm\ntmpfs           994M  732K  993M   1% &#x2F;run\ntmpfs           994M     0  994M   0% &#x2F;sys&#x2F;fs&#x2F;cgroup\n&#x2F;dev&#x2F;vda1        50G  9.2G   38G  20% &#x2F;\ntmpfs           199M     0  199M   0% &#x2F;run&#x2F;user&#x2F;0\ntmpfs           199M     0  199M   0% &#x2F;run&#x2F;user&#x2F;1000\n-----------------------------\n\n\n\n\n\n\n\n\n\n\n本文代码：03-shell\n","slug":"2020-10-03-03_函数的高级用法","date":"2020-10-03T11:21:26.000Z","categories_index":"Linux","tags_index":"Linux,Shell","author_index":"JaimeZeng"},{"id":"a6f9db63870b876ac4f0e8fb7a8c3c63","title":"变量的高级用法","content":"该小节介绍了变量的高级用法，如何进行变量替换、字符串处理方法、如何利用命令替换为变量赋值、有类型变量和变量引用的使用方法，并在实际环境中演示如何使用，加深大家的认识和理解；最后介绍 shell 中的数学运算方法，使用 expr 和 bc…\n变量替换和测试变量替换\n\n\n语法\n说明\n\n\n\n$&#123;变量名#匹配规则&#125;\n从变量开头进行规则匹配，将符合最短的数据删除\n\n\n$&#123;变量名##匹配规则&#125;\n从变量开头进行规则匹配，将符合最长的数据删除\n\n\n$&#123;变量名%匹配规则&#125;\n从尾部开头进行规则匹配，将符合最短的数据删除\n\n\n$&#123;变量名%%匹配规则&#125;\n从尾部开头进行规则匹配，将符合最长的数据删除\n\n\n$&#123;变量名/旧字符串/新字符串&#125;\n变量内容符合旧字符串，则第一个旧字符串会被新字符串取代\n\n\n$&#123;变量名//旧字符串/新字符串&#125;\n变量内容符合旧字符串，则全部的旧字符串会被新字符串取代\n\n\n[ryan@ryan-tencentcloud-1 ~]$ var0&#x3D;&quot;I love you, do you love me&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var0\nI love you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0#*ov&#125;    # 从头开始匹配，最短删除\ne you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0##*ov&#125;    # 从头开始匹配，最长删除\ne me\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0%ov*&#125;    # 从尾开始匹配，最短删除\nI love you, do you l\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0%%ov*&#125;    # 从尾开始匹配，最长删除\nI l\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0&#x2F;love&#x2F;hate&#125;    # 替换变量内的第一个旧字符串为新字符串\nI hate you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;var0&#x2F;&#x2F;love&#x2F;hate&#125;    # 替换变量内的所有的旧字符串为新字符串\nI hate you, do you hate me\n\n变量测试\n\n\n变量配置方式\nstr 没有配置\nstr 为空字符串\nstr 已配置且非空\n\n\n\nvar=${str-expr}\nvar=expr\nvar=\nvar=$str\n\n\nvar=${str:-expr}\nvar=expr\nvar=expr\nvar=$str\n\n\nvar=${str+expr}\nvar=\nvar=expr\nvar=expr\n\n\nvar=${str:+expr}\nvar=\nvar=\nvar=expr\n\n\nvar=${str=expr}\nvar=expr\nvar=\nvar=$str\n\n\nvar=${str:=expr}\nvar=expr\nvar=expr\nvar=$str\n\n\n字符串处理计算字符串长度\n\n\n\n语法\n说明\n\n\n\n方法一\n$&#123;#string&#125;\n无\n\n\n方法二\nexpr length &quot;$string&quot;\nstring 中有空格就必须要加双引号\n\n\n[ryan@ryan-tencentcloud-1 ~]$ var0&#x3D;&quot;I love you, do you love me&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var0\nI love you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo $&#123;#var0&#125;    # $&#123;#string&#125; 方法计算字符串长度\n26\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr length &quot;$var0&quot;&#96;    # expr length &quot;$string&quot; 方法计算字符串长度\n26\n\n获取子串字符在字符串中的索引位置语法：expr index $string $substring ，获取子串字符在字符串中的索引位置。子串是字符串，就会将子串切分成单个字符，查找字符在字符串中第一次出现的位置。\n[ryan@ryan-tencentcloud-1 ~]$ var0&#x3D;&quot;I love you, do you love me&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var0\nI love you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr index &quot;$var0&quot; love&#96;    # 获取字符在字符串中的索引位置，返回字符 l 在字符串中的索引位置\n3\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr index &quot;$var0&quot; me&#96;    # 返回字符 e 在子串中的位置\n6\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr index &quot;$var0&quot; hate&#96;    # 返回字符 e 在子串中的位置\n6\n\n获取子串长度语法：expr match $string substr，从头开始匹配，返回子串长度，支持正则表达式。\n[ryan@ryan-tencentcloud-1 ~]$ clear\n[ryan@ryan-tencentcloud-1 ~]$ var0&#x3D;&quot;I love you, do you love me&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var0\nI love you, do you love me\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr match &quot;$var0&quot; .*me&#96;\n26\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr match &quot;$var0&quot; .*you&#96;\n18\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr match &quot;$var0&quot; &quot;I love you&quot;&#96;\n10\n\n抽取字符串中的子串\n\n\n\n语法\n说明\n\n\n\n方法一\n$&#123;string:position&#125;\n从 string 中的 position 位置开始\n\n\n方法二\n$&#123;string:position:length&#125;\n从 string 中的 position 位置开始，匹配长度为 length\n\n\n方法三\n$&#123;string: -position&#125;\n从 string 的右边开始匹配\n\n\n方法四\n$&#123;string: (position)&#125;\n从 string 的左边开始匹配\n\n\n方法五\nexpr substr $string $position $length\n从 string 中的 position 位置开始，匹配长度为 length\n\n\n课程中讲的是：使用 $&#123;string:position&#125; 索引计数从 0 开始，使用 expr substr 索引从 1 开始。但是我实验确实：$&#123;string:position:length&#125; 匹配长度为 length，使用 expr substr $string $position $length 匹配长度为 length-1（换了 2 台电脑都是同样结果）。\n[ryan@ryan-tencentcloud-1 ~]$ clear\n[ryan@ryan-tencentcloud-1 ~]$ var0&#x3D;&quot;Hello World, Hello Ryan&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var0\nHello World, Hello Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0:13&#125;&quot;\nHello Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0:6:5&#125;&quot;\nWorld\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0: (-5)&#125;&quot;\n Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0: (5)&#125;&quot;\n World, Hello Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0: (6)&#125;&quot;\nWorld, Hello Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &quot;$&#123;var0: (-10)&#125;&quot;\nHello Ryan\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr substr &quot;$var0&quot; 6 5&#96;\nWorl\n[ryan@ryan-tencentcloud-1 ~]$ echo &#96;expr substr &quot;$var0&quot; 6 6&#96;\nWorld\n\n字符串处理练习需求描述变量 string=”Bigdata process framework is Hadoop, Hadoop is an open source project.”。执行脚本后打印输出 string 字符串变量，并给出用户以下选项：\n\n打印 string 长度\n删除字符串中所有的 Hadoop\n替换第一个 Hadoop 为 Mapreduce\n替换全部 Hadoop 为 Mapreduce\n\n用户输入数字 1|2|3|4 ，可以执行对应项功能；输入 q|Q 能退出交互模式。\n思路分析\n将不同的功能模块划分，编写实现功能函数。\nfunction print_tips    # 打印提示信息\nfunction len_of_string    # 打印 string 长度\nfunction del_hadoop    # 删除字符串中所有的 Hadoop\nfunction rep_hadoop_mapreduce_first    #替换第一个 Hadoop 为 Mapreduce\nfunction rep_hadoop_mapreduce_all    #替换全部 Hadoop 为 Mapreduce\n程序主流程设计。\n\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\n# function print_tips    # 打印提示信息\n# function len_of_string    # 打印 string 长度\n# function del_hadoop    # 删除字符串中所有的 Hadoop\n# function rep_hadoop_mapreduce_first    #替换第一个 Hadoop 为 Mapreduce\n# function rep_hadoop_mapreduce_all    #替换全部 Hadoop 为 Mapreduce\n#\n\nstring&#x3D;&quot;Bigdata process framework is Hadoop, Hadoop is an open source project.&quot;\n\nfunction print_tips() &#123;\n    echo &amp;&amp; echo -e &quot;\n    *******************************************************************\n    # 字符串处理练习\n\n    变量 string 为 &#39;Bigdata process framework is Hadoop, Hadoop is an\n    open source project.&#39;\n\n            0. 打印 string.\n            1. 打印 string 长度.\n            2. 删除字符串中所有的 Hadoop.\n            3. 替换第一个 Hadoop 为 Mapreduce.\n            4. 替换全部 Hadoop 为 Mapreduce.\n\n    *******************************************************************\n    &quot; &amp;&amp; echo\n&#125;\n\nfunction len_of_string() &#123;\n    if [ -n &quot;$&#123;string&#125;&quot; ]; then\n        echo -e &quot;长度为：$&#123;#string&#125;&quot;\n    else\n        echo -e &quot;字符串为空！&quot;\n    fi\n&#125;\n\nfunction del_hadoop() &#123;\n    if [ -n &quot;$&#123;string&#125;&quot; ]; then\n        echo -e &quot;删除字符串中所有的 Hadoop 后：$&#123;string&#x2F;&#x2F;Hadoop&#x2F;&#125;&quot;\n    else\n        echo -e &quot;字符串为空！&quot;\n    fi\n&#125;\n\nfunction rep_hadoop_mapreduce_first() &#123;\n    if [ -n &quot;$&#123;string&#125;&quot; ]; then\n        echo -e &quot;替换第一个 Hadoop 为 Mapreduce：$&#123;string&#x2F;Hadoop&#x2F;Mapredue&#125;&quot;\n    else\n        echo -e &quot;字符串为空！&quot;\n    fi\n&#125;\n\nfunction rep_hadoop_mapreduce_all() &#123;\n    if [ -n &quot;$&#123;string&#125;&quot; ]; then\n        echo -e &quot;替换全部 Hadoop 为 Mapreduce：$&#123;string&#x2F;&#x2F;Hadoop&#x2F;Mapredue&#125;&quot;\n    else\n        echo -e &quot;字符串为空！&quot;\n    fi\n&#125;\n\n# print_tips\n# len_of_string\n# del_hadoop\n# rep_hadoop_mapreduce_first\n# rep_hadoop_mapreduce_all\n\nwhile true; do\n    # echo -e&quot;[ string&#x3D;$string ]&quot;\n    print_tips\n    read -e -p &quot;Pls input your choice (0|1|2|3|4|q|Q)&quot; choice\n    case &quot;$choice&quot; in\n    0)\n        echo &quot;$string&quot;\n        ;;\n    1)\n        len_of_string\n        ;;\n    2)\n        del_hadoop\n        ;;\n    3)\n        rep_hadoop_mapreduce_first\n        ;;\n    4)\n        rep_hadoop_mapreduce_all\n        ;;\n    q | Q)\n        exit\n        ;;\n    *)\n        echo -e &quot;!!! Error, Pls input your choice (0|1|2|3|4|q|Q)&quot;\n        ;;\n    esac\ndone\n\n命令替换语法\n\n\n\n语法\n\n\n\n方法一\n`command`\n\n\n方法二\n$(command)\n\n\n练习一需求描述获取系统所有用户并输出。\n思路分析\n系统所有用户在 /etc/passwd 文件中。\n使用 cut -d &quot;:&quot; -f 1 命令截取输出结果中的第一列。cut 命令默认属于使用 TAB 作为分隔符，使用 -d &quot;:&quot; 命令指定 : 为分隔符。使用 -f 1 参数指定获取第一列。\n使用 (())两个小括号表示算术运算。\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nindex&#x3D;0\nfor user in $(cat &#x2F;etc&#x2F;passwd | cut -d &quot;:&quot; -f 1); do\n    # echo -e &quot;This is $index user: $user.&quot;\n    printf &quot;This is %2d user: $user.\\n&quot; $index\n    index&#x3D;$(($index + 1))\ndone\n\n练习二需求描述当前日期时间格式化并根据当前时间计算今年和明年年份。\n思路分析\n使用 TZ=&#39;America/Los_Angeles&#39;  命令显示东八区北京时间。\n使用 date 获取当前日期时间。\n使用 %Y-%m-%d %H:%M:%S 或者 %F %T 格式化输出日期时间。\n计算今年和明年年份，使用 (())两个小括号表示算术运算。\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\necho &amp;&amp; echo -e &quot;Current time: $(TZ&#x3D;&#39;America&#x2F;Los_Angeles&#39; date &quot;+%Y-%m-%d %H:%M:%S&quot;).\nCurrent time: $(TZ&#x3D;&#39;America&#x2F;Los_Angeles&#39; date &quot;+%F %T&quot;).\nThis is $(date +%Y) year, next year is $(($(date +%Y) + 1)).\n&quot; &amp;&amp; echo\n\n练习三需求描述根据系统时间获取今年还剩下多少天/星期，已经过了多少天/星期。\n思路分析\n使用 date 获取当前日期时间。\n使用 %j 获取今年已经过了多少天，使用 %U (以周日为每星期第一天)、 %V 或者 %W(以周一为每星期第一天)获取今年已经过了多少星期。\n判断当前年份是否为闰年，然后用 365/366 减去已经过的天数就是剩下的天数，再除以 7 就是剩下的星期数。\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nif [ $(($(date +%Y) % 4)) -eq 0 -a $(($(date +%Y) % 100)) -ne 0 ]; then\n    days&#x3D;366\nelif [ $(($(date +%Y) % 400)) -eq 0 ]; then\n    days&#x3D;366\nelse\n    days&#x3D;365\nfi\n\necho &amp;&amp; echo -e &quot;$(date +%Y) year have $days days.\n$(date +%Y) year have passed $(date +%j) days.\n$(date +%Y) year have passed $(($(date +%U) - 1)) weeks, with Sunday as first day of week.\n$(date +%Y) year have passed $(($(date +%V) - 1)) weeks, with Monday as first day of week.\n$(date +%Y) year have passed $(($(date +%W) - 1)) weeks, with Monday as first day of week.\nThere is $(($days - $(date +%j))) days before $(($(date +%Y) + 1)) year.\nThere is $((($days - $(date +%j)) &#x2F; 7)) weeks before $(($(date +%Y) + 1)) year.&quot; &amp;&amp; echo\n\n练习四需求分析判断 nginx 进程是否存在，若不存在则自动拉起该进程。\n思路分析\n使用 ps -ef | grep nginx | grep -v grep | wc -l 查看 nginx 进程个数，grep -v grep 命令排除 grep 进程， wc -l 命令统计个数。\n当进程个数大于 0 时 nginx 进程存在。否则，nginx 进程不存在，重启 nginx 服务。\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nnginx_process_num&#x3D;$(ps -ef | grep nginx | grep -v grep | wc -l)\nif [ $nginx_process_num -ne 0 ]; then\n    echo -e &quot;nginx 进程存在！&quot;\nelse\n    echo -e &quot;nginx 进程不存在！&quot; &amp;&amp; sudo systemctl start nginx\nfi\n\n有类型变量\ndeclare 命令和 typeset 命令两者等价；\ndeclare 命令、 typeset 命令都是用来定义变量类型的；\n\n\n\n\n参数\n含义\n\n\n\n-r\n将变量定义为只读\n\n\n-i\n将变量定义为整数\n\n\n-a\n将变量定义为数组\n\n\n-f\n显示系统定义过的所有函数名及函数体\n\n\n-F\n显示系统定义过的函数名\n\n\n-x\n将变量声明定义为环境变量，可供 shell 以外的程序来使用。\n\n\n取消声明的变量：\n\ndeclare +r\ndeclare +i\ndeclare +a\ndeclare +x\n\n声明变量为只读类型\ndeclare -r 声明变量为只读类型：声明之后不可修改。\n\n[ryan@ryan-tencentcloud-1 ~]$ var1&#x3D;&quot;hello world&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var1\nhello world\n[ryan@ryan-tencentcloud-1 ~]$ var1&#x3D;&quot;hello ryan&quot;\n[ryan@ryan-tencentcloud-1 ~]$ echo $var1\nhello ryan\n[ryan@ryan-tencentcloud-1 ~]$ declare -r var1&#x3D;&quot;hello world&quot;\n[ryan@ryan-tencentcloud-1 ~]$ var1&#x3D;&quot;hello ryan&quot;\nzsh: read-only variable: var1\n\n声明变量为整数类型\ndeclare -i 声明变量为整数类型，可以算术运算。\n\n[ryan@ryan-tencentcloud-1 ~]$ num1&#x3D;10\n[ryan@ryan-tencentcloud-1 ~]$ num2&#x3D;$num1+10\n[ryan@ryan-tencentcloud-1 ~]$ echo $num2\n10+10\n[ryan@ryan-tencentcloud-1 ~]$ echo $(($num1 + 10)) #作为整数类型进行算术运算\n20\n[ryan@ryan-tencentcloud-1 ~]$ expr $num1 + 10\n20\n[ryan@ryan-tencentcloud-1 ~]$ declare -i num3&#x3D;$num1+10\n[ryan@ryan-tencentcloud-1 ~]$ echo $num3\n20\n\n显示系统定义过的函数名及函数体\ndeclare -f 显示系统定义过的所有函数名及函数体。\ndeclare -F 显示系统定义过的函数名。\n\n## declare -f 显示系统定义过的所有函数名及函数体\n[ryan@ryan-tencentcloud-1 ~]$ declare -f\n\n## declare -F 显示系统定义过的函数名\n[ryan@ryan-tencentcloud-1 ~]$ declare -F\n\n声明变量类型为数组\ndeclare -a 声明变量类型为数组，数组下标索引从 1 开始。\n\n#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\ndeclare -a array\narray&#x3D;(&quot;letme&quot; &quot;zztai1&quot; &quot;mlxg&quot; &quot;karsa&quot; &quot;xiaohu&quot; &quot;xiye&quot; &quot;uzi&quot; &quot;meiko&quot; &quot;ming&quot;)\n\nfunction printf_array() &#123;\n    index&#x3D;1\n    for user in $&#123;array[@]&#125;; do\n        # echo -e &quot;    - This is $index user: $user.&quot;\n        printf &quot;    - This is %2d user: $user.\\n&quot; $index\n        index&#x3D;$((($index + 1)))\n    done\n&#125;\n\necho -e &quot;打印数组的所有元素: $&#123;array[@]&#125;&quot;\necho -e &quot;数组下标索引为 1 的元素: $&#123;array[1]&#125;&quot;\necho -e &quot;数组下标索引为 2 的元素: $&#123;array[2]&#125;&quot;\necho -e &quot;数组下标索引为 6 的元素: $&#123;array[6]&#125;&quot;\necho -e &quot;数组下标索引为 8 的元素: $&#123;array[8]&#125;&quot;\necho -e &quot;数组长度: $&#123;#array[@]&#125;&quot;\necho -e &quot;数组第 6 个元素 $&#123;array[6]&#125; 长度: $&#123;#array[6]&#125;&quot;\necho -e &quot;数组第 8 个元素 $&#123;array[8]&#125; 长度: $&#123;#array[8]&#125;&quot;\necho -e &quot;循环遍历数组打印元素: &quot; &amp;&amp; printf_array\necho -e &quot;---------------------&quot;\necho -e &quot;给数组下标索引为 10 的元素赋值 Firefox: &quot; &amp;&amp; array[10]&#x3D;&quot;FireFox&quot;\necho -e &quot;数组下标索引为 10 的元素: $&#123;array[10]&#125;&quot;\necho -e &quot;给数组下标索引为 11 的元素赋值 Heart: &quot; &amp;&amp; array[11]&#x3D;&quot;Heart&quot;\necho -e &quot;数组下标索引为 11 的元素: $&#123;array[11]&#125;&quot;\necho -e &quot;给数组下标索引为 13 的元素赋值 Dog8: &quot; &amp;&amp; array[13]&#x3D;&quot;Dog8&quot;\necho -e &quot;数组下标索引为 13 的元素: $&#123;array[13]&#125;&quot;\necho -e &quot;新数组长度: $&#123;#array[@]&#125;&quot;\necho -e &quot;循环遍历新数组打印元素: &quot; &amp;&amp; printf_array\necho -e &quot;---------------------&quot;\necho -e &quot;打印数组中第 1 - 9 的元素: $&#123;array[@]:0:8&#125;&quot;\necho -e &quot;删除数组中第 12 个元素:&quot; &amp;&amp; unset array[12]\necho -e &quot;数组下标索引为 12 的元素: $&#123;array[12]&#125;&quot;\necho -e &quot;新数组长度: $&#123;#array[@]&#125;&quot;\necho -e &quot;循环遍历新数组打印元素: &quot; &amp;&amp; printf_array\necho -e &quot;---------------------&quot;\necho -e &quot;将数组中元素值包含 FireFox 的替换为 阿布: $&#123;array[@]&#x2F;FireFox&#x2F;阿布&#125;&quot;\necho -e &quot;数组下标索引为 10 的元素: $&#123;array[10]&#125;&quot;\necho -e &quot;新数组长度: $&#123;#array[@]&#125;&quot;\necho -e &quot;循环遍历新数组打印元素: &quot; &amp;&amp; printf_array\necho -e &quot;---------------------&quot;\necho -e &quot;清空数组: &quot; &amp;&amp; unset array\necho -e &quot;新数组长度: $&#123;#array[@]&#125;&quot;\necho -e &quot;循环遍历新数组打印元素: &quot; &amp;&amp; printf_array\necho -e &quot;---------------------&quot;\n\n# Output\n#\n# 打印数组的所有元素: letme zztai1 mlxg karsa xiaohu xiye uzi meiko ming\n# 数组下标索引为 1 的元素: zztai1\n# 数组下标索引为 2 的元素: mlxg\n# 数组下标索引为 6 的元素: uzi\n# 数组下标索引为 8 的元素: ming\n# 数组长度: 9\n# 数组第 6 个元素 uzi 长度: 3\n# 数组第 8 个元素 ming 长度: 4\n# 循环遍历数组打印元素:\n#     - This is  1 user: letme.\n#     - This is  2 user: zztai1.\n#     - This is  3 user: mlxg.\n#     - This is  4 user: karsa.\n#     - This is  5 user: xiaohu.\n#     - This is  6 user: xiye.\n#     - This is  7 user: uzi.\n#     - This is  8 user: meiko.\n#     - This is  9 user: ming.\n# ---------------------\n# 给数组下标索引为 10 的元素赋值 Firefox:\n# 数组下标索引为 10 的元素: FireFox\n# 给数组下标索引为 11 的元素赋值 Heart:\n# 数组下标索引为 11 的元素: Heart\n# 给数组下标索引为 13 的元素赋值 Dog8:\n# 数组下标索引为 13 的元素: Dog8\n# 新数组长度: 12\n# 循环遍历新数组打印元素:\n#     - This is  1 user: letme.\n#     - This is  2 user: zztai1.\n#     - This is  3 user: mlxg.\n#     - This is  4 user: karsa.\n#     - This is  5 user: xiaohu.\n#     - This is  6 user: xiye.\n#     - This is  7 user: uzi.\n#     - This is  8 user: meiko.\n#     - This is  9 user: ming.\n#     - This is 10 user: FireFox.\n#     - This is 11 user: Heart.\n#     - This is 12 user: Dog8.\n# ---------------------\n# 打印数组中第 1 - 9 的元素: letme zztai1 mlxg karsa xiaohu xiye uzi meiko\n# 删除数组中第 12 个元素:\n# 数组下标索引为 12 的元素:\n# 新数组长度: 12\n# 循环遍历新数组打印元素:\n#     - This is  1 user: letme.\n#     - This is  2 user: zztai1.\n#     - This is  3 user: mlxg.\n#     - This is  4 user: karsa.\n#     - This is  5 user: xiaohu.\n#     - This is  6 user: xiye.\n#     - This is  7 user: uzi.\n#     - This is  8 user: meiko.\n#     - This is  9 user: ming.\n#     - This is 10 user: FireFox.\n#     - This is 11 user: Heart.\n#     - This is 12 user: Dog8.\n# ---------------------\n# 将数组中元素值包含 FireFox 的替换为 阿布: letme zztai1 mlxg karsa xiaohu xiye uzi meiko ming 阿布 Heart Dog8\n# 数组下标索引为 10 的元素: FireFox\n# 新数组长度: 12\n# 循环遍历新数组打印元素:\n#     - This is  1 user: letme.\n#     - This is  2 user: zztai1.\n#     - This is  3 user: mlxg.\n#     - This is  4 user: karsa.\n#     - This is  5 user: xiaohu.\n#     - This is  6 user: xiye.\n#     - This is  7 user: uzi.\n#     - This is  8 user: meiko.\n#     - This is  9 user: ming.\n#     - This is 10 user: FireFox.\n#     - This is 11 user: Heart.\n#     - This is 12 user: Dog8.\n# ---------------------\n# 清空数组:\n# 新数组长度: 0\n# 循环遍历新数组打印元素:\n# ---------------------\n\n声明变量为环境变量\ndeclear -x 声明变量为环境变量，可供 shell 以外的程序来使用。\n\n数学运算 expr语法\n\n\n\n语法\n\n\n\n方法一\nexpr $num1 operator $num2\n\n\n方法二\n$(($num1 operator $num2))\n\n\n操作符对照表| 操作符         | 含义                                        || ————– | ——————————————- | ——————————————- || num1          | num2                                       | num1 不为空且非 0，返回 num1；否则返回 num2 || num1 &amp; num2  | num1 不为 i 空且非 0，返回 num1；否则返回 0 || num1 &lt; num2  | num1 小于 num2，返回 1；否则返回 0          || num1 &lt;= num2 | num1 小于等于 num2，返回 1；否则返回 0      || num1 = num2  | num1 等于 num2，返回 1；否则返回 0          || num1 != num2 | num1 不等于 num2，返回 1；否则返回 0        || num1 &gt; num2  | num1 大于 num2，返回 1；否则返回 0          || num1 &gt;= num2 | num1 大于等于 num2，返回 1；否则返回 0      || num1 + num2  | num1 num2 求和                              || num1 - num2  | num1 num2 求差                              || num1 * num2  | num1 num2 求积                              || num1 / num2  | num1 num2 求商                              || num1 % num2  | num1 num2 求余                              |\n#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\nset -x\n\ndeclare +i num0 num1 num2 num3 num4\ndeclare -i num0&#x3D;56 num1&#x3D;78 num2&#x3D;34 num3&#x3D;90 num4&#x3D;12\n\nexpr $num0 \\| $num3\nexpr $num1 \\&amp; $num2\nexpr $num0 \\&lt; $num2\nexpr $num0 \\&lt;&#x3D; $num3\nexpr $num0 \\&gt; $num1\nexpr $num1 \\&gt;&#x3D; $num2\nexpr $num2 &#x3D; $num3\nexpr $num4 !&#x3D; $num3\nexpr $num1 + $num1\nexpr $num1 - $num2\nexpr $num1 \\* $num3\nexpr $num1 &#x2F; $num4\nexpr $num2 % $num4\n\ndeclare +i num0 num1 num2 num3 num4\n\n# Output\n#\n# + declare +i num0 num1 num2 num3 num4\n# + declare -i num0&#x3D;56 num1&#x3D;78 num2&#x3D;34 num3&#x3D;90 num4&#x3D;12\n# + expr 56 &#39;|&#39; 90\n# 56\n# + expr 78 &#39;&amp;&#39; 34\n# 78\n# + expr 56 &#39;&lt;&#39; 34\n# 0\n# + expr 56 &#39;&lt;&#x3D;&#39; 90\n# 1\n# + expr 56 &#39;&gt;&#39; 78\n# 0\n# + expr 78 &#39;&gt;&#x3D;&#39; 34\n# 1\n# + expr 34 &#x3D; 90\n# 0\n# + expr 12 &#39;!&#x3D;&#39; 90\n# 1\n# + expr 78 + 78\n# 156\n# + expr 78 - 34\n# 44\n# + expr 78 &#39;*&#39; 90\n# 7020\n# + expr 78 &#x2F; 12\n# 6\n# + expr 34 % 12\n# 10\n# + declare +i num0 num1 num2 num3 num4\n\n练习需求描述提示用户输入一个正整数 num，然后计算 1+2+3+…+num 的值。要求必须对 num 是否为正整数做判断，不符合应当允许再次输入。\n思路分析\n求和\n使用公式 n(a1+an)/2 求和；\n使用 seq -s+ 求和；\n使用循环求和；\n\n\n对 num 是否为整数进行判断：使用命令 expr $num + 0进行求和运算，对命令结果进行判断 &quot;$?&quot; -eq 0 。求和运算要求 num 为整数。如果是浮点数会报错 expr: non-integer argument。 命令执行不成功会返回一个非 0 的整数。\n对 num 是否为正数进行判断：num &gt; 0。\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nwhile true; do\n    read -p &quot;Pls input a positive number: &quot; num\n    expr $&#123;num&#125; + 1 &amp;&gt;&#x2F;dev&#x2F;null # 屏蔽运算结果\n    # if [ $? -eq 0 -a &#96;expr $&#123;num&#125; \\&gt; 0&#96; -eq 1 ]; then\n    if [ $? -eq 0 -a $&#123;num&#125; -gt 0 ] &amp;&gt;&#x2F;dev&#x2F;null; then\n        # 使用求和公式计算\n        a1&#x3D;1 &amp;&amp; an&#x3D;$&#123;num&#125; &amp;&amp; n&#x3D;$&#123;num&#125;\n        echo -e &quot;\\n - 使用求和公式计算:  1+2+3+...+$&#123;num&#125; &#x3D; $((($&#123;a1&#125; + $&#123;an&#125;) * $&#123;n&#125; &#x2F; 2)).&quot;\n\n        # 使用 seq -s+ 计算\n        echo -e &quot; - 使用 seq -s+ 计算: 1+2+3+...+$&#123;num&#125; &#x3D; $(($(seq -s+ 1 $&#123;num&#125;))).&quot;\n\n        # 使用循环计算\n        sum&#x3D;0\n        for ((i &#x3D; 1; i &lt;&#x3D; $&#123;num&#125;; i++)); do\n            sum&#x3D;$(($sum + $i))\n        done\n        echo -e &quot; - 使用循环计算:      1+2+3+...+$&#123;num&#125; &#x3D; $&#123;sum&#125;.\\n&quot;\n    else\n        echo -e &quot;\\n$&#123;Red_font_prefix&#125;ERROR!!!$&#123;Font_color_suffix&#125; Pls input a positive number! \\n&quot;\n        continue\n    fi\ndone\n\n# Output\n#\n# Pls input a positive number: 0\n#\n# ERROR!!! Pls input a positive number!\n#\n# Pls input a positive number: 20\n#\n#  - 使用求和公式计算:  1+2+3+...+20 &#x3D; 210.\n#  - 使用 seq -s+ 计算: 1+2+3+...+20 &#x3D; 210.\n#  - 使用循环计算:      1+2+3+...+20 &#x3D; 210.\n#\n# Pls input a positive number: 2a25\n#\n# ERROR!!! Pls input a positive number!\n#\n# Pls input a positive number: 100\n#\n#  - 使用求和公式计算:  1+2+3+...+100 &#x3D; 5050.\n#  - 使用 seq -s+ 计算: 1+2+3+...+100 &#x3D; 5050.\n#  - 使用循环计算:      1+2+3+...+100 &#x3D; 5050.\n\n数学运算 bc\nbc 是 bash 内建的运算器，支持浮点数运算；\n内建变量 scale 可以设置计算结果精度，默认为 0。\n\n语法\n\n\n语法\n\n\n\necho &quot;$num1 operator $num2&quot; | bc\n\n\n操作符对照表\n\n\n操作符\n含义\n\n\n\nnum1 + num2\n求和运算\n\n\nnum1 - num2\n求差运算\n\n\nnum1 * num2\n求积运算\n\n\nnum1 / num2\n求商运算\n\n\nnum1 % num2\n求余运算\n\n\nnum1 ^ num2\n指数运算\n\n\n练习需求描述提示用户输入数和一个操作符，然后对其进行数学运算。要求：除法运算时计算结果需要精确到 6 位。\n思路分析\n数学运算使用 bc 处理；\n除法运算精确度使用 scale 控制。\n\n脚本编写#!&#x2F;usr&#x2F;bin&#x2F;env bash\nPATH&#x3D;&#x2F;bin:&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:~&#x2F;bin\nexport PATH\n\nGreen_font_prefix&#x3D;&quot;\\033[32m&quot; &amp;&amp; Red_font_prefix&#x3D;&quot;\\033[31m&quot; &amp;&amp; Green_background_prefix&#x3D;&quot;\\033[42;37m&quot; &amp;&amp; Red_background_prefix&#x3D;&quot;\\033[41;37m&quot; &amp;&amp; Font_color_suffix&#x3D;&quot;\\033[0m&quot;\n\nwhile true; do\n    read -e -p &quot;Pls input two positive number and a operator (+|-|*|&#x2F;|%) : &quot; num1 num2 ope\n    case &quot;$&#123;ope&#125;&quot; in\n    +)\n        echo -e &quot;$&#123;num1&#125; + $&#123;num2&#125;&quot; | bc\n        ;;\n    -)\n        echo -e &quot;$&#123;num1&#125; - $&#123;num2&#125;&quot; | bc\n        ;;\n    \\*)\n        echo -e &quot;$&#123;num1&#125; * $&#123;num2&#125;&quot; | bc\n        ;;\n    &#x2F;)\n        echo -e &quot;scale&#x3D;6;$&#123;num1&#125; &#x2F; $&#123;num2&#125;&quot; | bc\n        ;;\n    %)\n        echo -e &quot;$&#123;num1&#125; % $&#123;num2&#125;&quot; | bc\n        ;;\n    *)\n        echo -e &quot;$&#123;Red_font_prefix&#125;ERROR!!!$&#123;Font_color_suffix&#125; Pls input a operator (+|-|*|&#x2F;|%)!\\n &quot;\n        ;;\n    esac\ndone\n\n# Output\n#\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 u\n# ERROR!!! Pls input a operator (+|-|*|&#x2F;|%)!\n#\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 +\n# 23\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 -\n# 17\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 *\n# 60\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 &#x2F;\n# 6.666666\n# Pls input two positive number and a operator (+|-|*|&#x2F;|%) : 20 3 %\n# 2\n\n\n\n\n\n\n\n\n\n\n本文代码：02-shell\n","slug":"2020-10-03-02_变量的高级用法","date":"2020-10-03T11:20:26.000Z","categories_index":"Linux","tags_index":"Linux,Shell","author_index":"JaimeZeng"},{"id":"4ed00788422e64ad67195cd4951f38dd","title":"Git 工作流","content":"Git 工作流提到版本控制管理系统，很多人会第一时间才能想到 SVN 和 Git。而 SVN 和 Git 除了集中式和分布式的区别外，就是分支管理。相比 SVN，Git 提供更丰富的分支特性。\nGit 工作流如下图所示：\n\n现在让我们来看一个最简单的分支管理的例子。\n\n开发某个网站，为实现某个新的需求，创建一个分支并在这个分支上开展工作。\n\n此时，你突然接到一个电话说有个 Bug 需要紧急修补。\n\n返回到原先已经发布到生产服务器上的分支，为这次紧急修补建立一个新分支，并在其中修复问题。\n\n通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。\n\n切换到之前实现新需求的分支，将修补分支合并进来，然后继续工作。\n\n\n这里我们参考 A successful Git branching model 一文来学习 Git 的分支管理。\n主分支主分支包括 master 分支和 develop 分支。\n\nmaster 分支\ndevelop 分支\n\nmaster 分支用来发布，HEAD 就是当前线上的运行代码。develop 分支就是我们的日常开发。使用这两个分支就具有了最简单的开发模式：develop 分支用来开发功能，开发完成并且测试没有问题则将 develop 分支的代码合并到 master 分支并发布。\n\n辅助分支主要介绍的辅助分支如下：\n\nfeature 分支\nrelease 分支\nhotfix 分支\n\n通过这些分支，我们可以做到：团队成员之间并行开发，feature track 更加容易，开发和发布并行以及线上问题修复。辅助分支与主分支的不同点：辅助分支是有限的生命期，他们最终会被移除。\nFeature 分支feature 分支用来开发具体的功能，一般 fork 自 develop 分支，最终可能会合并到 develop 分支。比如我们要在下一个版本增加功能 1、功能 2、功能 3。那么我们就可以起三个 feature 分支：feature1 、 feature2 和 feature3。（feature 分支命名最好能够自解释，这并不是一种好的命名。）随着我们开发，功能 1 和功能 2 都被完成了，而功能 3 因为某些原因完成不了，那么最终 feature1 和 feature2 分支将被合并到 develop 分支，而 feature3 分支将被干掉。\n\n建立 feature 分支并切换到 feature 分支从 develop 分支建立 feature 分支并切换到 feature 分支。\n$ git checkout -b myfeature develop\nSwitched to a new branch &quot;myfeature&quot;\n\n合并 feature 分支到 develop$ git checkout develop\nSwitched to branch &#39;develop&#39;\n$ git merge --no-ff myfeature\nUpdating ea1b82a..05e9557\n(Summary of changes)\n$ git branch -d myfeature\nDeleted branch myfeature\n$ git push origin develop\n\n上面我们 merge 分支的时候使用了参数 --no-ff，ff 是fast-forward 的意思，--no-ff就是禁用fast-forward。关于这两种模式的区别如下图。（可以使用 sourceTree 或者命令git log --graph查看。）\n\n看了上面的图，那么使用非fast-forward模式来 merge 的好处就不言而喻了：我们知道哪些 commit 是某些 feature 相关的。虽然 git merge 的时候会自动判断是否使用fast-farward模式，但是有时候为了更明确，我们还是要加参数--no-ff或者--ff。\nRelease 分支release 分支在我看来是 pre-master。release 分支从 develop 分支 fork 出来，最终会合并到 develop 分支和 master 分支。合并到 master 分支上就是可以发布的代码了。有人可能会问那为什么合并回 develop 分支呢？很简单，有了 release 分支，那么相关的代码修复就只会在 release 分支上改动了，最后必然要合并到 develop 分支。下面细说。\n我们最初所有的开发工作都在 develop 分支上，当我们这一期的功能开发完毕的时候，我们基于 develop 分支开一个新的 release 分支。这个时候我们就可以对 release 分支做统一的测试了，另外做一些发布准备工作：比如版本号之类的。\n如果测试工作或者发布准备工作和具体的开发工作由不同人来做，比如国内的 RD 和 QA，这个 RD 就可以继续基于 develop 分支继续开发了。再或者说公司对于发布有严格的时间控制，开发工作提前并且完美的完成了，这个时候我们就可以在 develop 分支上继续我们下一期的开发了。同时如果测试有问题的话，我们将直接在 release 分支上修改，然后将修改合并到 develop 分支上。\n待所有的测试和准备工作做完之后，我们就可以将 release 分支合并到 master 分支上，并进行发布了。\n一些相关命令如下。\n新建 release 分支$ git checkout -b release-1.2 develop\nSwitched to a new branch &quot;release-1.2&quot;\n$ .&#x2F;bump-version.sh 1.2\nFile modified successfully, version bumped to 1.2.\n$ git commit -a -m &quot;Bumped version number to 1.2&quot;\n[release-1.2 74d9424] Bumped version number to 1.2\n1 files changed, 1 insertions(+), 1 deletions(-)\n\nrelease 分支合并到 master 分支$ git checkout master\nSwitched to branch &#39;master&#39;\n$ git merge --no-ff release-1.2\nMerge made by recursive.\n(Summary of changes)\n$ git tag -a 1.2\n\nrelease 分支合并到 develop 分支$ git checkout develop\nSwitched to branch &#39;develop&#39;\n$ git merge --no-ff release-1.2\nMerge made by recursive.\n(Summary of changes)\n\n删除 release 分支$ git branch -d release-1.2\nDeleted branch release-1.2 (was ff452fe).\n\nHotfix 分支顾名思义，hotfix 分支用来修复线上 bug。当线上代码出现 bug 时，我们基于 master 分支开一个 hotfix 分支，修复 bug 之后再将 hotfix 分支合并到 master 分支并进行发布，同时 develop 分支作为最新最全的代码分支，hotfix 分支也需要合并到 develop 分支上去。仔细想一想，其实 hotfix 分支和 release 分支功能类似。hotfix 的好处是不打断 develop 分支正常进行，同时对于现实代码的修复貌似也没有更好的方法了.\n\n一些相关的命令。\n新建 hotfix 分支$ git checkout -b hotfix-1.2.1 master\nSwitched to a new branch &quot;hotfix-1.2.1&quot;\n$ .&#x2F;bump-version.sh 1.2.1\nFiles modified successfully, version bumped to 1.2.1.\n$ git commit -a -m &quot;Bumped version number to 1.2.1&quot;\n[hotfix-1.2.1 41e61bb] Bumped version number to 1.2.1\n1 files changed, 1 insertions(+), 1 deletions(-)\n\nFix bug$ git commit -m &quot;Fixed severe production problem&quot;\n[hotfix-1.2.1 abbe5d6] Fixed severe production problem\n5 files changed, 32 insertions(+), 17 deletions(-)\n\nhotfix 合并到 masterFix bug 之后，hotfix 合并到 master\n$ git checkout master\nSwitched to branch &#39;master&#39;\n$ git merge --no-ff hotfix-1.2.1\nMerge made by recursive.\n(Summary of changes)\n$ git tag -a 1.2.1\n\nhotfix 合并到 develop 分支$ git checkout develop\nSwitched to branch &#39;develop&#39;\n$ git merge --no-ff hotfix-1.2.1\nMerge made by recursive.\n(Summary of changes)\n\n删除 hotfix 分支$ git branch -d hotfix-1.2.1\nDeleted branch hotfix-1.2.1 (was abbe5d6).\n\n总结\nmaster 分支：主分支，主要存放已经发布到生产服务器上的代码。\ndevelop 分支：日常开发分支，该分支从 master 分支拉取，主要存放着在实现新的产品需求时开发的代码。\nfeature 分支：日常开发特性分支。一般从 develop 分支拉取，主要存放着在实现新产品需求具体功能时开发的代码。具体功能开发完成之后将合并到 develop 分支。\nrelease 分支：产品发布测试分支。主要存放着从 develop 分支合并过来的代码。 develop 分支的代码在新的产品需求全部实现后会合并到 release 分支进行测试，测试没有问题后（到了发布日期）将会合并到 master 分支并发布。测试有问题将会在 release 分支修改，修改测试没问题后将会合并到 master 分支和 develop 分支。\nhotfix 分支：线上 bug 修复分支。主要存放这在紧急修补中为修复问题开发的代码，在测试没有问题后将会合并到 master 分支和 develop 分支。\n\n参考\nA successful Git branching model » nvie.com\ngit 最佳实践: 分支管理 | Legendtkl\n\n","slug":"2020-09-05-Git-工作流","date":"2020-09-18T10:35:43.000Z","categories_index":"Git","tags_index":"Git","author_index":"JaimeZeng"},{"id":"92309251cf261dbf3ee26b874b03ce39","title":"CentOS 7 升级 gcc","content":"Centos7 gcc 版本默认 4.8.5，而有些软件（例如：Redis6、Mariadb10 等）的编译安装需要最低支持 c++11 的 gcc 5.x 版本。我们在需要升级 gcc 的版本。但是 Red Hat 为了软件的稳定和版本支持，yum 上版本也是 4.8.5，所以无法使用 yum 进行软件更新，需要安装 SCL 源升级 gcc。\n$ gcc -v\ngcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)\n\n安装 SCL 源SCL 软件集(Software Collections),是为了给 RHEL/CentOS 用户提供一种以方便、安全地安装和使用应用程序和运行时环境的多个（而且可能是更新的）版本的方式，同时避免把系统搞乱。\nyum install -y centos-release-scl scl-utils-build\n\n更换国内镜像源执行替换命令将软件仓库地址替换为国内镜像地址。\n# 清华大学\nsed -i &#39;s+#baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org+baseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl-rh.repo\nsed -i &#39;s+mirrorlist&#x3D;+#mirrorlist&#x3D;+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl-rh.repo\nsed -i &#39;s+# baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org+baseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl.repo\nsed -i &#39;s+mirrorlist&#x3D;+#mirrorlist&#x3D;+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl.repo\n\n# 阿里云\nsed -i &#39;s+#baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org+baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl-rh.repo\nsed -i &#39;s+mirrorlist&#x3D;+#mirrorlist&#x3D;+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl-rh.repo\nsed -i &#39;s+# baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org+baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl.repo\nsed -i &#39;s+mirrorlist&#x3D;+#mirrorlist&#x3D;+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl.repo\n\n# 腾讯云\nsed -i &#39;s+#baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org+baseurl&#x3D;https:&#x2F;&#x2F;mirrors.cloud.tencent.com+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl-rh.repo\nsed -i &#39;s+mirrorlist&#x3D;+#mirrorlist&#x3D;+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl-rh.repo\nsed -i &#39;s+# baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org+baseurl&#x3D;https:&#x2F;&#x2F;mirrors.cloud.tencent.com+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl.repo\nsed -i &#39;s+mirrorlist&#x3D;+#mirrorlist&#x3D;+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl.repo\n\n# 腾讯云内网\nsed -i &#39;s+#baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org+baseurl&#x3D;https:&#x2F;&#x2F;&#x2F;mirrors.tencentyun.com+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl-rh.repo\nsed -i &#39;s+mirrorlist&#x3D;+#mirrorlist&#x3D;+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl-rh.repo\nsed -i &#39;s+# baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org+baseurl&#x3D;https:&#x2F;&#x2F;&#x2F;mirrors.tencentyun.com+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl.repo\nsed -i &#39;s+mirrorlist&#x3D;+#mirrorlist&#x3D;+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl.repo\n\n# 阿里云内网\nsed -i &#39;s+#baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org+baseurl&#x3D;https:&#x2F;&#x2F;mirrors.cloud.aliyuncs.com+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl-rh.repo\nsed -i &#39;s+mirrorlist&#x3D;+#mirrorlist&#x3D;+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl-rh.repo\nsed -i &#39;s+# baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org+baseurl&#x3D;https:&#x2F;&#x2F;mirrors.cloud.aliyuncs.com+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl.repo\nsed -i &#39;s+mirrorlist&#x3D;+#mirrorlist&#x3D;+&#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-SCLo-scl.repo\n\n替换后的文件内容如下。\n# CentOS-SCLo-sclo.repo\n#\n# Please see http:&#x2F;&#x2F;wiki.centos.org&#x2F;SpecialInterestGroup&#x2F;SCLo for more\n# information\n\n[centos-sclo-sclo]\nname&#x3D;CentOS-7 - SCLo sclo\nbaseurl&#x3D;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;centos&#x2F;7&#x2F;sclo&#x2F;$basearch&#x2F;sclo&#x2F;\n#mirrorlist&#x3D;http:&#x2F;&#x2F;mirrorlist.centos.org?arch&#x3D;$basearch&amp;release&#x3D;7&amp;repo&#x3D;sclo-sclo\ngpgcheck&#x3D;1\nenabled&#x3D;1\ngpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-SIG-SCLo\n\n[centos-sclo-sclo-testing]\nname&#x3D;CentOS-7 - SCLo sclo Testing\nbaseurl&#x3D;http:&#x2F;&#x2F;buildlogs.centos.org&#x2F;centos&#x2F;7&#x2F;sclo&#x2F;$basearch&#x2F;sclo&#x2F;\ngpgcheck&#x3D;0\nenabled&#x3D;0\ngpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-SIG-SCLo\n\n[centos-sclo-sclo-source]\nname&#x3D;CentOS-7 - SCLo sclo Sources\nbaseurl&#x3D;http:&#x2F;&#x2F;vault.centos.org&#x2F;centos&#x2F;7&#x2F;sclo&#x2F;Source&#x2F;sclo&#x2F;\ngpgcheck&#x3D;1\nenabled&#x3D;0\ngpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-SIG-SCLo\n\n[centos-sclo-sclo-debuginfo]\nname&#x3D;CentOS-7 - SCLo sclo Debuginfo\nbaseurl&#x3D;http:&#x2F;&#x2F;debuginfo.centos.org&#x2F;centos&#x2F;7&#x2F;sclo&#x2F;$basearch&#x2F;\ngpgcheck&#x3D;1\nenabled&#x3D;0\ngpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-SIG-SCLo\n\n# CentOS-SCLo-sclo.repo\n#\n# Please see http:&#x2F;&#x2F;wiki.centos.org&#x2F;SpecialInterestGroup&#x2F;SCLo for more\n# information\n\n[centos-sclo-sclo]\nname&#x3D;CentOS-7 - SCLo sclo\n# baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org&#x2F;centos&#x2F;7&#x2F;sclo&#x2F;$basearch&#x2F;sclo&#x2F;\nmirrorlist&#x3D;http:&#x2F;&#x2F;mirrorlist.centos.org?arch&#x3D;$basearch&amp;release&#x3D;7&amp;repo&#x3D;sclo-sclo\ngpgcheck&#x3D;1\nenabled&#x3D;1\ngpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-SIG-SCLo\n\n[centos-sclo-sclo-testing]\nname&#x3D;CentOS-7 - SCLo sclo Testing\nbaseurl&#x3D;http:&#x2F;&#x2F;buildlogs.centos.org&#x2F;centos&#x2F;7&#x2F;sclo&#x2F;$basearch&#x2F;sclo&#x2F;\ngpgcheck&#x3D;0\nenabled&#x3D;0\ngpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-SIG-SCLo\n\n[centos-sclo-sclo-source]\nname&#x3D;CentOS-7 - SCLo sclo Sources\nbaseurl&#x3D;http:&#x2F;&#x2F;vault.centos.org&#x2F;centos&#x2F;7&#x2F;sclo&#x2F;Source&#x2F;sclo&#x2F;\ngpgcheck&#x3D;1\nenabled&#x3D;0\ngpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-SIG-SCLo\n\n[centos-sclo-sclo-debuginfo]\nname&#x3D;CentOS-7 - SCLo sclo Debuginfo\nbaseurl&#x3D;http:&#x2F;&#x2F;debuginfo.centos.org&#x2F;centos&#x2F;7&#x2F;sclo&#x2F;$basearch&#x2F;\ngpgcheck&#x3D;1\nenabled&#x3D;0\ngpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-SIG-SCLo\n\n更新软件包缓存yum makecache fast\n\n查看源中关于 devtoolset-gcc 的软件包devtoolset (Developer Toolset)是按照 Software Collections 的规范打出来的一套 rpm 包，提供了最新版本的 GNU 编译器集合，GNU 调试器以及其他开发，调试和性能监视工具。\n# yum list all --enablerepo&#x3D;&#39;centos-sclo-rh&#39; | grep devtoolset-9-gcc\nRepository epel is listed more than once in the configuration\ndevtoolset-9-gcc.x86_64                    9.3.1-2.el7            centos-sclo-rh\ndevtoolset-9-gcc-c++.x86_64                9.3.1-2.el7            centos-sclo-rh\ndevtoolset-9-gcc-gdb-plugin.x86_64         9.3.1-2.el7            centos-sclo-rh\ndevtoolset-9-gcc-gfortran.x86_64           9.3.1-2.el7            centos-sclo-rh\ndevtoolset-9-gcc-plugin-devel.x86_64       9.3.1-2.el7            centos-sclo-rh\n\n安装软件包yum install -y devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils\n\n切换 gcc 版本&#x2F;&#x2F; 临时有效，退出 shell 或重启会恢复原 gcc 版本\nscl enable devtoolset-9 bash\n\n&#x2F;&#x2F; 长期有效\necho &quot;source &#x2F;opt&#x2F;rh&#x2F;devtoolset-9&#x2F;enable&quot; &gt;&gt;&#x2F;etc&#x2F;profile\n\n此时再查看 gcc 版本。\n$ gcc -v\ngcc version 9.3.1 20200408 (Red Hat 9.3.1-2) (GCC)\n\n查看从 SCL 源中安装的软件包$ scl -l\ndevtoolset-9\n","slug":"2020-08-01-CentOS-7-升级-gcc","date":"2020-08-01T12:33:16.000Z","categories_index":"CentOS","tags_index":"CentOS,gcc","author_index":"JaimeZeng"},{"id":"3d9606322b01991a3969128bbbc840a2","title":"WordPress 简体中文版下载","content":"\n因为 WordPress 的服务器都在国外，所以中国大陆的用户在访问由 WordPress 官方提供的服务时总是很缓慢。近期又因为被攻击的原因，WordPress 的 CDN 提供商屏蔽了中国大陆的流量，导致大陆用户访问插件主题商城等服务时报 429 错误。\nWordPress 简介\n\n\n\n\n\n\n\n\n“WordPress 的目的是为了创建一个优雅的，良好构架的基于 PHP 和 MySQL 以及 GPL 许可协议下的个人发布系统。它是 b2/cafelog 博客平台的正式继承者。WordPress 是新鲜的软件，但是它的根源和开发可以追溯到 2001 年。它是一款成熟而且稳定的产品。我们希望能把精力放在 Web 标准和用户体验上从而创造出一个与众不同的工具。”\nWordPress 是一款专注于易用性、运行速度和用户体验的发布软件。 WordPress 受益于一个活跃的社区，那是开源软件的灵魂所在。\nWordPress 归档\n\n\n\n\n\n\n\n\n2020.12.27 因为小麦魔方限制无法继续上传，所以更换网盘为蓝奏网盘。\nWordPress 简体中文版下载：https://jiea.lanzous.com/b01ttqp6h#ryan\n最新版本\n\n\n版本\n发布时间\n下载地址（.zip）\n下载地址（.tar.gz）\n\n\n\n5.6\n2020 年 12 月 26 日\nwordpress-latest-zh_CN.zip\nwordpress-latest-zh_CN.tar.gz\n\n\n5.6 分支\n\n\n版本\n发布时间\n下载地址\nMD5\nSHA1\n\n\n\n5.6\n2020 年 12 月 26 日\nwordpress-5.6-zh_CN.zip\n6119966ab4dfd3011d7fc065e36704a9\n01285eb6780b087c92dc7d8d26c1163d0bfc2397\n\n\n5.5 分支\n\n\n版本\n发布时间\n下载地址\nMD5\nSHA1\n\n\n\n5.5.3\n2020 年 11 月 27 日\nwordpress-5.5.3-zh_CN.zip\ncd2837d626eae21a1d328b9769f14ea7\n4688ae9dba5b1494ef0109932a280b7036e76e7b\n\n\n5.4 分支\n\n\n版本\n发布时间\n下载地址\nMD5\nSHA1\n\n\n\n5.4.4\n2020 年 11 月 16 日\nwordpress-5.4.4-zh_CN.zip\nedeeb0f5c32cb4672fe09ad0e21bd82e\n4ea9351ea2ae3ce29d0209e0eee477732091baf1\n\n\n5.4.2\n2020 年 8 月 3 日\nwordpress-5.4.2-zh_CN.zip\na4bb6f473d354f71cb36d98e5a4d65fe\n750286ab6871c4dfa67687bc6f21ea50cf80ad97\n\n\n5.4.1\n2020 年 4 月 29 日\nwordpress-5.4.1-zh_CN.zip\nd6f376a697339fa08a691e02c3976e5b\nc35cd2a877a5987bc74213debb0e96b529809395\n\n\n5.4\n2020 年 3 月 31 日\nwordpress-5.4-zh_CN.zip\nd119238616f3edaedb78412a75aa16dc\nf54334f43c490d9c34f3983ce1d0782720435621\n\n\n5.3 分支\n\n\n版本\n发布时间\n下载地址\nMD5\nSHA1\n\n\n\n5.3.6\n2020 年 12 月 5 日\n wordpress-5.3.6-zh_CN.zip\n1d887e4a46e3b6f58437108adafbddc1\neca9a68018d7835208847f81619dff1096efc63c\n\n\n5.3.4\n2020 年 6 月 13 日\n wordpress-5.3.4-zh_CN.zip\na1358e4df58a3505ab3a8d644f98150f\n58ce736d86db2d7064c3a95647ae0be1dc28c120\n\n\n5.3.3\n2020 年 4 月 29 日\nwordpress-5.3.3-zh_CN.zip\n126ba1db63290e68ef4a8fed1e97cf25\nf7e0b4c637e2e59feb3308077803e202dc5d0a21\n\n\n5.3.2\n2019 年 12 月 18 日\n wordpress-5.3.2-zh_CN.zip\n295fc892da6411325fb818b52a3b4eed\n6b0a5c5fe1c97a4b3a52698045399670066ce0c5\n\n\n5.3.1\n2019 年 12 月 13 日\n wordpress-5.3.1-zh_CN.zip\n757c2a790e1e4cedbe92e0f9663f5554\n36ae03924880caee42295650c8ec08b140cae023\n\n\n5.3\n2019 年 11 月 14 日\n wordpress-5.3-zh_CN.zip\n5cfe9e7f2f12ae20e6d1ca8810639bbb\n82a0d295a40efcb0b423f14b181703c147115081\n\n\n","slug":"2020-04-10 WordPress 简体中文版下载","date":"2020-04-10T13:23:43.000Z","categories_index":"WordPress","tags_index":"WordPress","author_index":"JaimeZeng"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2019-11-01T13:23:43.000Z","categories_index":"Hexo","tags_index":"Hexo","author_index":"JaimeZeng"}]